
Base on BOOK *COMMON LISP: A Gentle Introduction to Symbolic Computation* 
By: *David S. Touretzky Carnegie Mellon University*

*  COMMON LISP TUTORIAL
** What is common LISP
LISP stands for "List Processing." The name "LISP" reflects the central data
structure and processing paradigm of the language, which revolves around linked
lists.

*** Lisp Syntax:
Common Lisp uses a prefix notation known as S-expression syntax. Programs in
Common Lisp are written as nested lists of symbols and data.

#+BEGIN_EXAMPLE
#+BEGIN_SRC lisp   :results output 
(print "Hello, World!")

(defun Factorial (N)
(if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(Print (Factorial 5)) ; Output: 120
#+END_SRC
#+END_EXAMPLE

*** Dynamic Typing:
Common Lisp is dynamically typed, meaning that variable types are determined at
runtime rather than being explicitly declared.

*** Automatic Memory Management:
Common Lisp features automatic garbage collection, which takes care of memory
management, freeing developers from manual memory allocation and deallocation.

*** Macros:
Common Lisp provides a powerful macro system that allows developers to extend
the language itself. Macros enable the creation of domain-specific languages and
facilitate metaprogramming.

** DATA STRUCTURES
*** LISTS 
#+BEGIN_SRC lisp    :results output 
  (setq numbers '(1 2 3 4 5))
  (print numbers)

  (setq fruits '(apple banana cherry))
  (print fruits)

#+END_SRC
*** ARRAYS

#+BEGIN_SRC lisp    :results output 
  (setq numbers #(1 2 3 4 5)) ;; create an array
  (setq fruits #("apple" "banana" "cherry"))
#+END_SRC
*** HASH TABLES
#+BEGIN_SRC lisp    :results output 

  (setq my-hash (make-hash-table :test 'equal))
  (puthash 'name "John" my-hash)
  (puthash 'age 30 my-hash)

  (print (gethash 'name my-hash)) ; Output: "John"
  (print (gethash 'age my-hash)) ; Output: 30
  
#+END_SRC
*** VECTORS
#+BEGIN_SRC lisp    :results output 


#+END_SRC
*** QUES & STACKS

** OPERATIONS 

*** Arithmetic Operations:

- Addition: (+ 2 3) ; Output: 5
- Subtraction: (- 5 2) ; Output: 3
- Multiplication: (* 4 5) ; Output: 20
- Division: (/ 10 2) ; Output: 5

*** Comparison Operations:

- Equality: (= 5 5) ; Output: T
- Inequality: (/= 4 2) ; Output: T
- Greater Than: (> 6 3) ; Output: T
- Less Than: (< 2 4) ; Output: T

*** String Operations:

- Concatenation: (concatenate 'string "Hello" " " "World") ;
  Output: "Hello World"

- Substring: (subseq "Lisp Programming" 5 14) ;
  Output: "Programming"

*** List Operations:
- Cons: (cons 1 '(2 3)) ; Output: (1 2 3)
- Car: (car '(1 2 3)) ; Output: 1
- Cdr: (cdr '(1 2 3)) ; Output: (2 3)
- Append: (append '(1 2) '(3 4)) ; Output: (1 2 3 4)
- Push:

*** Looping and Iteration:

Loop: (loop for i from 1 to 5 do (print i)) ; Output: 1 2 3 4 5
Map: (mapcar #'(lambda (x) (* x 2)) '(1 2 3 4 5)) ; Output: (2 4 6 8 10)

*** File Operations:

Reading a File: (with-open-file (stream "file.txt") (do ((line (read-line stream nil) (read-line stream nil))) ((null line)) (print line)))
Writing to a File: (with-open-file (stream "output.txt" :direction :output) (format stream "Hello, World!"))

*** Random Number Generation:

(random 10) ; Output: Random number between 0 and 9
These are just a few examples of the operations available in Common Lisp. Common Lisp provides a rich standard library with a wide range of functions to perform mathematical operations, string manipulations, list operations, file operations, and more. Additionally, Common Lisp allows defining user-defined functions and macros to extend its capabilities.
 
** CONDITIONALS

*** IF
#+BEGIN_SRC lisp    :results output 
  (if (oddp 11) 'odd 'even)
  (if (oddp 32) 'odd 'even)

  (defun my-abs (x)
    (if (< x 0) (- x) x))

  (defun symbol-test (x)
    (if (symbolp x) (list 'yes x 'is 'a 'symbol)
        (list 'no x 'is 'not 'a 'symbol)))

#+END_SRC


Write a function MAKE-EVEN that makes an odd number even by adding one to
it. If the input to MAKE-EVEN is already even, it should be returned
unchanged.

#+BEGIN_SRC    lisp :results output 
    (defun make-even (x)
      (if (oddp x) (+ x 1)
          (list 'no x 'is 'not 'a 'symbol)))

    (make-even 4)
#+END_SRC
Write a function FURTHER that makes a positive number larger by adding
one to it, and a negative number smaller by subtracting one from it. What
does your function do if given the number 0?


#+BEGIN_SRC    lisp :results output 
    (defun further (x)
      (+ x 1))
    (further 4)
#+END_SRC



Recall the primitive function NOT: It returns NIL for a true input and
T for a false one. Suppose Lisp didn’t have a NOT primitive. Show
how to write NOT using just IF and constants (no other functions). Call
your function MY-NOT.


#+BEGIN_SRC    lisp :results output 
  (defun my-not (x)
    (if x
        nil
        t))
  (my-not (= 1 1))
#+END_SRC

Write a function ORDERED that takes two numbers as input and makes a list
of them in ascending order. (ORDERED 3 4) should return the list (3 4).
(ORDERED 4 3) should also return (3 4), in other words, the first and
second inputs should appear in reverse order when the first is greater
than the second.

#+BEGIN_SRC    lisp :results output 
  (defun ordered (x y)
    (if (> y x)
        (list x y)
        (list y x))) 
#+END_SRC

*** THE COND MACRO

#+BEGIN_SRC    lisp :results output 
  (defun compare (x y)
    (cond ((equal x y) 'numbers-are-the-same)
          ((< x y) 'first-is-smaller)
          ((> x y) 'first-is-bigger)))
#+END_SRC    

 Write a version of the absolute value function MY-ABS using COND
instead of IF.

#+BEGIN_SRC    lisp :results output 
  (defun my-abs (x)
    (cond ((< x 0) (- x))
          ((> x 0) x)
          ((= x 0) 0)))

#+END_SRC

#+BEGIN_SRC    lisp :results output 
  (defun shape-type (sides)
    (cond ((= sides 3) 'Triangle)
          ((= sides 4) 'Rectangle)
          ((= sides 5) 'Pentagon)
          ((= sides 6) 'Hexagon)
          (t 'Other)))

  (shape-type 3)  ; Returns 'Triangle
  (shape-type 4)  ; Returns 'Rectangle
  (shape-type 5)  ; Returns 'Pentagon
  (shape-type 6)  ; Returns 'Hexagon
  (shape-type 8)  ; Returns 'Other
  
#+END_SRC    

#+BEGIN_SRC lisp    :results output 

   (defmacro my-first-macro (input)

     )
#+END_SRC

*** THE AND AND OR MACROS



#+BEGIN_SRC lisp    :results output 

  (defun small-positive-oddp (x)
    (and (< x 100)
         (> x 0)
         (oddp x)))


  (defun gtest (x y)
    (or (> x y)
        (zerop x)
        (zerop y)))


#+END_SRC



*** BUILDING COMPLEX PREDICATES

#+BEGIN_SRC lisp    :results output 
  (defun how-alike (a b)
    (cond ((equal a b) 'the-same)
          ((and (oddp a) (oddp b)) 'both-odd)
          ((and (not (oddp a)) (not (oddp b)))
           'both-even)
          ((and (< a 0) (< b 0)) 'both-negative)
          (t 'not-alike)))

  (defun same-sign (x y)
    (or (and (zerop x) (zerop y))
        (and (< x 0) (< y 0))
        (and (> x 0) (> y 0))))


#+END_SRC

 Write a predicate called GEQ that returns T if its first input is greater
than or equal to its second input.

#+BEGIN_SRC lisp    :results output 

  (defun geq (x y)
    (and (or (< x y)  (= x y))))

#+END_SRC

** Variables and Side EFFECTS

*** LOCAL AND GLOBAL VARIABLES
- Scope:
  - Local: Their scope is restricted to the body of the function
  - Global: 
*** SETF ASSIGNS A VALUE TO A VARIABLE

#+BEGIN_SRC lisp    :results output 
  (setf vowels '(a e i o u))
  (length vowels)
  (rest vowels)
  (setf vowels
        '(a e i o u and sometimes y))
  (rest (rest vowels))

  (setf long-list '(a b c d e f g h i))
  (setf haid (rest long-list))
  (setf tail (rest long-list))

  (cons head tail)
  (list head tail)


#+END_SRC
*** THE LET SPECIAL FUNCTION
We can use LET to create this local variable and give it the desired initial
value. Then, in the body of the LET form, we can compute the average.

#+BEGIN_SRC lisp    :results output 

  (defun average (x y)
    (let ((sum (+ x y)))
      (list x y 'average ’is (/ sum 2.0))))

  (defun switch-billing (x)
    (let ((star (first x))
          (co-star (third x)))
      (list co-star ’accompanied ’by star)))


#+END_SRC
*** THE LET* SPECIAL FUNCTION

The LET* special function is similar to LET, except it creates the local
variables one at a time instead of all at once. 

#+BEGIN_SRC lisp    :results output 

  (defun price-change (old new)
    (let* ((diff (- new old))
           (proportion (/ diff old))
           (percentage (* proportion 100.0)))
      (list wwidgets 'changed 'by percentage
             ’percent)))

  (price-change 1.25 1.35)


#+END_SRC


** Applicative Programming

*** FUNCALL

#+BEGIN_SRC lisp    :results output 

(funcall #'cons 'a 'b)
(setf fn #’cons)
fn
(type-of fn)
(funcall fn 'c 'd)

#+END_SRC lisp    

*** THE MAPCAR OPERATOR

#+BEGIN_SRC lisp    :results output 
  (defun square (n)
    (* n n))

  (mapcar #'square '(1 2 3 4 5))

#+END_SRC

*** MANIPULATING TABLES WITH MAPCAR

#+BEGIN_SRC lisp    :results output 
  (setf words
        '((one un)
          (two deux)
          (three trois)
          (four quatre)
          (five cinq)))


  (mapcar #'first words)
  (mapcar #'second words)
  (mapcar #'reverse words)

  (defun translate (x)
    (second (assoc x words)))
  (mapcar #'translate '(three one four one five))
  (TROIS UN QUATRE UN CINQ)

#+END_SRC

*** LAMBDA EXPRESSIONS

#+BEGIN_SRC lisp    :results output 
  (lambda (n) (* n n))
  (mapcar #'(lambda (n) (* n n)) '(1 2 3 4 5))
  (mapcar #'(lambda (n) (* n 10)) '(1 2 3 4 5))

#+END_SRC

*** THE FIND-IF OPERATOR


#+BEGIN_SRC lisp    :results output 
  (find-if #'oddp '(2 4 6 7 8 9))
  (find-if #'(lambda (x) (> x 3))
           '(2 4 6 7 8 9))
  
#+END_SRC

*** WRITING ASSOC WITH FIND-IF
ASSOC searches for a table entry with a specified key. We can write a simple
version of ASSOC that uses FIND-IF to search the table.

#+BEGIN_SRC lisp    :results output 

  (defun my-assoc (key table)
    (find-if #'(lambda (entry)
                 (equal key (first entry)))
             table))

  (my-assoc 'two words)

#+END_SRC

*** REMOVE-IF AND REMOVE-IF-NOT


#+BEGIN_SRC lisp    :results output 
  
#+END_SRC

*** THE REDUCE OPERATOR


#+BEGIN_SRC lisp    :results output 
(reduce #'+ '(1 2 3))
(reduce #'+ '(10 9 8 7 6))
(reduce #'+ '(5))
(reduce #'+ nil)
(reduce #'* '(2 4 5))
(reduce #'* '(3 4 0 7))
(reduce #'* '(8))
#+END_SRC

*** EVERY

#+BEGIN_SRC lisp    :results output 
  (every #'numberp '(1 2 3 4 5))
  (every #'numberp '(1 2 A B C 5))
  (every #'(lambda (x) (> x 0)) '(1 2 3 4 5))
  (every #'(lambda (x) (> x 0)) '(1 2 3 -4 5))
  (every #'oddp nil)
  (every #'evenp nil)
  (every #'> '(10 20 30 40) '(1 5 11 23))
#+END_SRC

** Recursion

*** A FUNCTION TO SEARCH FOR ODD NUMBERS

#+BEGIN_SRC    lisp :results output 

  (defun anyoddp (x)
    (cond ((null x) nil)
          ((oddp (first x)) t)
          (t (anyoddp (rest x)))))

  

#+END_SRC

*** A LISP VERSION OF THE FACTORIAL FUNCTION

#+BEGIN_SRC    lisp :results output 

  (defun fact (n)
    (cond ((zerop n) 1)
          (t (* n (fact (- n 1))))))
  
#+END_SRC

*** A RECURSIVE FUNCTION FOR COUNTING SLICES OF BREAD

#+BEGIN_SRC    lisp :results output 

  (defun count-slices (loaf)
    (cond ((null loaf) 0)
          (t (+ 1 (count-slices (rest loaf))))))

  (dtrace count-slices)


#+END_SRC

*** THE THREE RULES OF RECURSION

1. Know when to stop.
2. Decide how to take one step.
3. Break the journey down into that step plus a smaller journey.

*** INFINITE RECURSION IN LISP

#+BEGIN_SRC    lisp :results output 
  (defun fib (n)
    (+ (fib (- n 1))
       (fib (- n 2))))
#+END_SRC
*** RECURSION TEMPLATES
Double-Test Tail Recursion
#+BEGIN_SRC    lisp :results output 
  (defun anyoddp (x)
    (cond ((null x) nil)
          ((oddp (first x)) t)
          (t (anyoddp (rest x)))))
#+END_SRC

Single-Test Tail Recursion
Augmenting Recursion

** Input/Output
*** THE FORMAT FUNCTION
The ~% directive causes FORMAT to move to a new line
The ~& directive tells FORMAT to move to a new line unless it knows it is
already at the beginning of a new line.
Another important formatting directive is ~S, which inserts the printed
representation of a Lisp object into the message that FORMAT prints.
The ~A directive prints an object without using escape characters.


#+BEGIN_SRC lisp    :results output 

  (format t "Hi, mom!")
  (format t "Time flies~%like an arrow.")
  (format t "Fruit flies~%~%like bananas.")
  (defun mary ()
    (format t "~&Mary had a little bat.")
    (format t "~&Its wings were long and brown.")
    (format t "~&And everywhere that Mary went")
    (format t "~&The bat went, upside-down."))
  (format t "From ~S to ~S in ~S minutes!"
          ’boston '(new york) 55)
  (defun square-talk (n)
    (format t "~&~S squared is ~S" n (* n n)))
  (mapcar #'square-talk '(1 2 3 4 5))
  (defun test (x)
    (format t "~&With escape characters: ~S" x)
    (format t "~&Without escape characters: ~A" x))

#+END_SRC
*** THE READ FUNCTION
#+BEGIN_SRC lisp    :results output 

  (defun my-square ()
    (format t "Please type in a number: ")
    (let ((x (read)))
      (format t "The number ~S squared is ~S.~%"
              x (* x x))))

#+END_SRC
*** THE YES-OR-NO-P FUNCTION
#+BEGIN_SRC lisp    :results output 

  (defun riddle ()
    (if (yes-or-no-p
         "Do you seek Zen enlightenment? ")
        (format t "Then do not ask for it!")
        (format t "You have found it.")))

#+END_SRC
*** EADING FILES WITH WITH-OPEN-FILE and WRITING FILES WITH WITH-OPEN-FILE
The WITH-OPEN-FILE macro provides a convenient way to read data from a
file. Its syntax is:
(WITH-OPEN-FILE (var pathname)
body)

WITH-OPEN-FILE creates a local variable and sets it to a stream object
representing a connection to that file.

Stream objects are a special Lisp datatype for describing connections to
files.

If you want to see one, take a look at the value of the global variable
#+BEGIN_SRC   lisp :results output 
 *TERMINAL-IO* 
#+END_SRC
 It holds
the stream object Lisp uses to read from the keyboard and write to the display.
Here’s what it looks like on my Lisp system:

#+BEGIN_SRC lisp    :results output 

    ;;Let’s try an example of reading data from a file. Suppose the file
    ;;‘‘timber.dat’’ in the directory /usr/dst contains these lines:*
    ;; "The North Slope"
    ;; ((45 redwood) (12 oak) (43 maple))
    ;;100
    ;; We can read this data with the following program:

    (defun get-tree-data ()
      (with-open-file (stream "/usr/dst/timber.dat")
        (let* ((tree-loc (read stream))
               (tree-table (read stream))
               (num-trees (read stream)))
          (format t "~&There are ~S trees on ~S." num-trees tree-loc)
          (format t "~&They are: ~S" tree-table))))

    (defun save-tree-data (tree-loc tree-table num-trees)
      (with-open-file (stream "/usr/dst/timber.newdat"
                              :direction
                              :output)
        (format stream "~S~%" tree-loc)
        (format stream "~S~%" tree-table)
        (format stream "~S~%" num-trees)))

#+END_SRC

**  

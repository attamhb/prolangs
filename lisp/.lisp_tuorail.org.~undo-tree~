(undo-tree-save-format-version . 1)
"462f6e112d212f02f1af8abc15ed170c859c026b"
[nil nil nil nil (25731 61272 618255 260000) 0 nil]
([nil nil ((#("
" 0 1 (fontified t line-prefix "" wrap-prefix "")) . 1) (t 25731 60822 50316 467000)) nil (25731 61272 618251 701000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix "" wrap-prefix "")) . 1)) nil (25731 61272 618241 625000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)))) . -205) (nil fontified nil 204 . 205) (nil wrap-prefix #("    " 0 4 (face org-indent)) 204 . 205) (204 . 205) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)))) . -125) (nil fontified nil 124 . 125) (nil wrap-prefix #("    " 0 4 (face org-indent)) 124 . 125) (124 . 125) 64 (t 25731 61272 626143 785000)) nil (25731 61296 553281 111000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -307) (nil fontified nil 306 . 307) (nil wrap-prefix #("      " 0 6 (face org-indent)) 306 . 307) (306 . 307) 233 (t 25731 61288 442830 422000)) nil (25731 61301 366390 288000) 0 nil] [nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -307) (nil fontified nil 306 . 307) (nil wrap-prefix #("      " 0 6 (face org-indent)) 306 . 307) (306 . 307) 233 (t 25731 61288 442830 422000)) ((#("
" 0 1 (wrap-prefix #("      " 0 6 (face org-indent)) line-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 306) (nil wrap-prefix #("      " 0 6 (face org-indent)) 306 . 307) (nil fontified t 306 . 307) (307 . 308)) (25731 61296 552752 264000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -641) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (nil fontified nil 640 . 641) (nil wrap-prefix #("      " 0 6 (face org-indent)) 640 . 641) (640 . 641) 561 (t 25731 61301 379386 626000)) nil (25731 61321 605174 74000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -1051) (nil fontified nil 1050 . 1051) (nil wrap-prefix #("      " 0 6 (face org-indent)) 1050 . 1051) (1050 . 1051) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -970) (nil fontified nil 969 . 970) (nil wrap-prefix #("      " 0 6 (face org-indent)) 969 . 970) (969 . 970) 892) nil (25731 61321 604959 70000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . -800) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (nil fontified nil 799 . 800) (nil wrap-prefix #("      " 0 6 (face org-indent)) 799 . 800) (799 . 800) 800) nil (25731 61321 604953 520000) 0 nil])
([nil nil ((3398 . 3400) (#(" " 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) keymap (keymap) face org-level-2)) . -3398) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) 3399 (3396 . 3399) (#("0" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -3396) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#("0" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -3397) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 3398 (3396 . 3398) (#("." 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -3396) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) 3397 (3396 . 3397) (3395 . 3396) (t 25731 61321 612247 97000) 3395) nil (25731 62561 899435 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3422 . 3423) (nil fontified nil 3400 . 3423) (3400 . 3423) 3399) nil (25731 62561 899401 728000) 0 nil])
([nil nil ((3402 . 3403) (3400 . 3402) (#("T" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3400) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("H" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3401) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("E" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3402) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#(" " 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3403) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("I" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3404) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("F" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3405) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(" " 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . -3406) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) 3407 (#("SPECIAL FUNCTION" 0 15 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3) 15 16 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t rear-nonsticky t face org-level-3)) . 3407) (undo-tree-id734 . -15) (undo-tree-id735 . -15) (undo-tree-id736 . -15) (undo-tree-id737 . -15) (undo-tree-id738 . -16) (undo-tree-id739 . -15) (undo-tree-id740 . -15) (undo-tree-id741 . -15) (undo-tree-id742 . -15) (undo-tree-id743 . -15) (undo-tree-id744 . -15) (undo-tree-id745 . -15) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -8) (undo-tree-id750 . -8) (undo-tree-id751 . -8) (undo-tree-id752 . -8) (undo-tree-id753 . -16) (undo-tree-id754 . -15) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -6) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -15) (undo-tree-id763 . -15) (undo-tree-id764 . -15) (undo-tree-id765 . -15) (undo-tree-id766 . -15) (undo-tree-id767 . -15) (undo-tree-id768 . -15) (undo-tree-id769 . -15) 3422) nil (25731 62561 899381 123000) 0 nil])
([nil nil ((3403 . 3404) 3403) nil (25731 62561 899021 832000) 0 nil])
([nil nil ((3403 . 3447) (#("src" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 3403) (undo-tree-id65 . -1) (undo-tree-id66 . -3) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) 3406 (3404 . 3406) (#("c" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -3404) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("r" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -3405) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 3406 (3403 . 3406)) nil (25731 62561 899015 44000) 0 nil])
([nil nil ((3414 . 3419)) nil (25731 62561 898290 18000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3465 . 3466) (nil fontified nil 3442 . 3466) (3442 . 3466) 3441) nil (25731 62561 898289 284000) 0 nil])
([nil nil ((3470 . 3472) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3469) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (3469 . 3472) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3468) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (3468 . 3471) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 3467) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (3469 . 3470) (3466 . 3469) 3463) nil (25731 62561 898286 139000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3468 . 3469) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . -3493) (3466 . 3494) 3442) nil (25731 62561 898252 584000) 0 nil])
([nil nil ((3479 . 3480) (#("1" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block) help-echo nil)) . 3479)) nil (25731 62561 898247 38000) 0 nil])
([nil nil ((3453 . 3455) (#("o" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3453) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 3454 (3453 . 3454) (t 25731 62561 958717 781000)) nil (25731 62576 534273 277000) 0 nil])
([nil nil ((#("3" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -3483) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) 3484 (3483 . 3484) (3481 . 3483) (#("2" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3481) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) 3482) nil (25731 62576 534254 840000) 0 nil])
([nil nil ((#("0" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3453) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1)) nil (25731 62576 534233 36000) 0 nil])
([nil nil ((3804 . 3806) (#("  " 0 2 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 3803) (undo-tree-id928 . -2) (undo-tree-id929 . -2) (undo-tree-id930 . -2) (undo-tree-id931 . -2) (undo-tree-id932 . -2) (undo-tree-id933 . -2) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2) (undo-tree-id940 . -2) (undo-tree-id941 . -2) (undo-tree-id942 . -2) (undo-tree-id943 . -2) (undo-tree-id944 . -2) (undo-tree-id945 . -2) (undo-tree-id946 . -2) (undo-tree-id947 . -2) (undo-tree-id948 . -2) (undo-tree-id949 . -2) (undo-tree-id950 . -2) (undo-tree-id951 . -2) (3805 . 3806) (#("  " 0 2 (fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . 3806) 3702 (3802 . 3805) (t 25731 62576 540526 485000) 3801) nil (25731 62669 300143 457000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3844 . 3845) (nil fontified nil 3824 . 3845) (nil fontified nil 3806 . 3824) (3806 . 3845) 3805) nil (25731 62669 300128 765000) 0 nil])
([nil nil ((3705 . 3707) (3733 . 3734) (3737 . 3738) (3772 . 3773) (3774 . 3775) (3785 . 3787) (3824 . 3826) 3702) nil (25731 62669 300127 433000) 0 nil])
([nil nil ((3834 . 3836) 3702) nil (25731 62746 574254 803000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) font-lock-multiline t face (org-block))) . 3793)) ((3793 . 3795)) (25731 62747 613166 779000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3778)) ((3778 . 3780)) (25731 62747 959022 767000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3705)) ((3705 . 3707)) (25731 62748 347119 462000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent)) font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("          " 0 4 (face org-indent) 4 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3737)) ((3737 . 3739) (t 25731 62669 300041 528000)) (25731 62748 704805 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3535 . 3536) (nil fontified nil 3515 . 3536) (nil fontified nil 3497 . 3515) (3497 . 3536) (t 25731 62669 300041 528000)) nil (25731 62763 194049 133000) 0 nil] [nil nil ((nil rear-nonsticky nil 3534 . 3535) (nil fontified nil 3514 . 3535) (nil fontified nil 3496 . 3514) (3496 . 3535) (t 25731 62669 300041 528000)) ((#("(defun my-abs (x)
(if (< x 0) (- x) x))" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t) 1 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 7 13 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 13 14 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 14 15 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t) 15 16 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 16 17 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t) 17 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t) 19 21 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 21 22 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 22 23 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 23 28 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 28 29 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 29 30 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 30 31 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 31 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 34 35 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 35 37 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 37 38 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t) 38 39 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t)) . 3496) (undo-tree-id952 . -38) (undo-tree-id953 . -38) (undo-tree-id954 . -16) (undo-tree-id955 . 23) (undo-tree-id956 . -17) (undo-tree-id957 . 25) (undo-tree-id958 . -15) (undo-tree-id959 . -16) (undo-tree-id960 . -16) (nil rear-nonsticky t 3534 . 3535)) (25731 62740 549278 891000) 0 nil])
([nil nil ((3442 . 3444) (3468 . 3470) (3497 . 3499) (3515 . 3517) 3440) nil (25731 62763 194047 317000) 0 nil])
nil
([nil nil ((3523 . 3525) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3546) 3440) nil (25731 62763 194044 834000) 0 nil])
([nil nil ((#("  " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 1 2 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) rear-nonsticky t help-echo nil font-lock-multiline t face (org-block))) . 3472) 3440) nil (25731 62763 194042 624000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3442) 3440) nil (25731 62763 194036 936000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3644 . 3645) (nil fontified nil 3611 . 3645) (nil fontified nil 3566 . 3611) (nil fontified nil 3543 . 3566) (3543 . 3645) (t 25731 62763 201385 920000)) nil (25731 62868 230084 185000) 0 nil])
([nil nil ((3442 . 3444) (3468 . 3470) (3499 . 3501) (3517 . 3518) (3521 . 3522) (3543 . 3545) (3566 . 3568) (3611 . 3613) 3440) nil (25731 62884 408149 979000) 0 nil] [nil nil ((3442 . 3444) (3468 . 3470) (3499 . 3501) (3517 . 3518) (3521 . 3522) (3543 . 3545) (3566 . 3568) (3611 . 3613) 3440) ((#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3611) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3566) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3543) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3521) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3517) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3499) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3468) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3442)) (25731 62868 229455 789000) 0 nil])
([nil nil ((3578 . 3580) 3440) nil (25731 62884 408147 993000) 0 nil])
nil
([nil nil ((3627 . 3633) 3440) nil (25731 62884 408147 168000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3503) 3440) nil (25731 62884 408146 118000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3442) 3440) nil (25731 62884 408144 717000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3470) 3440) nil (25731 62884 408143 560000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3521) 3440) nil (25731 62884 408142 27000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . -3543) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) 3545 (3542 . 3545) 3525) nil (25731 62884 408137 405000) 0 nil])
([nil nil ((3595 . 3596) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3595) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (t 25731 62884 417612 47000)) nil (25731 62907 318860 638000) 0 nil])
([nil nil ((3602 . 3603) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3602)) nil (25731 62907 318854 650000) 0 nil])
([nil nil ((3606 . 3607) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3606)) nil (25731 62907 318853 807000) 0 nil])
([nil nil ((3609 . 3610) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3609)) nil (25731 62907 318852 826000) 0 nil])
([nil nil ((3632 . 3633) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3632) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1)) nil (25731 62907 318851 208000) 0 nil])
([nil nil ((3638 . 3639) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3638)) nil (25731 62907 318832 680000) 0 nil])
([nil nil ((3647 . 3648) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3647)) nil (25731 62907 318830 623000) 0 nil])
([nil nil ((3650 . 3651) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3650)) nil (25731 62907 318825 123000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3668 . 3669) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)))) . -3703) (3660 . 3704) 3626 (t 25731 62907 331569 74000)) nil (25731 63104 988592 322000) 0 nil])
([nil nil ((#("        (list 'no x 'is ’not 'a 'symbol)))
" 0 2 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 2 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 7 8 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) rear-nonsticky t help-echo nil font-lock-multiline t face (org-block)) 8 9 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 9 13 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 13 14 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 14 15 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 15 20 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 20 21 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 21 29 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 29 30 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 30 32 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 32 33 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 33 39 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 39 40 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 40 41 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 41 42 (rear-nonsticky t font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 42 43 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3661) (undo-tree-id1217 . -14) (undo-tree-id1218 . 4) (undo-tree-id1219 . -42) (undo-tree-id1220 . -43) (undo-tree-id1221 . -39) (undo-tree-id1222 . -38) (undo-tree-id1223 . -38) (undo-tree-id1224 . -38) (undo-tree-id1225 . -38) (undo-tree-id1226 . -38) (undo-tree-id1227 . -38) (undo-tree-id1228 . -38) (undo-tree-id1229 . -14) (undo-tree-id1230 . -14) (undo-tree-id1231 . -14) (undo-tree-id1232 . -14) (undo-tree-id1233 . -14) (undo-tree-id1234 . -14) (undo-tree-id1235 . -14) (undo-tree-id1236 . -14) (undo-tree-id1237 . -14) (undo-tree-id1238 . -14) (undo-tree-id1239 . -14) (undo-tree-id1240 . -14) (undo-tree-id1241 . -14) (undo-tree-id1242 . -14) (undo-tree-id1243 . -14) (undo-tree-id1244 . -14) (undo-tree-id1245 . -14) (undo-tree-id1246 . -14) (undo-tree-id1247 . -14) (undo-tree-id1248 . -14) (undo-tree-id1249 . -14) (undo-tree-id1250 . -14) (undo-tree-id1251 . -14) (undo-tree-id1252 . -14) (undo-tree-id1253 . -14) (undo-tree-id1254 . -14) (undo-tree-id1255 . -14) (undo-tree-id1256 . -14) (undo-tree-id1257 . -14) (undo-tree-id1258 . -14) (undo-tree-id1259 . -14) (undo-tree-id1260 . -14) (undo-tree-id1261 . -14) (undo-tree-id1262 . -14) (undo-tree-id1263 . -14) (undo-tree-id1264 . -14) (undo-tree-id1265 . -14) (undo-tree-id1266 . -14) (undo-tree-id1267 . -14) (undo-tree-id1268 . -14) (undo-tree-id1269 . -14) (undo-tree-id1270 . -14) (undo-tree-id1271 . -14) (undo-tree-id1272 . -14) (undo-tree-id1273 . -14) (undo-tree-id1274 . -14) (undo-tree-id1275 . -14) (undo-tree-id1276 . -14) (undo-tree-id1277 . -14) (undo-tree-id1278 . -14) (undo-tree-id1279 . -14) (undo-tree-id1280 . -14) (undo-tree-id1281 . -14) (undo-tree-id1282 . -14) (undo-tree-id1283 . -14) (undo-tree-id1284 . -14) (undo-tree-id1285 . -14) (undo-tree-id1286 . -14) (undo-tree-id1287 . -14) (undo-tree-id1288 . -14) (undo-tree-id1289 . -14) (undo-tree-id1290 . -14) (undo-tree-id1291 . -14) (undo-tree-id1292 . -14) (undo-tree-id1293 . -14) (undo-tree-id1294 . -14) (undo-tree-id1295 . -14) (undo-tree-id1296 . -14) (undo-tree-id1297 . -14) (undo-tree-id1298 . -14) (undo-tree-id1299 . -14) (undo-tree-id1300 . -14) (undo-tree-id1301 . -8) (undo-tree-id1302 . -38) (undo-tree-id1303 . -38) (undo-tree-id1304 . -38) (undo-tree-id1305 . -38) (undo-tree-id1306 . -38) (undo-tree-id1307 . -38) (undo-tree-id1308 . -38) (undo-tree-id1309 . -38) (undo-tree-id1310 . -9) (undo-tree-id1311 . -9) (undo-tree-id1312 . -9) (undo-tree-id1313 . -9) (undo-tree-id1314 . -9) (undo-tree-id1315 . -9) (undo-tree-id1316 . -9) (undo-tree-id1317 . 35) (undo-tree-id1318 . -9) (undo-tree-id1319 . 4) (undo-tree-id1320 . -40) (undo-tree-id1321 . -8) (undo-tree-id1322 . -8) (undo-tree-id1323 . -8) (undo-tree-id1324 . -8) (undo-tree-id1325 . -8) (undo-tree-id1326 . -8) (undo-tree-id1327 . -8) (undo-tree-id1328 . -8) (undo-tree-id1329 . -8) 3669) nil (25731 63111 558788 89000) 0 nil] [nil nil ((3626 . 3629)) ((#(";;;" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) . 3626)) (25731 63104 273626 73000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3643 . 3644) (nil fontified nil 3643 . 3644) (3643 . 3644) 3642) nil (25731 63118 715358 852000) 0 nil] [nil nil ((#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3642)) ((3642 . 3643)) (25731 63111 558529 834000) 0 nil] [nil nil ((#("'" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3638)) ((3638 . 3639)) (25731 63109 485082 263000) 0 nil])
([nil nil ((3673 . 3678) (#("list" 0 4 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3673)) ((3673 . 3677) (#("print" 0 5 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3673)) (25731 63103 658175 252000) 0 nil])
([nil nil ((#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3642) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1)) nil (25731 63118 715356 561000) 0 nil])
nil
nil
([nil nil ((3701 . 3702) (3697 . 3701) (3686 . 3697) (#("s" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -3686) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#("i" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -3687) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -3688) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 3689 (3679 . 3689) (#("'no x 'is ’not 'a 'symbol" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 1 6 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 6 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 7 15 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 15 16 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 16 18 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 18 19 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 19 25 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3679) (undo-tree-id1127 . -24) (undo-tree-id1128 . -24) (undo-tree-id1129 . -24) (undo-tree-id1130 . -25) (undo-tree-id1131 . -24) (undo-tree-id1132 . -25) (undo-tree-id1133 . -24) (undo-tree-id1134 . -24) (undo-tree-id1135 . -24) (undo-tree-id1136 . -24) (undo-tree-id1137 . -24) (undo-tree-id1138 . -24) (undo-tree-id1139 . -24) (undo-tree-id1140 . -24) 3703) ((3679 . 3704) (#("\"no it si " 0 7 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 7 8 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 8 9 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 9 10 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3679) (undo-tree-id1141 . -9) (undo-tree-id1142 . -8) (undo-tree-id1143 . -8) (undo-tree-id1144 . -8) (undo-tree-id1145 . -8) (undo-tree-id1146 . -8) (undo-tree-id1147 . -8) (undo-tree-id1148 . -8) (undo-tree-id1149 . -8) (undo-tree-id1150 . -8) (undo-tree-id1151 . -8) (undo-tree-id1152 . -8) (undo-tree-id1153 . -8) (undo-tree-id1154 . -8) (undo-tree-id1155 . -8) (undo-tree-id1156 . -8) (undo-tree-id1157 . -8) (undo-tree-id1158 . -8) (undo-tree-id1159 . -8) (undo-tree-id1160 . -8) (undo-tree-id1161 . -8) (undo-tree-id1162 . -8) (undo-tree-id1163 . -8) (undo-tree-id1164 . -8) (undo-tree-id1165 . -8) (undo-tree-id1166 . -8) (undo-tree-id1167 . -8) (undo-tree-id1168 . -8) (undo-tree-id1169 . -8) (undo-tree-id1170 . -8) (undo-tree-id1171 . -9) (undo-tree-id1172 . -9) (undo-tree-id1173 . -9) (undo-tree-id1174 . -9) (undo-tree-id1175 . -9) (undo-tree-id1176 . -9) (undo-tree-id1177 . -9) (undo-tree-id1178 . -9) (undo-tree-id1179 . -9) (undo-tree-id1180 . -9) (undo-tree-id1181 . -9) (undo-tree-id1182 . -9) (undo-tree-id1183 . -9) (undo-tree-id1184 . -10) (undo-tree-id1185 . -10) (undo-tree-id1186 . -10) (undo-tree-id1187 . -10) (undo-tree-id1188 . -10) (undo-tree-id1189 . -10) (undo-tree-id1190 . -10) (undo-tree-id1191 . -10) (undo-tree-id1192 . -10) (undo-tree-id1193 . -10) (undo-tree-id1194 . -10) (undo-tree-id1195 . -10) (undo-tree-id1196 . -10) (undo-tree-id1197 . -10) (undo-tree-id1198 . -10) (undo-tree-id1199 . -9) (undo-tree-id1200 . -9) (undo-tree-id1201 . -9) (undo-tree-id1202 . -9) (undo-tree-id1203 . -9) (undo-tree-id1204 . -9) (undo-tree-id1205 . -9) (undo-tree-id1206 . -8) (undo-tree-id1207 . -8) (undo-tree-id1208 . -8) (undo-tree-id1209 . -8) (undo-tree-id1210 . -8) (undo-tree-id1211 . -8) (undo-tree-id1212 . -8) (undo-tree-id1213 . -9) (3686 . 3689) (#("is not a sy" 0 11 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-string-face org-block))) . 3686) (undo-tree-id1214 . -11) (undo-tree-id1215 . -11) (#("mbol" 0 4 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil)) . 3697) (undo-tree-id1216 . -4) (#("\"" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil)) . 3701)) (25731 63103 657101 343000) 0 nil])
([nil nil ((3642 . 3643) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3642) (undo-tree-id1330 . -1)) nil (25731 63118 715341 586000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3824 . 3825) (nil fontified nil 3803 . 3825) (nil fontified nil 3732 . 3803) (nil fontified nil 3672 . 3732) (3672 . 3825) (t 25731 63118 774462 703000)) nil (25731 63215 981427 143000) 0 nil])
([nil nil ((3827 . 3871) (#("src" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 3827) (undo-tree-id1601 . -1) (undo-tree-id1602 . -3) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -3) (undo-tree-id1655 . -3) (undo-tree-id1656 . -3) (undo-tree-id1657 . -3) (undo-tree-id1658 . -3) (undo-tree-id1659 . -3) (undo-tree-id1660 . -3) (undo-tree-id1661 . -3) 3830 (3828 . 3830) (#("c" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -3828) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) 3829 (3827 . 3829) (3826 . 3827) (3825 . 3826) 3824) nil (25731 63215 981423 237000) 0 nil])
([nil nil ((3842 . 3847)) nil (25731 63215 981379 306000) 0 nil])
([nil nil ((3671 . 3672) 3670) nil (25731 63215 981378 608000) 0 nil])
([nil nil ((3732 . 3733) 3673) nil (25731 63215 981377 859000) 0 nil])
([nil nil ((3732 . 3733) 3673) nil (25731 63215 981377 26000) 0 nil])
([nil nil ((3672 . 3673) 3672) nil (25731 63215 981376 260000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-block-end-line)) . 3673) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . 1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1)) nil (25731 63215 981374 653000) 0 nil])
([nil nil ((3732 . 3733) 3673) nil (25731 63215 981359 832000) 0 nil])
([nil nil ((3672 . 3673) 3672) nil (25731 63215 981358 937000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 3734) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1)) nil (25731 63215 981357 138000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 3734) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1)) nil (25731 63215 981338 547000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 3734)) nil (25731 63215 981207 76000) 0 nil])
([nil nil ((3733 . 3734) (#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -3733) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . 1) 3674) nil (25731 63215 981198 153000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 3747) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (3748 . 3749)) nil (25731 63215 980741 459000) 0 nil])
([nil nil ((3804 . 3805) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -3804) (undo-tree-id1367 . -1) 3748) nil (25731 63215 980729 723000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 3816) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (3817 . 3818)) nil (25731 63215 980724 604000) 0 nil])
([nil nil ((3929 . 3934) (#("a" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3929) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (#("n" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3930) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3931) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (#("'" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3932) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (#("v" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3933) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (#("e" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3934) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (#("n" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3935) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (#("e" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3936) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) 3937 (3924 . 3937) (#("i" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3924) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (#("s" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3925) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3926) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) 3927 (3916 . 3927) (3907 . 3916) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3907) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (#("l" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3908) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) 3909 (3906 . 3909) (#("{" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -3906) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) 3907 (3906 . 3907) (3904 . 3906) 3866 (3901 . 3904) (3895 . 3901) (#("o" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3895) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (#("p" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3896) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) 3897 (3891 . 3897) (3866 . 3868) (3887 . 3889) 3866 (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -3887) (undo-tree-id2904 . -2) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3886) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (3887 . 3888) (3886 . 3887) (3873 . 3886) (#("k" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block))) . -3873) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) 3874 (3868 . 3874) (#("f" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3868) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (#("e" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3869) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) 3870 (3866 . 3870) (t 25731 63215 991291 741000)) nil (25731 63317 793275 429000) 0 nil])
([nil nil ((3902 . 3907) (3901 . 3902) (#("=" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3901) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3902) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) 3903 (3899 . 3903) (3895 . 3899) (#("." 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3895) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) 3896 (3895 . 3896)) nil (25731 63317 792075 33000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 3906) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1)) nil (25731 63317 792034 551000) 0 nil])
([nil nil ((3906 . 3907)) nil (25731 63317 792029 214000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3907) (undo-tree-id1672 . 1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3908) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3909) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3910) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3911) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) 3912) nil (25731 63317 792010 752000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3893) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) 3894 (t 25731 63317 800051 32000)) nil (25731 63326 498288 901000) 0 nil])
([nil nil ((3911 . 3913) 3866 (3908 . 3911) (3907 . 3908) (t 25731 63326 503441 704000)) nil (25731 63335 961519 311000) 0 nil])
([nil nil ((#("    
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 2 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 4 5 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 3909) (undo-tree-id3003 . 1) (undo-tree-id3004 . -3) (undo-tree-id3005 . -2) (undo-tree-id3006 . -4) (undo-tree-id3007 . -4) (undo-tree-id3008 . -4) (undo-tree-id3009 . -4) (undo-tree-id3010 . -4) (undo-tree-id3011 . -4) (undo-tree-id3012 . -4) (undo-tree-id3013 . -4) (undo-tree-id3014 . -3) (undo-tree-id3015 . -3) (undo-tree-id3016 . -3) (undo-tree-id3017 . -3) (undo-tree-id3018 . -3) (undo-tree-id3019 . -3) (undo-tree-id3020 . -3) (undo-tree-id3021 . -3) (undo-tree-id3022 . -3) (undo-tree-id3023 . -3) (undo-tree-id3024 . -3) (undo-tree-id3025 . -3) (undo-tree-id3026 . -3) (undo-tree-id3027 . -3) (undo-tree-id3028 . -3) (undo-tree-id3029 . -3) (undo-tree-id3030 . -3) (undo-tree-id3031 . -3) (undo-tree-id3032 . -3) (undo-tree-id3033 . -3) (undo-tree-id3034 . -3) (undo-tree-id3035 . -3) (undo-tree-id3036 . -3) 3912) nil (25731 63352 937439 338000) 0 nil])
([nil nil ((3957 . 3958) (3955 . 3957) (3952 . 3955) (3945 . 3952) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -3945) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) 3946 (3944 . 3946) 3866 (3941 . 3944) (t 25731 63336 18777 12000) 3911) nil (25731 63535 168574 147000) 0 nil] [nil nil ((3912 . 3914) 3866 (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 3909) (undo-tree-id3037 . -2) (undo-tree-id3038 . 2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -2) (undo-tree-id3042 . -2) (undo-tree-id3043 . -2) (undo-tree-id3044 . -2) (undo-tree-id3045 . -2) (undo-tree-id3046 . -2) (undo-tree-id3047 . -2) (undo-tree-id3048 . -2) (undo-tree-id3049 . -2) (undo-tree-id3050 . -2) (undo-tree-id3051 . -2) (undo-tree-id3052 . -2) (undo-tree-id3053 . -2) (undo-tree-id3054 . -2) (undo-tree-id3055 . -2) (undo-tree-id3056 . -2) (undo-tree-id3057 . -2) (undo-tree-id3058 . -2) (undo-tree-id3059 . -2) (undo-tree-id3060 . -2) (undo-tree-id3061 . -2) (undo-tree-id3062 . -2) (undo-tree-id3063 . -2) (3911 . 3912) (t 25731 63336 18777 12000)) ((#("
" 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 3911) (3909 . 3911) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 3912) (undo-tree-id3064 . -2) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1)) (25731 63352 936921 153000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block))) . -3914) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) 3915 (3914 . 3915) (3908 . 3914) 3866 (3905 . 3908) (3903 . 3905) (3897 . 3903) (#("o" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3897) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (#("d" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3898) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (#("d" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3899) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (#("p" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3900) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) 3901 (3893 . 3901) (3891 . 3893) 3866 (3888 . 3891)) nil (25731 63535 168547 149000) 0 nil])
nil
([nil nil ((#("        
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 8 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 9 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3906) (undo-tree-id3158 . 1) (undo-tree-id3159 . -9) (undo-tree-id3160 . -7) (undo-tree-id3161 . -2) (undo-tree-id3162 . -8) (undo-tree-id3163 . -8) (undo-tree-id3164 . -8) (undo-tree-id3165 . -8) (undo-tree-id3166 . -8) (undo-tree-id3167 . -8) (undo-tree-id3168 . -8) (undo-tree-id3169 . -8) (undo-tree-id3170 . -8) (undo-tree-id3171 . -8) (undo-tree-id3172 . -8) (undo-tree-id3173 . -8) (undo-tree-id3174 . -8) (undo-tree-id3175 . -8) (undo-tree-id3176 . -8) (undo-tree-id3177 . -8) (undo-tree-id3178 . -8) (undo-tree-id3179 . -8) (undo-tree-id3180 . -8) (undo-tree-id3181 . -8) (undo-tree-id3182 . -8) (undo-tree-id3183 . -8) (undo-tree-id3184 . -7) (undo-tree-id3185 . -7) (undo-tree-id3186 . -7) (undo-tree-id3187 . -7) (undo-tree-id3188 . -7) (undo-tree-id3189 . -7) (undo-tree-id3190 . -7) (undo-tree-id3191 . -7) (undo-tree-id3192 . -7) (undo-tree-id3193 . -7) (undo-tree-id3194 . -7) (undo-tree-id3195 . -7) (undo-tree-id3196 . -7) (undo-tree-id3197 . -7) (undo-tree-id3198 . -7) (undo-tree-id3199 . -7) (undo-tree-id3200 . -7) (undo-tree-id3201 . -7) (undo-tree-id3202 . -7) (undo-tree-id3203 . -7) (undo-tree-id3204 . -7) (undo-tree-id3205 . -7) (undo-tree-id3206 . -7) 3913) nil (25731 63535 167937 259000) 0 nil])
([nil nil ((3910 . 3914) 3866) nil (25731 63535 167380 177000) 0 nil])
([nil nil ((#("oddp" 0 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 3921) (undo-tree-id3141 . 4) (undo-tree-id3142 . -3) (undo-tree-id3143 . -3) (undo-tree-id3144 . -3) (undo-tree-id3145 . -3) (undo-tree-id3146 . -3) (undo-tree-id3147 . -3) (undo-tree-id3148 . -3) (undo-tree-id3149 . -3) (undo-tree-id3150 . -3) (undo-tree-id3151 . -3) (undo-tree-id3152 . -3) (undo-tree-id3153 . -3) (undo-tree-id3154 . -3) (undo-tree-id3155 . -3) (undo-tree-id3156 . -3) (undo-tree-id3157 . -3) 3924) nil (25731 63535 167378 726000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block))) . 3920) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . 1) (undo-tree-id3140 . -1)) nil (25731 63535 167366 913000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 3923) (undo-tree-id3100 . -1) (undo-tree-id3101 . 1) (undo-tree-id3102 . -1)) nil (25731 63535 167345 536000) 0 nil])
([nil nil ((3956 . 3958) (#("." 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3956) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (#("." 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -3957) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) 3958 (3956 . 3958)) nil (25731 63535 167340 803000) 0 nil])
([nil nil ((3897 . 3898)) nil (25731 63535 167311 652000) 0 nil])
([nil nil ((3924 . 3925)) nil (25731 63618 900775 265000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3967 . 3968) (3868 . 3968) (#("(defun make-even (x)
    (if ((oddp x)
        (+  1  x))
    (list 'already 'x 'is 'even)))
   (make-even 3)" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1 6 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 6 7 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 16 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 16 17 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 17 18 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 18 19 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 19 20 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 20 21 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 21 23 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 23 25 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 25 26 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 26 28 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 29 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 29 30 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 30 31 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 31 37 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 37 38 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 38 39 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 39 43 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 43 47 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 47 48 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 48 53 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 53 55 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 55 56 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 56 57 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 57 58 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 58 60 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 60 62 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 62 63 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 63 89 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 89 90 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 90 91 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 91 92 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 92 93 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 93 95 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 96 97 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 97 103 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 103 108 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 108 109 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . 3868) (undo-tree-id3996 . -108) (undo-tree-id3997 . -108) (undo-tree-id3998 . 52) (undo-tree-id3999 . -39) (undo-tree-id4000 . -108) (undo-tree-id4001 . -108) (undo-tree-id4002 . 1) (undo-tree-id4003 . -109) (undo-tree-id4004 . 13) (undo-tree-id4005 . -97) (undo-tree-id4006 . -109) (undo-tree-id4007 . -108) (undo-tree-id4008 . -108) (undo-tree-id4009 . -108) (undo-tree-id4010 . -108) (undo-tree-id4011 . -108) (undo-tree-id4012 . -108) (undo-tree-id4013 . -108) (undo-tree-id4014 . -108) (undo-tree-id4015 . -108) (undo-tree-id4016 . -108) (undo-tree-id4017 . -108) (undo-tree-id4018 . -108) (undo-tree-id4019 . -108) (undo-tree-id4020 . -108) (undo-tree-id4021 . -108) (undo-tree-id4022 . -108) (undo-tree-id4023 . -108) (undo-tree-id4024 . -108) (undo-tree-id4025 . -108) (undo-tree-id4026 . -108) (undo-tree-id4027 . -108)) ((3868 . 3977) (#("(defun make-even (x)
  (if (oddp x)
      (+ 1 x)
      (list 'already x 'is 'even)))

(make-even 3)" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 16 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 16 17 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 17 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 19 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 20 21 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 21 23 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 23 24 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 24 26 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 26 27 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 27 28 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 28 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 35 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 35 36 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 36 42 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 42 43 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 43 48 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 48 49 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 49 50 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 50 56 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 56 57 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 57 82 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 82 83 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 83 84 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 84 85 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 85 86 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 86 87 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 87 88 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 88 99 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 99 100 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . 3868) (undo-tree-id3969 . -84) (undo-tree-id3970 . -84) (undo-tree-id3971 . 16) (undo-tree-id3972 . -85) (undo-tree-id3973 . 100) (undo-tree-id3974 . -1) (undo-tree-id3975 . -84) (undo-tree-id3976 . -84) (undo-tree-id3977 . -84) (undo-tree-id3978 . -84) (undo-tree-id3979 . -84) (undo-tree-id3980 . -84) (undo-tree-id3981 . -84) (undo-tree-id3982 . -84) (undo-tree-id3983 . -84) (undo-tree-id3984 . -84) (undo-tree-id3985 . -84) (undo-tree-id3986 . -84) (undo-tree-id3987 . -84) (undo-tree-id3988 . -84) (undo-tree-id3989 . -84) (undo-tree-id3990 . -84) (undo-tree-id3991 . -84) (undo-tree-id3992 . -84) (undo-tree-id3993 . -84) (undo-tree-id3994 . -84) (undo-tree-id3995 . -84) (nil rear-nonsticky t 3967 . 3968) (t 25731 63590 85441 540000)) (25731 63635 274772 40000) 0 nil])
([nil nil ((3966 . 3967) (#("3" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3966) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (t 25731 63590 85441 540000)) nil (25731 63715 166490 308000) 0 nil] [nil nil ((#("'already x 'is 'even)))" 0 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 20 21 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 21 22 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 22 23 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . 3930) (undo-tree-id4028 . -22) (undo-tree-id4029 . -22) (undo-tree-id4030 . -22) (undo-tree-id4031 . -22) (undo-tree-id4032 . -22) (undo-tree-id4033 . -22) (undo-tree-id4034 . -22) (undo-tree-id4035 . -22) (undo-tree-id4036 . -22) (undo-tree-id4037 . -22) (undo-tree-id4038 . -22) (undo-tree-id4039 . -22) (undo-tree-id4040 . -22) (undo-tree-id4041 . -22) (undo-tree-id4042 . -22) (undo-tree-id4043 . -22) (undo-tree-id4044 . -22) (undo-tree-id4045 . -22) (undo-tree-id4046 . -22) (undo-tree-id4047 . -22) (t 25731 63590 85441 540000)) ((3930 . 3953)) (25731 63635 274362 914000) 0 nil] [nil nil ((#(")" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . 3952) (undo-tree-id3967 . 1) (undo-tree-id3968 . -1) (t 25731 63590 85441 540000)) ((3952 . 3953)) (25731 63618 137978 81000) 0 nil] [nil nil ((#("      (list 'already x 'is 'even)))" 0 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 7 32 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 32 33 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t) 33 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t) 34 35 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t)) . 3918) (t 25731 63590 85441 540000)) ((3918 . 3953)) (25731 63592 989017 892000) 0 nil])
([nil nil ((#("(+ 1 x)" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block))) . 3910) (undo-tree-id4328 . -6) (undo-tree-id4329 . -6) (undo-tree-id4330 . -6) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -3) (undo-tree-id4339 . -3) (undo-tree-id4340 . -3) (undo-tree-id4341 . -3) (undo-tree-id4342 . -3) (undo-tree-id4343 . -3) (undo-tree-id4344 . -3) (undo-tree-id4345 . -5) (undo-tree-id4346 . -5) (undo-tree-id4347 . -5) (undo-tree-id4348 . -5) (undo-tree-id4349 . -5) (undo-tree-id4350 . -5) (undo-tree-id4351 . -5) (undo-tree-id4352 . -5) (undo-tree-id4353 . -5) (undo-tree-id4354 . -5) (undo-tree-id4355 . -5) (undo-tree-id4356 . -5) (undo-tree-id4357 . -5) (undo-tree-id4358 . -5) (undo-tree-id4359 . -3) (undo-tree-id4360 . -3) (undo-tree-id4361 . -3) (undo-tree-id4362 . -3) (undo-tree-id4363 . -3) (undo-tree-id4364 . -3) (undo-tree-id4365 . -3) (undo-tree-id4366 . -7) (undo-tree-id4367 . -6) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -3) (undo-tree-id4376 . -3) (undo-tree-id4377 . -3) (undo-tree-id4378 . -3) (undo-tree-id4379 . -3) (undo-tree-id4380 . -3) (undo-tree-id4381 . -3) (undo-tree-id4382 . -5) (undo-tree-id4383 . -5) (undo-tree-id4384 . -5) (undo-tree-id4385 . -5) (undo-tree-id4386 . -5) (undo-tree-id4387 . -5) (undo-tree-id4388 . -5) (undo-tree-id4389 . -6) (undo-tree-id4390 . -6) (undo-tree-id4391 . -6) (undo-tree-id4392 . -6) (undo-tree-id4393 . -6) (undo-tree-id4394 . -6) (undo-tree-id4395 . 1) (undo-tree-id4396 . -7) (undo-tree-id4397 . 7) (undo-tree-id4398 . -1) (undo-tree-id4399 . -6) (undo-tree-id4400 . -6) 3916) nil (25731 63732 912610 733000) 0 nil] [nil nil ((#("(+ 1 x" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3910) (undo-tree-id4142 . -5) (undo-tree-id4143 . -5) (undo-tree-id4144 . -5) (undo-tree-id4145 . -6) (undo-tree-id4146 . -5) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -3) (undo-tree-id4155 . -3) (undo-tree-id4156 . -3) (undo-tree-id4157 . -3) (undo-tree-id4158 . -3) (undo-tree-id4159 . -3) (undo-tree-id4160 . -3) (undo-tree-id4161 . -5) (undo-tree-id4162 . -5) (undo-tree-id4163 . -5) (undo-tree-id4164 . -5) (undo-tree-id4165 . -5) (undo-tree-id4166 . -5) (undo-tree-id4167 . -5) (undo-tree-id4168 . -5) 3915) ((3910 . 3916)) (25731 63715 166153 154000) 0 nil] [nil nil ((#("oddp" 0 4 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3896) (undo-tree-id4048 . -3) (undo-tree-id4049 . -3) (undo-tree-id4050 . -3) (undo-tree-id4051 . -3) (undo-tree-id4052 . -3) (undo-tree-id4053 . -3) (undo-tree-id4054 . -3) (undo-tree-id4055 . -3) (undo-tree-id4056 . -3) (undo-tree-id4057 . -3) (undo-tree-id4058 . -4) (undo-tree-id4059 . -3) (undo-tree-id4060 . -3) (undo-tree-id4061 . -3) (undo-tree-id4062 . -3) (undo-tree-id4063 . -3) (undo-tree-id4064 . -3) (undo-tree-id4065 . -3) (undo-tree-id4066 . -3) (undo-tree-id4067 . -3) 3899) ((3896 . 3900)) (25731 63705 628344 477000) 0 nil])
nil
nil
nil
([nil nil ((3902 . 3904)) nil (25731 63732 912568 100000) 0 nil])
nil
nil
([nil nil ((nil rear-nonsticky nil 3910 . 3911) (nil fontified nil 3904 . 3911) (3904 . 3911) 3903) nil (25731 63732 912567 250000) 0 nil])
([nil nil ((#("      
" 0 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3913) (undo-tree-id4217 . -6) (undo-tree-id4218 . 1) (undo-tree-id4219 . -5) (undo-tree-id4220 . -6) (undo-tree-id4221 . -6) (undo-tree-id4222 . -6) (undo-tree-id4223 . -6) (undo-tree-id4224 . -6) (undo-tree-id4225 . -6) (undo-tree-id4226 . -6) (undo-tree-id4227 . -6) (undo-tree-id4228 . -6) (undo-tree-id4229 . -6) (undo-tree-id4230 . -6) (undo-tree-id4231 . -6) (undo-tree-id4232 . -6) (undo-tree-id4233 . -6) (undo-tree-id4234 . -6) (undo-tree-id4235 . -6) (undo-tree-id4236 . -6) (undo-tree-id4237 . -6) (undo-tree-id4238 . -6) (undo-tree-id4239 . -6) (undo-tree-id4240 . -6) (undo-tree-id4241 . -6) (undo-tree-id4242 . -6) (undo-tree-id4243 . -6) (undo-tree-id4244 . -6) (undo-tree-id4245 . -6) (undo-tree-id4246 . -6) (undo-tree-id4247 . -6) (undo-tree-id4248 . -6) (undo-tree-id4249 . -6) (undo-tree-id4250 . -6) (undo-tree-id4251 . -6) (undo-tree-id4252 . -6) (undo-tree-id4253 . -6) (undo-tree-id4254 . -6) (undo-tree-id4255 . -6) (undo-tree-id4256 . -6) (undo-tree-id4257 . -6) (undo-tree-id4258 . -6) (undo-tree-id4259 . -6) (undo-tree-id4260 . -6) (undo-tree-id4261 . -6) (undo-tree-id4262 . -6) (undo-tree-id4263 . -6) (undo-tree-id4264 . -6) (undo-tree-id4265 . -6) (undo-tree-id4266 . -6) (undo-tree-id4267 . -6) (undo-tree-id4268 . -6) (undo-tree-id4269 . -6) (undo-tree-id4270 . -6) (undo-tree-id4271 . -6) (undo-tree-id4272 . -6) (undo-tree-id4273 . -6) (undo-tree-id4274 . -6) (undo-tree-id4275 . -6) (undo-tree-id4276 . -6) (undo-tree-id4277 . -6) (undo-tree-id4278 . -6) (undo-tree-id4279 . -6) (undo-tree-id4280 . -6) (undo-tree-id4281 . -6) (undo-tree-id4282 . -6) (undo-tree-id4283 . -6) (undo-tree-id4284 . -6) (undo-tree-id4285 . -6) (undo-tree-id4286 . -6) (undo-tree-id4287 . -6) (undo-tree-id4288 . -6) (undo-tree-id4289 . -6) (undo-tree-id4290 . -6) (undo-tree-id4291 . -6) (undo-tree-id4292 . -6) (undo-tree-id4293 . -6) (undo-tree-id4294 . -6) (undo-tree-id4295 . -6) (undo-tree-id4296 . -6) (undo-tree-id4297 . -6) (undo-tree-id4298 . -6) (undo-tree-id4299 . -5) (undo-tree-id4300 . -5) (undo-tree-id4301 . -5) (undo-tree-id4302 . -5) (undo-tree-id4303 . -5) (undo-tree-id4304 . -5) (undo-tree-id4305 . -5) (undo-tree-id4306 . -5) (undo-tree-id4307 . -5) (undo-tree-id4308 . -5) (undo-tree-id4309 . -5) (undo-tree-id4310 . -5) (undo-tree-id4311 . -5) (undo-tree-id4312 . -6) (undo-tree-id4313 . -5) (undo-tree-id4314 . -5) (undo-tree-id4315 . -5) (undo-tree-id4316 . -5) (undo-tree-id4317 . -5) (undo-tree-id4318 . -5) (undo-tree-id4319 . -5) (undo-tree-id4320 . -5) (undo-tree-id4321 . -5) (undo-tree-id4322 . -5) (undo-tree-id4323 . -5) (undo-tree-id4324 . -5) (undo-tree-id4325 . -5) (undo-tree-id4326 . -5) (undo-tree-id4327 . -5) 3918) nil (25731 63732 912562 122000) 0 nil])
([nil nil ((3868 . 3870) (3889 . 3890) (3891 . 3892) (3903 . 3917) (3912 . 3914) (3949 . 3951) 3866 (#("  " 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3902) (undo-tree-id4169 . -2) (undo-tree-id4170 . -2) (undo-tree-id4171 . -2) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -2) (undo-tree-id4180 . -2) (undo-tree-id4181 . -2) (undo-tree-id4182 . -2) (undo-tree-id4183 . -2) (undo-tree-id4184 . -2) (undo-tree-id4185 . -2) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -2) (undo-tree-id4202 . -2) (undo-tree-id4203 . -2) (undo-tree-id4204 . -2) (undo-tree-id4205 . -2) (undo-tree-id4206 . -2) (undo-tree-id4207 . -2) (undo-tree-id4208 . -2) (undo-tree-id4209 . -2) (undo-tree-id4210 . -2) (undo-tree-id4211 . -2) (undo-tree-id4212 . -2) (undo-tree-id4213 . -2) (undo-tree-id4214 . -2) (undo-tree-id4215 . -2) (undo-tree-id4216 . -2) (3904 . 3905)) nil (25731 63732 912289 228000) 0 nil])
([nil nil ((3910 . 3916) 3866 (3907 . 3910) (3906 . 3907) (t 25731 63732 971902 928000)) nil (25731 63797 737925 794000) 0 nil])
([nil nil ((#("        
" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 8 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 8 9 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3908) (undo-tree-id4791 . 1) (undo-tree-id4792 . -7) (undo-tree-id4793 . -9) (undo-tree-id4794 . -2) (undo-tree-id4795 . -8) (undo-tree-id4796 . -8) (undo-tree-id4797 . -8) (undo-tree-id4798 . -8) (undo-tree-id4799 . -8) (undo-tree-id4800 . -8) (undo-tree-id4801 . -8) (undo-tree-id4802 . -8) (undo-tree-id4803 . -7) (undo-tree-id4804 . -7) (undo-tree-id4805 . -7) (undo-tree-id4806 . -7) (undo-tree-id4807 . -7) (undo-tree-id4808 . -7) (undo-tree-id4809 . -7) (undo-tree-id4810 . -7) (undo-tree-id4811 . -7) (undo-tree-id4812 . -7) (undo-tree-id4813 . -7) (undo-tree-id4814 . -7) (undo-tree-id4815 . -7) (undo-tree-id4816 . -7) (undo-tree-id4817 . -7) (undo-tree-id4818 . -7) (undo-tree-id4819 . -7) (undo-tree-id4820 . -7) (undo-tree-id4821 . -7) (undo-tree-id4822 . -7) (undo-tree-id4823 . -7) (undo-tree-id4824 . -7) (undo-tree-id4825 . -7) 3915) nil (25731 63797 737923 446000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3915) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3916) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3917) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                 " 0 6 (face org-indent) 6 17 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3918) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3919) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                   " 0 6 (face org-indent) 6 19 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3920) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3921) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) 3922) nil (25731 63797 737891 697000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("             " 0 6 (face org-indent) 6 13 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3914) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1)) nil (25731 63797 737097 939000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 3921) (undo-tree-id4442 . -1) (undo-tree-id4443 . 1) (undo-tree-id4444 . -1)) nil (25731 63797 737056 445000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("             " 0 6 (face org-indent) 6 13 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3928) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -3929) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) 3930) nil (25731 63797 737049 607000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3868) 3866 (t 25731 63797 751604 800000)) nil (25731 63870 422435 649000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3867 . 3868) (3866 . 3983) 3956 (#("  (defun make-even (x)
    (if (oddp x)
      (+ 1 x)
      (list 'already x 'is 'even)))
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 3 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 3 8 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 8 9 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 9 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 19 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 20 21 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 21 22 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 22 23 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 23 24 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 24 26 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 26 27 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 27 28 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 28 30 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 30 31 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 31 32 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 32 36 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 36 38 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 38 39 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 39 40 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 40 46 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 46 47 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 47 52 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 52 53 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 53 54 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 54 56 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 56 60 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 60 61 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 61 66 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 66 86 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 86 87 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 87 88 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 88 89 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 89 90 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 3866) (undo-tree-id4935 . -90) (undo-tree-id4936 . -2) (undo-tree-id4937 . -2) (undo-tree-id4938 . 30) (undo-tree-id4939 . -2) (undo-tree-id4940 . -56) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) (undo-tree-id4943 . -54) (undo-tree-id4944 . -46) (undo-tree-id4945 . -40) (undo-tree-id4946 . -40) (undo-tree-id4947 . -40) (undo-tree-id4948 . -40) (undo-tree-id4949 . -40) (undo-tree-id4950 . -40) (undo-tree-id4951 . -40) (undo-tree-id4952 . -40) (undo-tree-id4953 . -40) (undo-tree-id4954 . -40) (undo-tree-id4955 . -40) (undo-tree-id4956 . -40) (undo-tree-id4957 . -40) (undo-tree-id4958 . -40) (undo-tree-id4959 . -40) (undo-tree-id4960 . -40) (undo-tree-id4961 . -40) (undo-tree-id4962 . -40) (undo-tree-id4963 . -40) (undo-tree-id4964 . -40) (undo-tree-id4965 . -40) (undo-tree-id4966 . -40) (undo-tree-id4967 . -40) (undo-tree-id4968 . -40) (undo-tree-id4969 . -40) (undo-tree-id4970 . -40) (undo-tree-id4971 . -40) (undo-tree-id4972 . -40) (undo-tree-id4973 . -40) (undo-tree-id4974 . -40) (undo-tree-id4975 . -40) (undo-tree-id4976 . -40) (undo-tree-id4977 . -53) (undo-tree-id4978 . -46) (undo-tree-id4979 . -46) (undo-tree-id4980 . -46) (undo-tree-id4981 . -46) (undo-tree-id4982 . -46) (undo-tree-id4983 . -46) (undo-tree-id4984 . -46) (undo-tree-id4985 . -46) (undo-tree-id4986 . -46) (undo-tree-id4987 . -46) (undo-tree-id4988 . -46) (undo-tree-id4989 . -46) (undo-tree-id4990 . -46) (undo-tree-id4991 . -46) (undo-tree-id4992 . -46) (undo-tree-id4993 . -46) (undo-tree-id4994 . -46) (undo-tree-id4995 . -46) (undo-tree-id4996 . -46) (undo-tree-id4997 . -46) (undo-tree-id4998 . -46) (undo-tree-id4999 . -46) (undo-tree-id5000 . -46) (undo-tree-id5001 . -46) (undo-tree-id5002 . -46) (undo-tree-id5003 . -46) (undo-tree-id5004 . -46) (undo-tree-id5005 . -46) (undo-tree-id5006 . -46) (undo-tree-id5007 . -46) (undo-tree-id5008 . -46) (undo-tree-id5009 . -46) (undo-tree-id5010 . -46) (undo-tree-id5011 . -46) (undo-tree-id5012 . -46) (undo-tree-id5013 . -46) (undo-tree-id5014 . -46) (undo-tree-id5015 . -46) (undo-tree-id5016 . -46) (undo-tree-id5017 . -46) (undo-tree-id5018 . -46) (undo-tree-id5019 . -46) (undo-tree-id5020 . -46) (undo-tree-id5021 . -46) (undo-tree-id5022 . -46) (undo-tree-id5023 . -46) (undo-tree-id5024 . -46) (undo-tree-id5025 . -46) (undo-tree-id5026 . -46) (undo-tree-id5027 . -46) (undo-tree-id5028 . -46) (undo-tree-id5029 . -46) (undo-tree-id5030 . -46) (undo-tree-id5031 . -46) (undo-tree-id5032 . -46) (undo-tree-id5033 . -46) (undo-tree-id5034 . -46) (undo-tree-id5035 . -46) (undo-tree-id5036 . -46) (undo-tree-id5037 . -46) (undo-tree-id5038 . -46) (undo-tree-id5039 . -46) (undo-tree-id5040 . -46) (undo-tree-id5041 . -46) (undo-tree-id5042 . -46) (undo-tree-id5043 . -46) (undo-tree-id5044 . -46) (undo-tree-id5045 . -46) (undo-tree-id5046 . -46) (undo-tree-id5047 . -46) (undo-tree-id5048 . -46) (undo-tree-id5049 . -46) (undo-tree-id5050 . -60) (undo-tree-id5051 . -60) (undo-tree-id5052 . -60) (undo-tree-id5053 . -60) (undo-tree-id5054 . -60) (undo-tree-id5055 . -60) (undo-tree-id5056 . -60) (undo-tree-id5057 . -60) (undo-tree-id5058 . -60) (undo-tree-id5059 . -60) (undo-tree-id5060 . -60) (undo-tree-id5061 . -60) (undo-tree-id5062 . -60) (undo-tree-id5063 . -60) (undo-tree-id5064 . -60) (undo-tree-id5065 . -60) (undo-tree-id5066 . -60) (undo-tree-id5067 . -60) (undo-tree-id5068 . -60) (undo-tree-id5069 . -60) (undo-tree-id5070 . -60) (undo-tree-id5071 . -60) (undo-tree-id5072 . -59) (undo-tree-id5073 . -59) (undo-tree-id5074 . -59) (undo-tree-id5075 . -59) (undo-tree-id5076 . -59) (undo-tree-id5077 . -59) (undo-tree-id5078 . -59) (undo-tree-id5079 . -59) (undo-tree-id5080 . -59) (undo-tree-id5081 . -59) (undo-tree-id5082 . -59) (undo-tree-id5083 . -59) (undo-tree-id5084 . -59) (undo-tree-id5085 . -59) (undo-tree-id5086 . -59) (undo-tree-id5087 . -59) (undo-tree-id5088 . -59) (undo-tree-id5089 . -59) (undo-tree-id5090 . -59) (undo-tree-id5091 . -59) (undo-tree-id5092 . -59) (undo-tree-id5093 . -60) (undo-tree-id5094 . -60) (undo-tree-id5095 . -60) (undo-tree-id5096 . -60) (undo-tree-id5097 . -60) (undo-tree-id5098 . -60) (undo-tree-id5099 . -60) (undo-tree-id5100 . -64) (undo-tree-id5101 . -64) (undo-tree-id5102 . -64) (undo-tree-id5103 . -64) (undo-tree-id5104 . -64) (undo-tree-id5105 . -64) (undo-tree-id5106 . -64) (undo-tree-id5107 . -73) (undo-tree-id5108 . -73) (undo-tree-id5109 . -73) (undo-tree-id5110 . -73) (undo-tree-id5111 . -73) (undo-tree-id5112 . -73) (undo-tree-id5113 . -73) (undo-tree-id5114 . -75) (undo-tree-id5115 . -75) (undo-tree-id5116 . -75) (undo-tree-id5117 . -75) (undo-tree-id5118 . -75) (undo-tree-id5119 . -75) (undo-tree-id5120 . -75) (undo-tree-id5121 . -79) (undo-tree-id5122 . -79) (undo-tree-id5123 . -79) (undo-tree-id5124 . -79) (undo-tree-id5125 . -79) (undo-tree-id5126 . -79) (undo-tree-id5127 . -79) (undo-tree-id5128 . -85) (undo-tree-id5129 . -85) (undo-tree-id5130 . -85) (undo-tree-id5131 . -85) (undo-tree-id5132 . -85) (undo-tree-id5133 . -85) (undo-tree-id5134 . -85) (undo-tree-id5135 . -88) (undo-tree-id5136 . -88) (undo-tree-id5137 . -88) (undo-tree-id5138 . -88) (undo-tree-id5139 . -88) (undo-tree-id5140 . -88) (undo-tree-id5141 . -88) (undo-tree-id5142 . -90) (undo-tree-id5143 . -90) (undo-tree-id5144 . -90) (undo-tree-id5145 . -90) (undo-tree-id5146 . -90) (undo-tree-id5147 . -90) (undo-tree-id5148 . -90) (undo-tree-id5149 . -90) (undo-tree-id5150 . -90) (undo-tree-id5151 . -90) (undo-tree-id5152 . -90) (undo-tree-id5153 . -90) (undo-tree-id5154 . -90) (undo-tree-id5155 . -90) (undo-tree-id5156 . -67) (undo-tree-id5157 . -67) (undo-tree-id5158 . -67) (undo-tree-id5159 . -67) (undo-tree-id5160 . -67) (undo-tree-id5161 . -67) (undo-tree-id5162 . -67) (undo-tree-id5163 . -88) (undo-tree-id5164 . -88) (undo-tree-id5165 . -88) (undo-tree-id5166 . -88) (undo-tree-id5167 . -88) (undo-tree-id5168 . -88) (undo-tree-id5169 . -88) (undo-tree-id5170 . -87) (undo-tree-id5171 . -87) (undo-tree-id5172 . -87) (undo-tree-id5173 . -87) (undo-tree-id5174 . -87) (undo-tree-id5175 . -87) (undo-tree-id5176 . -87) (undo-tree-id5177 . -88) (undo-tree-id5178 . -88) (undo-tree-id5179 . -88) (undo-tree-id5180 . -88) (undo-tree-id5181 . -88) (undo-tree-id5182 . -88) (undo-tree-id5183 . -88) (undo-tree-id5184 . -88) (undo-tree-id5185 . -88) (undo-tree-id5186 . -88) (undo-tree-id5187 . -88) (undo-tree-id5188 . -88) (undo-tree-id5189 . -88) (undo-tree-id5190 . -88) (undo-tree-id5191 . -88) (undo-tree-id5192 . -88) (undo-tree-id5193 . -88) (undo-tree-id5194 . -88) (undo-tree-id5195 . -88) (undo-tree-id5196 . -88) (undo-tree-id5197 . -88) (undo-tree-id5198 . -90) (undo-tree-id5199 . -90) (undo-tree-id5200 . -90) (undo-tree-id5201 . -90) (undo-tree-id5202 . -90) (undo-tree-id5203 . -90) (undo-tree-id5204 . -90) (undo-tree-id5205 . -90) (undo-tree-id5206 . -90) (undo-tree-id5207 . -90) (undo-tree-id5208 . -90) (undo-tree-id5209 . -90) (undo-tree-id5210 . -90) (undo-tree-id5211 . -90) (undo-tree-id5212 . -68) (undo-tree-id5213 . -68) (undo-tree-id5214 . -68) (undo-tree-id5215 . -68) (undo-tree-id5216 . -68) (undo-tree-id5217 . -68) (undo-tree-id5218 . -68) (undo-tree-id5219 . -52) (undo-tree-id5220 . -52) (undo-tree-id5221 . -52) (undo-tree-id5222 . -52) (undo-tree-id5223 . -52) (undo-tree-id5224 . -52) (undo-tree-id5225 . -52) (undo-tree-id5226 . -37) (undo-tree-id5227 . -37) (undo-tree-id5228 . -37) (undo-tree-id5229 . -37) (undo-tree-id5230 . -37) (undo-tree-id5231 . -37) (undo-tree-id5232 . -37) (undo-tree-id5233 . -12) (undo-tree-id5234 . -13) (undo-tree-id5235 . -13) (undo-tree-id5236 . -13) (undo-tree-id5237 . -13) (undo-tree-id5238 . -13) (undo-tree-id5239 . -13) (undo-tree-id5240 . -13) (undo-tree-id5241 . -14) (undo-tree-id5242 . -14) (undo-tree-id5243 . -14) (undo-tree-id5244 . -14) (undo-tree-id5245 . -14) (undo-tree-id5246 . -14) (undo-tree-id5247 . -14) (undo-tree-id5248 . -19) (undo-tree-id5249 . -19) (undo-tree-id5250 . -19) (undo-tree-id5251 . -19) (undo-tree-id5252 . -19) (undo-tree-id5253 . -19) (undo-tree-id5254 . -19) (undo-tree-id5255 . -19) (undo-tree-id5256 . -19) (undo-tree-id5257 . -19) (undo-tree-id5258 . -19) (undo-tree-id5259 . -19) (undo-tree-id5260 . -19) (undo-tree-id5261 . -19) (undo-tree-id5262 . -19) (undo-tree-id5263 . -19) (undo-tree-id5264 . -19) (undo-tree-id5265 . -19) (undo-tree-id5266 . -19) (undo-tree-id5267 . -19) (undo-tree-id5268 . -19) (undo-tree-id5269 . -19) (undo-tree-id5270 . -21) (undo-tree-id5271 . -56) (undo-tree-id5272 . -19) (undo-tree-id5273 . -19) (undo-tree-id5274 . -19) (undo-tree-id5275 . -19) (undo-tree-id5276 . -19) (undo-tree-id5277 . -19) (undo-tree-id5278 . -19) (undo-tree-id5279 . -19) (undo-tree-id5280 . -19) (undo-tree-id5281 . -20) (undo-tree-id5282 . -20) (undo-tree-id5283 . -20) (undo-tree-id5284 . -20) (undo-tree-id5285 . -20) (undo-tree-id5286 . -20) (undo-tree-id5287 . -20) (undo-tree-id5288 . -21) (undo-tree-id5289 . -21) (undo-tree-id5290 . -21) (undo-tree-id5291 . -21) (undo-tree-id5292 . -21) (undo-tree-id5293 . -21) (undo-tree-id5294 . -21) (undo-tree-id5295 . -21) (undo-tree-id5296 . -21) (undo-tree-id5297 . -21) (undo-tree-id5298 . -21) (undo-tree-id5299 . -21) (undo-tree-id5300 . -21) (undo-tree-id5301 . -21) (undo-tree-id5302 . -21) (undo-tree-id5303 . -21) (undo-tree-id5304 . -21) (undo-tree-id5305 . -21) (undo-tree-id5306 . -21) (undo-tree-id5307 . -21) (undo-tree-id5308 . -21) (undo-tree-id5309 . -21) (undo-tree-id5310 . -21) (undo-tree-id5311 . -21) (undo-tree-id5312 . -21) (undo-tree-id5313 . -21) (undo-tree-id5314 . -21) (undo-tree-id5315 . -21) (undo-tree-id5316 . -21) (undo-tree-id5317 . -21) (undo-tree-id5318 . -21) (undo-tree-id5319 . -21) (undo-tree-id5320 . -21) (undo-tree-id5321 . -21) (undo-tree-id5322 . -21) (undo-tree-id5323 . -21) (undo-tree-id5324 . -21) (undo-tree-id5325 . -21) (undo-tree-id5326 . -21) (undo-tree-id5327 . -21) (undo-tree-id5328 . -21) (undo-tree-id5329 . -21) (undo-tree-id5330 . -21) (undo-tree-id5331 . -21) (undo-tree-id5332 . -21) (undo-tree-id5333 . -21) (undo-tree-id5334 . -21) (undo-tree-id5335 . -21) (undo-tree-id5336 . -21) (undo-tree-id5337 . -21) (undo-tree-id5338 . -21) (undo-tree-id5339 . -21) (undo-tree-id5340 . -21) (undo-tree-id5341 . -21) (undo-tree-id5342 . -21) (undo-tree-id5343 . -21) (undo-tree-id5344 . -21) (undo-tree-id5345 . -21) (undo-tree-id5346 . -21) (undo-tree-id5347 . -21) (undo-tree-id5348 . -21) (undo-tree-id5349 . -21) (undo-tree-id5350 . -21) (undo-tree-id5351 . -21) (undo-tree-id5352 . -21) (undo-tree-id5353 . -21) (undo-tree-id5354 . -21) (undo-tree-id5355 . -21) (undo-tree-id5356 . -21) (undo-tree-id5357 . -21) (undo-tree-id5358 . -21) (undo-tree-id5359 . -21) (undo-tree-id5360 . -21) (undo-tree-id5361 . -21) (undo-tree-id5362 . -21) (undo-tree-id5363 . -21) (undo-tree-id5364 . -21) (undo-tree-id5365 . -21) (undo-tree-id5366 . -21) (undo-tree-id5367 . -21) (undo-tree-id5368 . -21) (undo-tree-id5369 . -21) (undo-tree-id5370 . -21) (undo-tree-id5371 . -21) (undo-tree-id5372 . -21) (undo-tree-id5373 . -21) (undo-tree-id5374 . -21) (undo-tree-id5375 . -21) (undo-tree-id5376 . -21) (undo-tree-id5377 . -21) (undo-tree-id5378 . -21) (undo-tree-id5379 . -21) (undo-tree-id5380 . -21) (undo-tree-id5381 . -21) (undo-tree-id5382 . -21) (undo-tree-id5383 . -21) (undo-tree-id5384 . -21) (undo-tree-id5385 . -21) (undo-tree-id5386 . -21) (undo-tree-id5387 . -2) (undo-tree-id5388 . -90) (undo-tree-id5389 . -2) (undo-tree-id5390 . -56) (undo-tree-id5391 . -2) (undo-tree-id5392 . -2) (undo-tree-id5393 . -2) (undo-tree-id5394 . -2) (undo-tree-id5395 . -2) (undo-tree-id5396 . -2) (undo-tree-id5397 . -2) (undo-tree-id5398 . -2) (undo-tree-id5399 . -2) (undo-tree-id5400 . -2) (undo-tree-id5401 . -2) (undo-tree-id5402 . -2) (undo-tree-id5403 . -2) (undo-tree-id5404 . -25) (undo-tree-id5405 . -42) (undo-tree-id5406 . -90) (undo-tree-id5407 . -90) 3956) nil (25731 63870 422419 510000) 0 nil])
([nil nil ((3875 . 3884) (#("symbol-test" 0 11 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil)) . 3875) (undo-tree-id4908 . -10) (undo-tree-id4909 . -10) (undo-tree-id4910 . -10) (undo-tree-id4911 . -11) (undo-tree-id4912 . -10) (undo-tree-id4913 . -5) (undo-tree-id4914 . -5) (undo-tree-id4915 . -5) (undo-tree-id4916 . -5) (undo-tree-id4917 . -5) (undo-tree-id4918 . -5) (undo-tree-id4919 . -5) (undo-tree-id4920 . -6) (undo-tree-id4921 . -6) (undo-tree-id4922 . -6) (undo-tree-id4923 . -6) (undo-tree-id4924 . -6) (undo-tree-id4925 . -6) (undo-tree-id4926 . -6) (undo-tree-id4927 . -10) (undo-tree-id4928 . -10) (undo-tree-id4929 . -10) (undo-tree-id4930 . -10) (undo-tree-id4931 . -10) (undo-tree-id4932 . -10) (undo-tree-id4933 . -10) (undo-tree-id4934 . -10) 3885) nil (25731 63870 421178 511000) 0 nil])
([nil nil ((3898 . 3902) (#("symbolp" 0 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3898) (undo-tree-id4895 . -6) (undo-tree-id4896 . -6) (undo-tree-id4897 . -6) (undo-tree-id4898 . -7) (undo-tree-id4899 . -6) (undo-tree-id4900 . -6) (undo-tree-id4901 . -6) (undo-tree-id4902 . -6) (undo-tree-id4903 . -6) (undo-tree-id4904 . -6) (undo-tree-id4905 . -6) (undo-tree-id4906 . -6) (undo-tree-id4907 . -6) 3904) nil (25731 63870 422851 960000) 0 nil])
([nil nil ((#("    " 0 2 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 2 4 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3889) (undo-tree-id5408 . -4) (undo-tree-id5409 . -4) (undo-tree-id5410 . -4) (undo-tree-id5411 . -4) (undo-tree-id5412 . -4) (undo-tree-id5413 . -4) (undo-tree-id5414 . -4) (#("list 'yes x 'is 'a 'symbol" 0 5 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 5 6 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 6 12 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 12 13 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 13 16 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 16 17 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 17 19 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 19 20 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 20 26 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 3907) (undo-tree-id5415 . -25) (undo-tree-id5416 . -25) (undo-tree-id5417 . -25) (undo-tree-id5418 . -3) (undo-tree-id5419 . -3) (undo-tree-id5420 . -3) (undo-tree-id5421 . -3) (undo-tree-id5422 . -3) (undo-tree-id5423 . -3) (undo-tree-id5424 . -3) (undo-tree-id5425 . -8) (undo-tree-id5426 . -8) (undo-tree-id5427 . -8) (undo-tree-id5428 . -8) (undo-tree-id5429 . -8) (undo-tree-id5430 . -8) (undo-tree-id5431 . -8) (undo-tree-id5432 . -10) (undo-tree-id5433 . -10) (undo-tree-id5434 . -10) (undo-tree-id5435 . -10) (undo-tree-id5436 . -10) (undo-tree-id5437 . -10) (undo-tree-id5438 . -10) (undo-tree-id5439 . -14) (undo-tree-id5440 . -14) (undo-tree-id5441 . -14) (undo-tree-id5442 . -14) (undo-tree-id5443 . -14) (undo-tree-id5444 . -14) (undo-tree-id5445 . -14) (undo-tree-id5446 . -17) (undo-tree-id5447 . -17) (undo-tree-id5448 . -17) (undo-tree-id5449 . -17) (undo-tree-id5450 . -17) (undo-tree-id5451 . -17) (undo-tree-id5452 . -17) (undo-tree-id5453 . -25) (undo-tree-id5454 . -25) (undo-tree-id5455 . -25) (undo-tree-id5456 . -25) (undo-tree-id5457 . -25) (undo-tree-id5458 . -25) (undo-tree-id5459 . -25) (undo-tree-id5460 . -26) (undo-tree-id5461 . -26) (undo-tree-id5462 . -26) (undo-tree-id5463 . -26) (undo-tree-id5464 . -26) (undo-tree-id5465 . -26) (undo-tree-id5466 . -26) (undo-tree-id5467 . -25) (undo-tree-id5468 . -25) (undo-tree-id5469 . -25) (undo-tree-id5470 . -25) (undo-tree-id5471 . -25) (undo-tree-id5472 . -25) (undo-tree-id5473 . -25) (undo-tree-id5474 . -25) (undo-tree-id5475 . -25) (undo-tree-id5476 . -25) (undo-tree-id5477 . -25) (undo-tree-id5478 . -25) (undo-tree-id5479 . -25) (undo-tree-id5480 . -25) (undo-tree-id5481 . -25)) ((3907 . 3933) (3889 . 3893)) (25731 63871 208015 470000) 0 nil])
([nil nil ((3907 . 3908) (3903 . 3907)) nil (25731 63891 604719 916000) 0 nil])
([nil nil ((3868 . 3870) (3889 . 3895) (3910 . 3911) (3918 . 3919) (3954 . 3956) 3866) nil (25731 63891 604718 217000) 0 nil])
([nil nil ((#("'" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -3938) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) 3939 (3938 . 3939)) nil (25731 63891 604712 888000) 0 nil])
([nil nil ((4341 . 4343) (4340 . 4341) (t 25731 63891 661393 463000) 4340) nil (25731 63981 158161 826000) 0 nil])
([nil nil ((3992 . 3994) (3992 . 3993) 3995) nil (25731 63998 762758 154000) 0 nil] [nil nil ((nil rear-nonsticky nil 4530 . 4531) (nil fontified nil 4478 . 4531) (nil fontified nil 4406 . 4478) (nil fontified nil 4342 . 4406) (4342 . 4531)) ((#("Write a function FURTHER that makes a positive number larger by
adding one to it, and a negative number smaller by subtracting one from
it. What does your function do if given the number 0?" 0 64 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil) 64 136 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil) 136 188 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil) 188 189 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil rear-nonsticky nil)) . 4342) (undo-tree-id5491 . 189) (undo-tree-id5492 . -188) (nil fontified t 4342 . 4406) (nil fontified t 4406 . 4478) (nil rear-nonsticky t 4530 . 4531)) (25731 63981 157584 271000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4180 . 4181) (nil fontified nil 4128 . 4181) (nil fontified nil 4056 . 4128) (nil fontified nil 3992 . 4056) (3992 . 4181)) nil (25731 63998 762963 703000) 0 nil])
nil
([nil nil ((4055 . 4056) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4055) 4044) nil (25731 64292 460784 929000) 0 nil] [nil nil ((#("r" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 4044)) ((4044 . 4045)) (25731 63998 762750 63000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4062) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (4063 . 4064)) nil (25731 64292 460783 217000) 0 nil])
nil
([nil nil ((4127 . 4128) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4127) 4063) nil (25731 64292 460767 796000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4136) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (4137 . 4138)) nil (25731 64292 460766 313000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4183 . 4184) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -4346) (4183 . 4347)) nil (25731 64292 460754 685000) 0 nil])
([nil nil ((4346 . 4347) 4337) nil (25731 64292 460753 777000) 0 nil])
([nil nil ((4232 . 4239) (#("make-even" 0 9 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-function-name-face org-block))) . 4232) (undo-tree-id6295 . -8) (undo-tree-id6296 . -8) (undo-tree-id6297 . -8) (undo-tree-id6298 . -4) (undo-tree-id6299 . -4) (undo-tree-id6300 . -4) (undo-tree-id6301 . -4) (undo-tree-id6302 . -4) (undo-tree-id6303 . -4) (undo-tree-id6304 . -4) (undo-tree-id6305 . -9) (undo-tree-id6306 . -8) (undo-tree-id6307 . -3) (undo-tree-id6308 . -3) (undo-tree-id6309 . -3) (undo-tree-id6310 . -3) (undo-tree-id6311 . -3) (undo-tree-id6312 . -3) (undo-tree-id6313 . -3) (undo-tree-id6314 . -4) (undo-tree-id6315 . -4) (undo-tree-id6316 . -4) (undo-tree-id6317 . -4) (undo-tree-id6318 . -4) (undo-tree-id6319 . -4) (undo-tree-id6320 . -4) (undo-tree-id6321 . -8) (undo-tree-id6322 . -8) (undo-tree-id6323 . -8) (undo-tree-id6324 . -8) (undo-tree-id6325 . -8) (undo-tree-id6326 . -8) (undo-tree-id6327 . -8) (undo-tree-id6328 . -8) 4240) nil (25731 64292 460751 865000) 0 nil])
([nil nil ((4251 . 4256) (#("if (oddp x) (+ x 1)
          (list 'no x 'is 'not 'a 'symbol)" 0 2 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 2 3 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 3 4 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 4 8 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 8 10 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 10 11 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 11 12 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 12 13 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 13 18 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 18 19 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 19 20 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 20 21 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 21 23 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 23 29 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 29 30 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 30 31 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 31 36 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 36 37 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 37 42 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 42 43 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 43 47 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 47 51 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 51 52 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 52 54 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 54 55 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 55 61 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 61 62 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block))) . 4251) (undo-tree-id6285 . 61) (undo-tree-id6286 . -20) (undo-tree-id6287 . -20) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1)) nil (25731 64292 460732 213000) 0 nil])
([nil nil ((4269 . 4272) (4265 . 4269) (#("make-even" 0 9 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4265) (undo-tree-id6258 . -8) (undo-tree-id6259 . -8) (undo-tree-id6260 . -8) (undo-tree-id6261 . -9) (undo-tree-id6262 . -8) (undo-tree-id6263 . -3) (undo-tree-id6264 . -3) (undo-tree-id6265 . -3) (undo-tree-id6266 . -3) (undo-tree-id6267 . -3) (undo-tree-id6268 . -3) (undo-tree-id6269 . -3) (undo-tree-id6270 . -4) (undo-tree-id6271 . -4) (undo-tree-id6272 . -4) (undo-tree-id6273 . -4) (undo-tree-id6274 . -4) (undo-tree-id6275 . -4) (undo-tree-id6276 . -4) (undo-tree-id6277 . -8) (undo-tree-id6278 . -8) (undo-tree-id6279 . -8) (undo-tree-id6280 . -8) (undo-tree-id6281 . -8) (undo-tree-id6282 . -8) (undo-tree-id6283 . -8) (undo-tree-id6284 . -8) 4273) nil (25731 64292 460724 336000) 0 nil])
([nil nil ((4288 . 4294) (4287 . 4288) (4287 . 4288) 4296) nil (25731 64292 460708 463000) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4259) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1)) nil (25731 64292 460707 379000) 0 nil])
([nil nil ((4288 . 4289) (4287 . 4288) 4287) nil (25731 64292 460705 696000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4517 . 4518) (nil fontified nil 4497 . 4518) (nil fontified nil 4425 . 4497) (nil fontified nil 4359 . 4425) (nil fontified nil 4288 . 4359) (4288 . 4518)) nil (25731 64292 460704 659000) 0 nil])
([nil nil ((4520 . 4521) 4520) nil (25731 64292 460703 407000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4520 . 4521) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -4621) (4520 . 4622)) nil (25731 64292 460702 520000) 0 nil])
([nil nil ((4569 . 4575) (#("further" 0 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil)) . 4569) (undo-tree-id6243 . -6) (undo-tree-id6244 . -6) (undo-tree-id6245 . -6) (undo-tree-id6246 . -7) (undo-tree-id6247 . -6) (undo-tree-id6248 . -6) (undo-tree-id6249 . -6) (undo-tree-id6250 . -6) (undo-tree-id6251 . -6) (undo-tree-id6252 . -6) (undo-tree-id6253 . -6) (undo-tree-id6254 . -6) (undo-tree-id6255 . -6) 4575) nil (25731 64292 460701 124000) 0 nil])
([nil nil ((4581 . 4586) (4577 . 4581) (#("x" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4577)) nil (25731 64292 460692 360000) 0 nil])
([nil nil ((4595 . 4598)) nil (25731 64292 460691 454000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4602) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) 4603 (4599 . 4603) (#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4599) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (#("=" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4600) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) 4601 (4598 . 4601) (#("t" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4598) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (#("r" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4599) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (#("u" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4600) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (#("e" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4601) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4602) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) 4603 (4600 . 4603) (#("e" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4600) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) 4601 (4598 . 4601) (#("+ x 1" 0 5 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4598) (undo-tree-id6215 . -4) (undo-tree-id6216 . 5) (undo-tree-id6217 . -4) (undo-tree-id6218 . -4) (undo-tree-id6219 . -2) (undo-tree-id6220 . -2) (undo-tree-id6221 . -2) (undo-tree-id6222 . -2) (undo-tree-id6223 . -2) (undo-tree-id6224 . -2) (undo-tree-id6225 . -2) (undo-tree-id6226 . -5) (undo-tree-id6227 . -4) (undo-tree-id6228 . -2) (undo-tree-id6229 . -2) (undo-tree-id6230 . -2) (undo-tree-id6231 . -2) (undo-tree-id6232 . -2) (undo-tree-id6233 . -2) (undo-tree-id6234 . -2) (undo-tree-id6235 . -4) (undo-tree-id6236 . -4) (undo-tree-id6237 . -4) (undo-tree-id6238 . -4) (undo-tree-id6239 . -4) (undo-tree-id6240 . -4) (undo-tree-id6241 . -4) (undo-tree-id6242 . -4) 4602) nil (25731 64292 460675 707000) 0 nil])
([nil nil ((4624 . 4626) (#("L" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4624) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) 4625 (4624 . 4625) (4623 . 4624) (#("M" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4623) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (#("I" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4624) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (#("L" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4625) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) 4626 (4623 . 4626) (#("h" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4623) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) 4624 (4623 . 4624) (#("M" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4623) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) 4624 (4618 . 4624) (4616 . 4618) (4562 . 4564) (4588 . 4590) (4604 . 4612) (4606 . 4608) 4558 (4603 . 4604)) nil (25731 64292 460212 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4635 . 4636) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)))) . -4647) (4627 . 4648) 4625) nil (25731 64292 461842 583000) 0 nil])
([nil nil ((4643 . 4644) (#("NIL" 0 3 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4643) (undo-tree-id6500 . -2) (undo-tree-id6501 . -2) (undo-tree-id6502 . -2) (undo-tree-id6503 . -3) (undo-tree-id6504 . -3) (undo-tree-id6505 . -3) (undo-tree-id6506 . -3) (undo-tree-id6507 . -3) (undo-tree-id6508 . -3) (undo-tree-id6509 . -3) (undo-tree-id6510 . -2) (undo-tree-id6511 . -2) (undo-tree-id6512 . -2) (undo-tree-id6513 . -2) (undo-tree-id6514 . -2) (undo-tree-id6515 . -2) (undo-tree-id6516 . -2) (undo-tree-id6517 . -2) (undo-tree-id6518 . -2) (undo-tree-id6519 . -2) (undo-tree-id6520 . -2) (undo-tree-id6521 . -2) (undo-tree-id6522 . -2) (undo-tree-id6523 . -2) (undo-tree-id6524 . -2) (undo-tree-id6525 . -2) (undo-tree-id6526 . -2) (undo-tree-id6527 . -2) (undo-tree-id6528 . -2) (undo-tree-id6529 . -2) (undo-tree-id6530 . -2) (undo-tree-id6531 . -3) (undo-tree-id6532 . -2) (undo-tree-id6533 . -2) (undo-tree-id6534 . -2) (undo-tree-id6535 . -2) (undo-tree-id6536 . -2) (undo-tree-id6537 . -2) (undo-tree-id6538 . -2) (undo-tree-id6539 . -2) (undo-tree-id6540 . -2) 4645) nil (25731 64318 669723 740000) 0 nil] [nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4659) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) 4660 (#("F" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4643) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) 4644 (4643 . 4644) (#("F" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4643) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (#("A" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4644) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (#("L" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4645) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (#("E" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . -4646) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) 4647 (4643 . 4647) (4642 . 4643) (#("'NIL" 0 4 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-multiline t face (org-block) help-echo nil)) . 4642) (undo-tree-id5626 . -3) (undo-tree-id5627 . -4) (undo-tree-id5628 . -4) (undo-tree-id5629 . -4) (undo-tree-id5630 . -4) (undo-tree-id5631 . -4) (undo-tree-id5632 . -4) (undo-tree-id5633 . -4) (undo-tree-id5634 . -3) (undo-tree-id5635 . -3) (undo-tree-id5636 . -3) (undo-tree-id5637 . -3) (undo-tree-id5638 . -3) (undo-tree-id5639 . -3) (undo-tree-id5640 . -3) (undo-tree-id5641 . -3) (undo-tree-id5642 . -3) (undo-tree-id5643 . -3) (undo-tree-id5644 . -3) (undo-tree-id5645 . -3) (undo-tree-id5646 . -3) (undo-tree-id5647 . -3) (undo-tree-id5648 . -3) 4645) ((4642 . 4646) (#("'" 0 1 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4642) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (#("FALE" 0 1 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 1 2 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 2 3 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 3 4 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4643) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -2) (undo-tree-id6437 . -2) (undo-tree-id6438 . -2) (undo-tree-id6439 . -2) (undo-tree-id6440 . -2) (undo-tree-id6441 . -2) (undo-tree-id6442 . -2) (undo-tree-id6443 . -3) (undo-tree-id6444 . -3) (undo-tree-id6445 . -3) (undo-tree-id6446 . -3) (undo-tree-id6447 . -3) (undo-tree-id6448 . -3) (undo-tree-id6449 . -3) (undo-tree-id6450 . -4) (undo-tree-id6451 . -4) (undo-tree-id6452 . -4) (undo-tree-id6453 . -4) (undo-tree-id6454 . -4) (undo-tree-id6455 . -4) (undo-tree-id6456 . -4) (undo-tree-id6457 . -3) (undo-tree-id6458 . -3) (undo-tree-id6459 . -3) (undo-tree-id6460 . -3) (undo-tree-id6461 . -3) (undo-tree-id6462 . -3) (undo-tree-id6463 . -3) (undo-tree-id6464 . -2) (undo-tree-id6465 . -2) (undo-tree-id6466 . -2) (undo-tree-id6467 . -2) (undo-tree-id6468 . -2) (undo-tree-id6469 . -2) (undo-tree-id6470 . -2) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (4643 . 4647) (#("F" 0 1 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4643) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (4643 . 4644) (4659 . 4660)) (25731 64292 460140 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4658 . 4659) (nil fontified nil 4653 . 4659) (4653 . 4659) 4660 (#("further" 0 4 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 4 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4653) (undo-tree-id6485 . -7) (undo-tree-id6486 . -6) (undo-tree-id6487 . -6) (undo-tree-id6488 . -6) (undo-tree-id6489 . -6) (undo-tree-id6490 . -7) (undo-tree-id6491 . -6) (undo-tree-id6492 . -6) (undo-tree-id6493 . -6) (undo-tree-id6494 . -6) (undo-tree-id6495 . -6) (undo-tree-id6496 . -6) (undo-tree-id6497 . -6) (undo-tree-id6498 . -7) (undo-tree-id6499 . -7) 4660) nil (25731 64318 669520 261000) 0 nil])
nil
([nil nil ((4660 . 4662) (#("4" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4660)) nil (25731 64318 669498 776000) 0 nil])
([nil nil ((4661 . 4666)) nil (25731 64318 669493 694000) 0 nil])
([nil nil ((4645 . 4646) (t 25731 64318 686895 326000)) nil (25731 64436 551105 953000) 0 nil])
([nil nil ((#("r" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4603) (undo-tree-id7463 . -1)) nil (25731 64436 551105 68000) 0 nil])
([nil nil ((#("ue" 0 2 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4603) (undo-tree-id7448 . 2) (undo-tree-id7449 . -2) (undo-tree-id7450 . -2) (undo-tree-id7451 . -2) (undo-tree-id7452 . -2) (undo-tree-id7453 . -2) (undo-tree-id7454 . -2) (undo-tree-id7455 . -2) (undo-tree-id7456 . -2) (undo-tree-id7457 . -2) (undo-tree-id7458 . -2) (undo-tree-id7459 . -2) (undo-tree-id7460 . -2) (undo-tree-id7461 . -2) (undo-tree-id7462 . -2)) nil (25731 64436 551103 192000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4602 . 4603) (nil fontified nil 4594 . 4603) (nil fontified nil 4584 . 4594) (nil fontified nil 4576 . 4584) (nil fontified nil 4558 . 4576) (4558 . 4603) 4644 (#("      (defun my-not (statement)
        (if T)
        (list 'NIL)
        (list 'T))
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 1 2 (font-lock-fontified t src-block t rear-nonsticky t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 2 4 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 4 6 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 7 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 7 12 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 12 13 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 13 19 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-function-name-face org-block)) 19 20 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 20 21 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 21 30 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 30 31 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 31 32 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 32 34 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 40 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 40 41 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 41 43 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 43 45 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 45 46 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 46 47 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 47 55 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 55 56 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 56 65 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 65 66 (rear-nonsticky t font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 67 74 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 74 75 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) rear-nonsticky t help-echo nil font-lock-multiline t face (org-block)) 75 76 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 76 81 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 81 83 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block)) 83 84 (rear-nonsticky t font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 84 85 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 85 86 (font-lock-fontified t src-block t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4558) (undo-tree-id6543 . -86) (undo-tree-id6544 . -7) (undo-tree-id6545 . 41) (undo-tree-id6546 . -6) (undo-tree-id6547 . -73) (undo-tree-id6548 . -82) (undo-tree-id6549 . -82) (undo-tree-id6550 . -82) (undo-tree-id6551 . -82) (undo-tree-id6552 . -82) (undo-tree-id6553 . -82) (undo-tree-id6554 . -82) (undo-tree-id6555 . -82) (undo-tree-id6556 . -82) (undo-tree-id6557 . -82) (undo-tree-id6558 . -82) (undo-tree-id6559 . -82) (undo-tree-id6560 . -82) (undo-tree-id6561 . -82) (undo-tree-id6562 . -82) (undo-tree-id6563 . -82) (undo-tree-id6564 . -82) (undo-tree-id6565 . -82) (undo-tree-id6566 . -82) (undo-tree-id6567 . -82) (undo-tree-id6568 . -82) (undo-tree-id6569 . -82) (undo-tree-id6570 . -82) (undo-tree-id6571 . -82) (undo-tree-id6572 . -82) (undo-tree-id6573 . -82) (undo-tree-id6574 . -82) (undo-tree-id6575 . -82) (undo-tree-id6576 . -82) (undo-tree-id6577 . -82) (undo-tree-id6578 . -82) (undo-tree-id6579 . -82) (undo-tree-id6580 . -82) (undo-tree-id6581 . -82) (undo-tree-id6582 . -82) (undo-tree-id6583 . -83) (undo-tree-id6584 . -83) (undo-tree-id6585 . -83) (undo-tree-id6586 . -83) (undo-tree-id6587 . -83) (undo-tree-id6588 . -83) (undo-tree-id6589 . -83) (undo-tree-id6590 . -65) (undo-tree-id6591 . -65) (undo-tree-id6592 . -65) (undo-tree-id6593 . -65) (undo-tree-id6594 . -65) (undo-tree-id6595 . -65) (undo-tree-id6596 . -65) (undo-tree-id6597 . -45) (undo-tree-id6598 . -45) (undo-tree-id6599 . -45) (undo-tree-id6600 . -45) (undo-tree-id6601 . -45) (undo-tree-id6602 . -45) (undo-tree-id6603 . -45) (undo-tree-id6604 . -19) (undo-tree-id6605 . -19) (undo-tree-id6606 . -19) (undo-tree-id6607 . -19) (undo-tree-id6608 . -19) (undo-tree-id6609 . -19) (undo-tree-id6610 . -19) (undo-tree-id6611 . -16) (undo-tree-id6612 . -16) (undo-tree-id6613 . -16) (undo-tree-id6614 . -16) (undo-tree-id6615 . -16) (undo-tree-id6616 . -16) (undo-tree-id6617 . -16) (undo-tree-id6618 . -15) (undo-tree-id6619 . -15) (undo-tree-id6620 . -15) (undo-tree-id6621 . -15) (undo-tree-id6622 . -15) (undo-tree-id6623 . -15) (undo-tree-id6624 . -15) (undo-tree-id6625 . -13) (undo-tree-id6626 . -13) (undo-tree-id6627 . -13) (undo-tree-id6628 . -13) (undo-tree-id6629 . -13) (undo-tree-id6630 . -13) (undo-tree-id6631 . -13) (undo-tree-id6632 . -7) (undo-tree-id6633 . -7) (undo-tree-id6634 . -7) (undo-tree-id6635 . -7) (undo-tree-id6636 . -7) (undo-tree-id6637 . -7) (undo-tree-id6638 . -7) (undo-tree-id6639 . -6) (undo-tree-id6640 . -6) (undo-tree-id6641 . -6) (undo-tree-id6642 . -6) (undo-tree-id6643 . -6) (undo-tree-id6644 . -6) (undo-tree-id6645 . -6) (undo-tree-id6646 . -6) (undo-tree-id6647 . -6) (undo-tree-id6648 . -6) (undo-tree-id6649 . -6) (undo-tree-id6650 . -6) (undo-tree-id6651 . -6) (undo-tree-id6652 . -6) (undo-tree-id6653 . -6) (undo-tree-id6654 . -6) (undo-tree-id6655 . -6) (undo-tree-id6656 . -6) (undo-tree-id6657 . -6) (undo-tree-id6658 . -6) (undo-tree-id6659 . -38) (undo-tree-id6660 . -53) (undo-tree-id6661 . -73) (undo-tree-id6662 . -75) (undo-tree-id6663 . -75) (undo-tree-id6664 . -75) (undo-tree-id6665 . -75) (undo-tree-id6666 . -75) (undo-tree-id6667 . -75) (undo-tree-id6668 . -75) (undo-tree-id6669 . -79) (undo-tree-id6670 . -79) (undo-tree-id6671 . -79) (undo-tree-id6672 . -79) (undo-tree-id6673 . -79) (undo-tree-id6674 . -79) (undo-tree-id6675 . -79) (undo-tree-id6676 . -82) (undo-tree-id6677 . -82) (undo-tree-id6678 . -82) (undo-tree-id6679 . -82) (undo-tree-id6680 . -82) (undo-tree-id6681 . -82) (undo-tree-id6682 . -82) (undo-tree-id6683 . -83) (undo-tree-id6684 . -83) (undo-tree-id6685 . -83) (undo-tree-id6686 . -83) (undo-tree-id6687 . -83) (undo-tree-id6688 . -83) (undo-tree-id6689 . -84) (undo-tree-id6690 . -83) (undo-tree-id6691 . -83) (undo-tree-id6692 . -83) (undo-tree-id6693 . -83) (undo-tree-id6694 . -83) (undo-tree-id6695 . -83) (undo-tree-id6696 . -83) (undo-tree-id6697 . -83) (undo-tree-id6698 . -83) (undo-tree-id6699 . -83) (undo-tree-id6700 . -83) (undo-tree-id6701 . -83) (undo-tree-id6702 . -83) (undo-tree-id6703 . -83) (undo-tree-id6704 . -83) (undo-tree-id6705 . -83) (undo-tree-id6706 . -84) (undo-tree-id6707 . -84) (undo-tree-id6708 . -84) (undo-tree-id6709 . -84) (undo-tree-id6710 . -84) (undo-tree-id6711 . -84) (undo-tree-id6712 . -84) (undo-tree-id6713 . -84) (undo-tree-id6714 . -85) (undo-tree-id6715 . -85) (undo-tree-id6716 . -85) (undo-tree-id6717 . -85) (undo-tree-id6718 . -85) (undo-tree-id6719 . -85) (undo-tree-id6720 . -85) (undo-tree-id6721 . -85) (undo-tree-id6722 . -85) (undo-tree-id6723 . -85) (undo-tree-id6724 . -85) (undo-tree-id6725 . -85) (undo-tree-id6726 . -85) (undo-tree-id6727 . -85) (undo-tree-id6728 . -85) (undo-tree-id6729 . -85) (undo-tree-id6730 . -85) (undo-tree-id6731 . -85) (undo-tree-id6732 . -85) (undo-tree-id6733 . -85) (undo-tree-id6734 . -85) (undo-tree-id6735 . -85) (undo-tree-id6736 . -85) (undo-tree-id6737 . -85) (undo-tree-id6738 . -85) (undo-tree-id6739 . -84) (undo-tree-id6740 . -84) (undo-tree-id6741 . -84) (undo-tree-id6742 . -84) (undo-tree-id6743 . -84) (undo-tree-id6744 . -84) (undo-tree-id6745 . -84) (undo-tree-id6746 . -84) (undo-tree-id6747 . -84) (undo-tree-id6748 . -84) (undo-tree-id6749 . -84) (undo-tree-id6750 . -84) (undo-tree-id6751 . -84) (undo-tree-id6752 . -84) (undo-tree-id6753 . -84) (undo-tree-id6754 . -84) (undo-tree-id6755 . -84) (undo-tree-id6756 . -84) (undo-tree-id6757 . -84) (undo-tree-id6758 . -84) (undo-tree-id6759 . -64) (undo-tree-id6760 . -45) (undo-tree-id6761 . -45) (undo-tree-id6762 . -45) (undo-tree-id6763 . -45) (undo-tree-id6764 . -45) (undo-tree-id6765 . -45) (undo-tree-id6766 . -45) (undo-tree-id6767 . -55) (undo-tree-id6768 . -55) (undo-tree-id6769 . -55) (undo-tree-id6770 . -55) (undo-tree-id6771 . -55) (undo-tree-id6772 . -55) (undo-tree-id6773 . -55) (undo-tree-id6774 . -55) (undo-tree-id6775 . -55) (undo-tree-id6776 . -55) (undo-tree-id6777 . -55) (undo-tree-id6778 . -55) (undo-tree-id6779 . -40) (undo-tree-id6780 . -8) (undo-tree-id6781 . -7) (undo-tree-id6782 . -7) (undo-tree-id6783 . -7) (undo-tree-id6784 . -7) (undo-tree-id6785 . -7) (undo-tree-id6786 . -7) (undo-tree-id6787 . -7) (undo-tree-id6788 . -6) (undo-tree-id6789 . -6) (undo-tree-id6790 . -6) (undo-tree-id6791 . -6) (undo-tree-id6792 . -6) (undo-tree-id6793 . -6) (undo-tree-id6794 . -6) (undo-tree-id6795 . -6) (undo-tree-id6796 . -6) (undo-tree-id6797 . -6) (undo-tree-id6798 . -6) (undo-tree-id6799 . -6) (undo-tree-id6800 . -6) (undo-tree-id6801 . -6) (undo-tree-id6802 . -6) (undo-tree-id6803 . -6) (undo-tree-id6804 . -6) (undo-tree-id6805 . -6) (undo-tree-id6806 . -6) (undo-tree-id6807 . -6) (undo-tree-id6808 . -38) (undo-tree-id6809 . -53) (undo-tree-id6810 . -73) (undo-tree-id6811 . -6) (undo-tree-id6812 . -6) (undo-tree-id6813 . -6) (undo-tree-id6814 . -6) (undo-tree-id6815 . -6) (undo-tree-id6816 . -6) (undo-tree-id6817 . -6) (undo-tree-id6818 . -6) (undo-tree-id6819 . -6) (undo-tree-id6820 . -6) (undo-tree-id6821 . -6) (undo-tree-id6822 . -6) (undo-tree-id6823 . -6) (undo-tree-id6824 . -6) (undo-tree-id6825 . -6) (undo-tree-id6826 . -6) (undo-tree-id6827 . -6) (undo-tree-id6828 . -6) (undo-tree-id6829 . -6) (undo-tree-id6830 . -6) (undo-tree-id6831 . -6) (undo-tree-id6832 . -6) (undo-tree-id6833 . -6) (undo-tree-id6834 . -6) (undo-tree-id6835 . -6) (undo-tree-id6836 . -6) (undo-tree-id6837 . -6) (undo-tree-id6838 . -6) (undo-tree-id6839 . -6) (undo-tree-id6840 . -6) (undo-tree-id6841 . -6) (undo-tree-id6842 . -6) (undo-tree-id6843 . -6) (undo-tree-id6844 . -6) (undo-tree-id6845 . -6) (undo-tree-id6846 . -6) (undo-tree-id6847 . -6) (undo-tree-id6848 . -6) (undo-tree-id6849 . -6) (undo-tree-id6850 . -6) (undo-tree-id6851 . -6) (undo-tree-id6852 . -6) (undo-tree-id6853 . -6) (undo-tree-id6854 . -6) (undo-tree-id6855 . -6) (undo-tree-id6856 . -6) (undo-tree-id6857 . -6) (undo-tree-id6858 . -6) (undo-tree-id6859 . -6) (undo-tree-id6860 . -6) (undo-tree-id6861 . -6) (undo-tree-id6862 . -6) (undo-tree-id6863 . -6) (undo-tree-id6864 . -6) (undo-tree-id6865 . -6) (undo-tree-id6866 . -6) (undo-tree-id6867 . -6) (undo-tree-id6868 . -6) (undo-tree-id6869 . -6) (undo-tree-id6870 . -6) (undo-tree-id6871 . -6) (undo-tree-id6872 . -6) (undo-tree-id6873 . -6) (undo-tree-id6874 . -6) (undo-tree-id6875 . -6) (undo-tree-id6876 . -6) (undo-tree-id6877 . -6) (undo-tree-id6878 . -6) (undo-tree-id6879 . -6) (undo-tree-id6880 . -6) (undo-tree-id6881 . -6) (undo-tree-id6882 . -6) (undo-tree-id6883 . -6) (undo-tree-id6884 . -6) (undo-tree-id6885 . -6) (undo-tree-id6886 . -6) (undo-tree-id6887 . -6) (undo-tree-id6888 . -6) (undo-tree-id6889 . -6) (undo-tree-id6890 . -6) (undo-tree-id6891 . -6) (undo-tree-id6892 . -6) (undo-tree-id6893 . -6) (undo-tree-id6894 . -6) (undo-tree-id6895 . -6) (undo-tree-id6896 . -6) (undo-tree-id6897 . -6) (undo-tree-id6898 . -6) (undo-tree-id6899 . -6) (undo-tree-id6900 . -6) (undo-tree-id6901 . -6) (undo-tree-id6902 . -6) (undo-tree-id6903 . -6) (undo-tree-id6904 . -6) (undo-tree-id6905 . -6) (undo-tree-id6906 . -6) (undo-tree-id6907 . -6) (undo-tree-id6908 . -6) (undo-tree-id6909 . -6) (undo-tree-id6910 . -6) (undo-tree-id6911 . -6) (undo-tree-id6912 . -6) (undo-tree-id6913 . -6) (undo-tree-id6914 . -6) (undo-tree-id6915 . -6) (undo-tree-id6916 . -6) (undo-tree-id6917 . -6) (undo-tree-id6918 . -6) (undo-tree-id6919 . -6) (undo-tree-id6920 . -6) (undo-tree-id6921 . -6) (undo-tree-id6922 . -6) (undo-tree-id6923 . -6) (undo-tree-id6924 . -6) (undo-tree-id6925 . -6) (undo-tree-id6926 . -6) (undo-tree-id6927 . -6) (undo-tree-id6928 . -6) (undo-tree-id6929 . -6) (undo-tree-id6930 . -6) (undo-tree-id6931 . -6) (undo-tree-id6932 . -6) (undo-tree-id6933 . -6) (undo-tree-id6934 . -6) (undo-tree-id6935 . -6) (undo-tree-id6936 . -6) (undo-tree-id6937 . -6) (undo-tree-id6938 . -6) (undo-tree-id6939 . -6) (undo-tree-id6940 . -6) (undo-tree-id6941 . -6) (undo-tree-id6942 . -6) (undo-tree-id6943 . -6) (undo-tree-id6944 . -6) (undo-tree-id6945 . -6) (undo-tree-id6946 . -6) (undo-tree-id6947 . -6) (undo-tree-id6948 . -6) (undo-tree-id6949 . -6) (undo-tree-id6950 . -6) (undo-tree-id6951 . -6) (undo-tree-id6952 . -6) (undo-tree-id6953 . -6) (undo-tree-id6954 . -6) (undo-tree-id6955 . -6) (undo-tree-id6956 . -6) (undo-tree-id6957 . -6) (undo-tree-id6958 . -6) (undo-tree-id6959 . -6) (undo-tree-id6960 . -6) (undo-tree-id6961 . -6) (undo-tree-id6962 . -6) (undo-tree-id6963 . -6) (undo-tree-id6964 . -6) (undo-tree-id6965 . -6) (undo-tree-id6966 . -6) (undo-tree-id6967 . -6) (undo-tree-id6968 . -6) (undo-tree-id6969 . -6) (undo-tree-id6970 . -6) (undo-tree-id6971 . -6) (undo-tree-id6972 . -6) (undo-tree-id6973 . -6) (undo-tree-id6974 . -6) (undo-tree-id6975 . -6) (undo-tree-id6976 . -6) (undo-tree-id6977 . -6) (undo-tree-id6978 . -6) (undo-tree-id6979 . -6) (undo-tree-id6980 . -6) (undo-tree-id6981 . -6) (undo-tree-id6982 . -6) (undo-tree-id6983 . -6) (undo-tree-id6984 . -6) (undo-tree-id6985 . -6) (undo-tree-id6986 . -6) (undo-tree-id6987 . -6) (undo-tree-id6988 . -6) (undo-tree-id6989 . -6) (undo-tree-id6990 . -6) (undo-tree-id6991 . -6) (undo-tree-id6992 . -6) (undo-tree-id6993 . -6) (undo-tree-id6994 . -6) (undo-tree-id6995 . -6) (undo-tree-id6996 . -6) (undo-tree-id6997 . -6) (undo-tree-id6998 . -6) (undo-tree-id6999 . -6) (undo-tree-id7000 . -6) (undo-tree-id7001 . -6) (undo-tree-id7002 . -6) (undo-tree-id7003 . -6) (undo-tree-id7004 . -6) (undo-tree-id7005 . -6) (undo-tree-id7006 . -6) (undo-tree-id7007 . -6) (undo-tree-id7008 . -6) (undo-tree-id7009 . -6) (undo-tree-id7010 . -6) (undo-tree-id7011 . -6) (undo-tree-id7012 . -6) (undo-tree-id7013 . -6) (undo-tree-id7014 . -6) (undo-tree-id7015 . -6) (undo-tree-id7016 . -6) (undo-tree-id7017 . -6) (undo-tree-id7018 . -6) (undo-tree-id7019 . -6) (undo-tree-id7020 . -6) (undo-tree-id7021 . -6) (undo-tree-id7022 . -6) (undo-tree-id7023 . -6) (undo-tree-id7024 . -6) (undo-tree-id7025 . -6) (undo-tree-id7026 . -6) (undo-tree-id7027 . -6) (undo-tree-id7028 . -6) (undo-tree-id7029 . -6) (undo-tree-id7030 . -6) (undo-tree-id7031 . -6) (undo-tree-id7032 . -6) (undo-tree-id7033 . -6) (undo-tree-id7034 . -6) (undo-tree-id7035 . -6) (undo-tree-id7036 . -6) (undo-tree-id7037 . -6) (undo-tree-id7038 . -6) (undo-tree-id7039 . -6) (undo-tree-id7040 . -6) (undo-tree-id7041 . -6) (undo-tree-id7042 . -6) (undo-tree-id7043 . -6) (undo-tree-id7044 . -6) (undo-tree-id7045 . -6) (undo-tree-id7046 . -6) (undo-tree-id7047 . -6) (undo-tree-id7048 . -6) (undo-tree-id7049 . -6) (undo-tree-id7050 . -6) (undo-tree-id7051 . -6) (undo-tree-id7052 . -6) (undo-tree-id7053 . -6) (undo-tree-id7054 . -6) (undo-tree-id7055 . -6) (undo-tree-id7056 . -6) (undo-tree-id7057 . -6) (undo-tree-id7058 . -6) (undo-tree-id7059 . -6) (undo-tree-id7060 . -6) (undo-tree-id7061 . -6) (undo-tree-id7062 . -6) (undo-tree-id7063 . -6) (undo-tree-id7064 . -6) (undo-tree-id7065 . -6) (undo-tree-id7066 . -66) (undo-tree-id7067 . -66) (undo-tree-id7068 . -66) (undo-tree-id7069 . -66) (undo-tree-id7070 . -66) (undo-tree-id7071 . -66) (undo-tree-id7072 . -66) (undo-tree-id7073 . -66) (undo-tree-id7074 . -66) (undo-tree-id7075 . -66) (undo-tree-id7076 . -66) (undo-tree-id7077 . -66) (undo-tree-id7078 . -66) (undo-tree-id7079 . -66) (undo-tree-id7080 . -66) (undo-tree-id7081 . -66) (undo-tree-id7082 . -66) (undo-tree-id7083 . -66) (undo-tree-id7084 . -66) (undo-tree-id7085 . -66) (undo-tree-id7086 . -66) (undo-tree-id7087 . -66) (undo-tree-id7088 . -65) (undo-tree-id7089 . -65) (undo-tree-id7090 . -65) (undo-tree-id7091 . -65) (undo-tree-id7092 . -65) (undo-tree-id7093 . -65) (undo-tree-id7094 . -65) (undo-tree-id7095 . -65) (undo-tree-id7096 . -61) (undo-tree-id7097 . -61) (undo-tree-id7098 . -61) (undo-tree-id7099 . -61) (undo-tree-id7100 . -61) (undo-tree-id7101 . -61) (undo-tree-id7102 . -61) (undo-tree-id7103 . -61) (undo-tree-id7104 . -61) (undo-tree-id7105 . -61) (undo-tree-id7106 . -61) (undo-tree-id7107 . -61) (undo-tree-id7108 . -45) (undo-tree-id7109 . -44) (undo-tree-id7110 . -44) (undo-tree-id7111 . -44) (undo-tree-id7112 . -44) (undo-tree-id7113 . -44) (undo-tree-id7114 . -44) (undo-tree-id7115 . -44) (undo-tree-id7116 . -45) (undo-tree-id7117 . -45) (undo-tree-id7118 . -45) (undo-tree-id7119 . -45) (undo-tree-id7120 . -45) (undo-tree-id7121 . -45) (undo-tree-id7122 . -45) (undo-tree-id7123 . -45) (undo-tree-id7124 . -45) (undo-tree-id7125 . -45) (undo-tree-id7126 . -45) (undo-tree-id7127 . -45) (undo-tree-id7128 . -45) (undo-tree-id7129 . -45) (undo-tree-id7130 . -45) (undo-tree-id7131 . -44) (undo-tree-id7132 . -44) (undo-tree-id7133 . -44) (undo-tree-id7134 . -44) (undo-tree-id7135 . -44) (undo-tree-id7136 . -44) (undo-tree-id7137 . -44) (undo-tree-id7138 . -44) (undo-tree-id7139 . -44) (undo-tree-id7140 . -44) (undo-tree-id7141 . -44) (undo-tree-id7142 . -44) (undo-tree-id7143 . -44) (undo-tree-id7144 . -44) (undo-tree-id7145 . -44) (undo-tree-id7146 . -45) (undo-tree-id7147 . -45) (undo-tree-id7148 . -45) (undo-tree-id7149 . -45) (undo-tree-id7150 . -45) (undo-tree-id7151 . -45) (undo-tree-id7152 . -45) (undo-tree-id7153 . -45) (undo-tree-id7154 . -45) (undo-tree-id7155 . -45) (undo-tree-id7156 . -45) (undo-tree-id7157 . -45) (undo-tree-id7158 . -45) (undo-tree-id7159 . -45) (undo-tree-id7160 . -45) (undo-tree-id7161 . -45) (undo-tree-id7162 . -45) (undo-tree-id7163 . -45) (undo-tree-id7164 . -45) (undo-tree-id7165 . -45) (undo-tree-id7166 . -45) (undo-tree-id7167 . -45) (undo-tree-id7168 . -44) (undo-tree-id7169 . -44) (undo-tree-id7170 . -44) (undo-tree-id7171 . -44) (undo-tree-id7172 . -44) (undo-tree-id7173 . -44) (undo-tree-id7174 . -44) (undo-tree-id7175 . -44) (undo-tree-id7176 . -44) (undo-tree-id7177 . -44) (undo-tree-id7178 . -44) (undo-tree-id7179 . -44) (undo-tree-id7180 . -44) (undo-tree-id7181 . -44) (undo-tree-id7182 . -44) (undo-tree-id7183 . -41) (undo-tree-id7184 . -41) (undo-tree-id7185 . -41) (undo-tree-id7186 . -41) (undo-tree-id7187 . -41) (undo-tree-id7188 . -41) (undo-tree-id7189 . -41) (undo-tree-id7190 . -40) (undo-tree-id7191 . -40) (undo-tree-id7192 . -40) (undo-tree-id7193 . -40) (undo-tree-id7194 . -40) (undo-tree-id7195 . -40) (undo-tree-id7196 . -40) (undo-tree-id7197 . -40) (undo-tree-id7198 . -40) (undo-tree-id7199 . -40) (undo-tree-id7200 . -40) (undo-tree-id7201 . -40) (undo-tree-id7202 . -8) (undo-tree-id7203 . -7) (undo-tree-id7204 . -7) (undo-tree-id7205 . -7) (undo-tree-id7206 . -7) (undo-tree-id7207 . -7) (undo-tree-id7208 . -7) (undo-tree-id7209 . -7) (undo-tree-id7210 . -6) (undo-tree-id7211 . -6) (undo-tree-id7212 . -6) (undo-tree-id7213 . -6) (undo-tree-id7214 . -6) (undo-tree-id7215 . -6) (undo-tree-id7216 . -6) (undo-tree-id7217 . -7) (undo-tree-id7218 . -7) (undo-tree-id7219 . -7) (undo-tree-id7220 . -7) (undo-tree-id7221 . -7) (undo-tree-id7222 . -7) (undo-tree-id7223 . -7) (undo-tree-id7224 . -7) (undo-tree-id7225 . -7) (undo-tree-id7226 . -7) (undo-tree-id7227 . -7) (undo-tree-id7228 . -7) (undo-tree-id7229 . -7) (undo-tree-id7230 . -7) (undo-tree-id7231 . -7) (undo-tree-id7232 . -7) (undo-tree-id7233 . -7) (undo-tree-id7234 . -7) (undo-tree-id7235 . -7) (undo-tree-id7236 . -7) (undo-tree-id7237 . -7) (undo-tree-id7238 . -7) (undo-tree-id7239 . -7) (undo-tree-id7240 . -7) (undo-tree-id7241 . -7) (undo-tree-id7242 . -7) (undo-tree-id7243 . -7) (undo-tree-id7244 . -7) (undo-tree-id7245 . -7) (undo-tree-id7246 . -7) (undo-tree-id7247 . -7) (undo-tree-id7248 . -7) (undo-tree-id7249 . -7) (undo-tree-id7250 . -7) (undo-tree-id7251 . -7) (undo-tree-id7252 . -7) (undo-tree-id7253 . -7) (undo-tree-id7254 . -7) (undo-tree-id7255 . -7) (undo-tree-id7256 . -7) (undo-tree-id7257 . -7) (undo-tree-id7258 . -7) (undo-tree-id7259 . -7) (undo-tree-id7260 . -7) (undo-tree-id7261 . -7) (undo-tree-id7262 . -7) (undo-tree-id7263 . -7) (undo-tree-id7264 . -7) (undo-tree-id7265 . -7) (undo-tree-id7266 . -7) (undo-tree-id7267 . -7) (undo-tree-id7268 . -7) (undo-tree-id7269 . -7) (undo-tree-id7270 . -7) (undo-tree-id7271 . -7) (undo-tree-id7272 . -7) (undo-tree-id7273 . -7) (undo-tree-id7274 . -7) (undo-tree-id7275 . -7) (undo-tree-id7276 . -7) (undo-tree-id7277 . -7) (undo-tree-id7278 . -7) (undo-tree-id7279 . -7) (undo-tree-id7280 . -7) (undo-tree-id7281 . -7) (undo-tree-id7282 . -7) (undo-tree-id7283 . -7) (undo-tree-id7284 . -7) (undo-tree-id7285 . -7) (undo-tree-id7286 . -7) (undo-tree-id7287 . -7) (undo-tree-id7288 . -7) (undo-tree-id7289 . -7) (undo-tree-id7290 . -7) (undo-tree-id7291 . -7) (undo-tree-id7292 . -7) (undo-tree-id7293 . -7) (undo-tree-id7294 . -7) (undo-tree-id7295 . -7) (undo-tree-id7296 . -7) (undo-tree-id7297 . -7) (undo-tree-id7298 . -7) (undo-tree-id7299 . -7) (undo-tree-id7300 . -7) (undo-tree-id7301 . -7) (undo-tree-id7302 . -7) (undo-tree-id7303 . -7) (undo-tree-id7304 . -7) (undo-tree-id7305 . -7) (undo-tree-id7306 . -7) (undo-tree-id7307 . -7) (undo-tree-id7308 . -7) (undo-tree-id7309 . -7) (undo-tree-id7310 . -7) (undo-tree-id7311 . -7) (undo-tree-id7312 . -7) (undo-tree-id7313 . -7) (undo-tree-id7314 . -7) (undo-tree-id7315 . -7) (undo-tree-id7316 . -7) (undo-tree-id7317 . -7) (undo-tree-id7318 . -7) (undo-tree-id7319 . -7) (undo-tree-id7320 . -7) (undo-tree-id7321 . -7) (undo-tree-id7322 . -7) (undo-tree-id7323 . -7) (undo-tree-id7324 . -7) (undo-tree-id7325 . -7) (undo-tree-id7326 . -7) (undo-tree-id7327 . -7) (undo-tree-id7328 . -7) (undo-tree-id7329 . -7) (undo-tree-id7330 . -7) (undo-tree-id7331 . -7) (undo-tree-id7332 . -7) (undo-tree-id7333 . -7) (undo-tree-id7334 . -7) (undo-tree-id7335 . -7) (undo-tree-id7336 . -7) (undo-tree-id7337 . -7) (undo-tree-id7338 . -7) (undo-tree-id7339 . -7) (undo-tree-id7340 . -7) (undo-tree-id7341 . -7) (undo-tree-id7342 . -7) (undo-tree-id7343 . -7) (undo-tree-id7344 . -7) (undo-tree-id7345 . -7) (undo-tree-id7346 . -7) (undo-tree-id7347 . -7) (undo-tree-id7348 . -7) (undo-tree-id7349 . -7) (undo-tree-id7350 . -7) (undo-tree-id7351 . -7) (undo-tree-id7352 . -7) (undo-tree-id7353 . -7) (undo-tree-id7354 . -7) (undo-tree-id7355 . -7) (undo-tree-id7356 . -7) (undo-tree-id7357 . -7) (undo-tree-id7358 . -7) (undo-tree-id7359 . -7) (undo-tree-id7360 . -7) (undo-tree-id7361 . -7) (undo-tree-id7362 . -7) (undo-tree-id7363 . -7) (undo-tree-id7364 . -7) (undo-tree-id7365 . -7) (undo-tree-id7366 . -7) (undo-tree-id7367 . -7) (undo-tree-id7368 . -7) (undo-tree-id7369 . -7) (undo-tree-id7370 . -7) (undo-tree-id7371 . -7) (undo-tree-id7372 . -7) (undo-tree-id7373 . -7) (undo-tree-id7374 . -7) (undo-tree-id7375 . -7) (undo-tree-id7376 . -7) (undo-tree-id7377 . -7) (undo-tree-id7378 . -7) (undo-tree-id7379 . -7) (undo-tree-id7380 . -7) (undo-tree-id7381 . -7) (undo-tree-id7382 . -7) (undo-tree-id7383 . -7) (undo-tree-id7384 . -7) (undo-tree-id7385 . -7) (undo-tree-id7386 . -7) (undo-tree-id7387 . -7) (undo-tree-id7388 . -7) (undo-tree-id7389 . -7) (undo-tree-id7390 . -7) (undo-tree-id7391 . -7) (undo-tree-id7392 . -7) (undo-tree-id7393 . -7) (undo-tree-id7394 . -7) (undo-tree-id7395 . -7) (undo-tree-id7396 . -7) (undo-tree-id7397 . -7) (undo-tree-id7398 . -7) (undo-tree-id7399 . -7) (undo-tree-id7400 . -7) (undo-tree-id7401 . -7) (undo-tree-id7402 . -7) (undo-tree-id7403 . -7) (undo-tree-id7404 . -7) (undo-tree-id7405 . -7) (undo-tree-id7406 . -7) (undo-tree-id7407 . -7) (undo-tree-id7408 . -7) (undo-tree-id7409 . -73) (undo-tree-id7410 . -7) (undo-tree-id7411 . -7) (undo-tree-id7412 . -7) (undo-tree-id7413 . -7) (undo-tree-id7414 . -7) (undo-tree-id7415 . -7) (undo-tree-id7416 . -7) (undo-tree-id7417 . -7) (undo-tree-id7418 . -7) (undo-tree-id7419 . -7) (undo-tree-id7420 . -7) (undo-tree-id7421 . -6) (undo-tree-id7422 . -6) (undo-tree-id7423 . -6) (undo-tree-id7424 . -6) (undo-tree-id7425 . -6) (undo-tree-id7426 . -6) (undo-tree-id7427 . -6) (undo-tree-id7428 . -86) (undo-tree-id7429 . -6) (undo-tree-id7430 . -73) (undo-tree-id7431 . -6) (undo-tree-id7432 . -6) (undo-tree-id7433 . -6) (undo-tree-id7434 . -6) (undo-tree-id7435 . -6) (undo-tree-id7436 . -6) (undo-tree-id7437 . -6) (undo-tree-id7438 . -6) (undo-tree-id7439 . -6) (undo-tree-id7440 . -6) (undo-tree-id7441 . -6) (undo-tree-id7442 . -6) (undo-tree-id7443 . -6) (undo-tree-id7444 . -38) (undo-tree-id7445 . -53) (undo-tree-id7446 . -86) (undo-tree-id7447 . -86) 4644) nil (25731 64436 551064 583000) 0 nil])
([nil nil ((4558 . 4560) (4576 . 4577) (4578 . 4579) (4584 . 4586) (4600 . 4602) (#("    " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (font-lock-fontified t src-block t fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) help-echo nil font-lock-multiline t face (org-block))) . 4604) (undo-tree-id6541 . 4) (undo-tree-id6542 . 4) 4558 (4603 . 4604)) nil (25731 64436 549823 810000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4945 . 4946) (nil fontified nil 4919 . 4946) (nil fontified nil 4845 . 4919) (nil fontified nil 4773 . 4845) (nil fontified nil 4704 . 4773) (nil fontified nil 4642 . 4704) (4642 . 4946) (t 25731 64436 613004 652000)) nil (25731 64532 57286 53000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 4642) (undo-tree-id7533 . 1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1)) nil (25731 64532 57284 107000) 0 nil])
([nil nil ((4702 . 4703) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4702) 4642) nil (25731 64532 57278 138000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4715) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (4716 . 4717)) nil (25731 64532 57276 362000) 0 nil])
([nil nil ((4771 . 4772) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4771) 4716) nil (25731 64532 57265 491000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4787) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (4788 . 4789)) nil (25731 64532 57263 920000) 0 nil])
([nil nil ((4843 . 4844) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4843) 4788) nil (25731 64532 57252 168000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4857) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (4858 . 4859)) nil (25731 64532 57250 252000) 0 nil])
([nil nil ((4917 . 4918) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -4917) (undo-tree-id7481 . -1) 4858) nil (25731 64532 57237 625000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 4928) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (4929 . 4930)) nil (25731 64532 57232 177000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5066 . 5067) (nil fontified nil 5066 . 5067) (nil fontified nil 5056 . 5066) (nil fontified nil 5037 . 5056) (nil fontified nil 5025 . 5037) (nil fontified nil 5013 . 5025) (nil fontified nil 5003 . 5013) (nil fontified nil 4983 . 5003) (nil fontified nil 4946 . 4983) (4946 . 5067) (t 25731 64532 75351 639000)) nil (25731 64909 600453 827000) 0 nil])
([nil nil ((4945 . 4946) 4929) nil (25731 64909 600451 431000) 0 nil])
([nil nil ((4998 . 5000) (4997 . 4998) (#("s" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block))) . -4997) (undo-tree-id8540 . -1) 4998 (4993 . 4998) (#("my-not" 0 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t)) . 4993) (undo-tree-id8541 . -5) (undo-tree-id8542 . -5) (undo-tree-id8543 . -5) (undo-tree-id8544 . -5) 4998) nil (25731 64909 600449 673000) 0 nil])
([nil nil ((5003 . 5005)) nil (25731 64909 600445 214000) 0 nil])
([nil nil ((5027 . 5029) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("             " 0 6 (face org-indent) 6 13 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5027) (undo-tree-id8538 . -1) 5028 (5026 . 5028) (4986 . 4988) (5007 . 5008) (5011 . 5012) (5015 . 5022) (5017 . 5019) (5037 . 5039) (5041 . 5043) 4984 (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5014) (undo-tree-id8539 . -1) (5015 . 5016)) nil (25731 64909 600443 688000) 0 nil])
([nil nil ((5032 . 5033) (5030 . 5032)) nil (25731 64909 600440 158000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . -5059) (undo-tree-id8527 . -1) (undo-tree-id8528 . 1) (undo-tree-id8529 . -1) (#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . -5060) (undo-tree-id8530 . -1) (undo-tree-id8531 . 1) (undo-tree-id8532 . -1) 5061 (5060 . 5061) (5049 . 5060) (#("l" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5049) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) 5050 (5049 . 5050) (5046 . 5049) 4984 (5043 . 5046) (5039 . 5043) (5036 . 5039) (#("r" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5036) (undo-tree-id8535 . -1) 5037 (5033 . 5037) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4986) (#("  " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5009) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("             " 0 6 (face org-indent) 6 13 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5024) (undo-tree-id8536 . -2) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5036) (undo-tree-id8537 . 1) (5040 . 5042) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5051) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5060) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5065) 4984 (5033 . 5036) 5026) nil (25731 64909 600437 388000) 0 nil])
([nil nil ((#("        nil
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 12 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5060) (undo-tree-id8526 . -10) 5070) nil (25731 64909 600425 837000) 0 nil])
([nil nil ((#("        t))
" 0 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 8 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 9 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 9 10 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 10 11 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 11 12 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5060) (undo-tree-id8523 . -10) (undo-tree-id8524 . 2) (undo-tree-id8525 . -11) 5070) nil (25731 64909 600424 226000) 0 nil])
([nil nil ((5059 . 5060)) nil (25731 64909 600421 787000) 0 nil])
([nil nil ((5060 . 5062)) nil (25731 64909 600421 136000) 0 nil])
([nil nil ((#("  (my-not (= 1 1))
" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 3 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 3 10 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 10 11 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 11 16 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 16 17 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 17 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5063) (undo-tree-id8518 . -17) (undo-tree-id8519 . 2) (undo-tree-id8520 . -18) (undo-tree-id8521 . 17) (undo-tree-id8522 . -3) 5080) nil (25731 64909 600420 24000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("           " 0 6 (face org-indent) 6 11 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 5059) (undo-tree-id8516 . 1) (undo-tree-id8517 . -1)) nil (25731 64909 600416 138000) 0 nil])
([nil nil ((5014 . 5015) (#("     " 0 5 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5014) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5014) 5013) nil (25731 64909 600414 0) 0 nil])
([nil nil ((5056 . 5057)) nil (25731 64909 600412 825000) 0 nil])
([nil nil ((4986 . 4988) (5007 . 5009) (5015 . 5022) (5023 . 5024) (5028 . 5029) (5039 . 5041) 4984 (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5014) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (5015 . 5016)) nil (25731 64909 600411 47000) 0 nil])
([nil nil ((4988 . 4990) (5009 . 5010) (5015 . 5016) (5019 . 5020) (5026 . 5027) (5034 . 5036) (5052 . 5054) (5070 . 5079) 4984 (5069 . 5070)) nil (25731 64909 600397 679000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 5089) (undo-tree-id8496 . 1) (undo-tree-id8497 . 1) (undo-tree-id8498 . -1)) nil (25731 64909 600395 422000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 5089) (undo-tree-id8493 . 1) (undo-tree-id8494 . 1) (undo-tree-id8495 . -1)) nil (25731 64909 600392 852000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 5089) (undo-tree-id8490 . 1) (undo-tree-id8491 . 1) (undo-tree-id8492 . -1)) nil (25731 64909 600389 949000) 0 nil])
([nil nil ((5033 . 5034) (#("?" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5033) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) 5034 (5033 . 5034) (#("?" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5033) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) 5034 (5033 . 5034) (#("%" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5033) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) 5034 (5033 . 5034) (#("<" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5033) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . 1) (undo-tree-id8489 . -1)) nil (25731 64909 600384 186000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5086) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -5087) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) 5088) nil (25731 64909 600357 625000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5155 . 5156) (nil fontified nil 5138 . 5156) (nil fontified nil 5121 . 5138) (nil fontified nil 5107 . 5121) (nil fontified nil 5086 . 5107) (5086 . 5156) 5085) nil (25731 64909 600293 944000) 0 nil])
([nil nil ((#("      (defun ordered (x y)
" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 6 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 7 12 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 12 13 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 13 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 20 21 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 21 22 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 22 25 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 25 26 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 26 27 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4984) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -16) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -2) (undo-tree-id8236 . -2) (undo-tree-id8237 . -2) (undo-tree-id8238 . -2) (undo-tree-id8239 . -2) (undo-tree-id8240 . -2) (undo-tree-id8241 . -2) (undo-tree-id8242 . -7) (undo-tree-id8243 . -7) (undo-tree-id8244 . -7) (undo-tree-id8245 . -7) (undo-tree-id8246 . -7) (undo-tree-id8247 . -7) (undo-tree-id8248 . -7) (undo-tree-id8249 . -13) (undo-tree-id8250 . -13) (undo-tree-id8251 . -13) (undo-tree-id8252 . -13) (undo-tree-id8253 . -13) (undo-tree-id8254 . -13) (undo-tree-id8255 . -13) (undo-tree-id8256 . -21) (undo-tree-id8257 . -21) (undo-tree-id8258 . -21) (undo-tree-id8259 . -21) (undo-tree-id8260 . -21) (undo-tree-id8261 . -21) (undo-tree-id8262 . -21) (undo-tree-id8263 . -22) (undo-tree-id8264 . -22) (undo-tree-id8265 . -22) (undo-tree-id8266 . -22) (undo-tree-id8267 . -22) (undo-tree-id8268 . -22) (undo-tree-id8269 . -22) (undo-tree-id8270 . -24) (undo-tree-id8271 . -24) (undo-tree-id8272 . -24) (undo-tree-id8273 . -24) (undo-tree-id8274 . -24) (undo-tree-id8275 . -24) (undo-tree-id8276 . -24) (undo-tree-id8277 . -25) (undo-tree-id8278 . -25) (undo-tree-id8279 . -25) (undo-tree-id8280 . -25) (undo-tree-id8281 . -25) (undo-tree-id8282 . -25) (undo-tree-id8283 . -25) (undo-tree-id8284 . -26) (undo-tree-id8285 . -26) (undo-tree-id8286 . -26) (undo-tree-id8287 . -26) (undo-tree-id8288 . -26) (undo-tree-id8289 . -26) (undo-tree-id8290 . -26) (undo-tree-id8291 . -25) (undo-tree-id8292 . -25) (undo-tree-id8293 . -25) (undo-tree-id8294 . -25) (undo-tree-id8295 . -25) (undo-tree-id8296 . -25) (undo-tree-id8297 . -25) (undo-tree-id8298 . -25) (undo-tree-id8299 . -25) (undo-tree-id8300 . -8) (undo-tree-id8301 . -7) (undo-tree-id8302 . -7) (undo-tree-id8303 . -7) (undo-tree-id8304 . -7) (undo-tree-id8305 . -7) (undo-tree-id8306 . -7) (undo-tree-id8307 . -7) (undo-tree-id8308 . -7) (undo-tree-id8309 . -7) (undo-tree-id8310 . -7) (undo-tree-id8311 . -7) (undo-tree-id8312 . -7) (undo-tree-id8313 . -7) (undo-tree-id8314 . -7) (undo-tree-id8315 . -7) (undo-tree-id8316 . -7) (undo-tree-id8317 . -7) (undo-tree-id8318 . -7) (undo-tree-id8319 . -7) (undo-tree-id8320 . -7) (undo-tree-id8321 . -7) (undo-tree-id8322 . -7) (undo-tree-id8323 . -7) (undo-tree-id8324 . -7) (undo-tree-id8325 . -7) (undo-tree-id8326 . -7) (undo-tree-id8327 . -7) (undo-tree-id8328 . -7) (undo-tree-id8329 . -7) (undo-tree-id8330 . -7) (undo-tree-id8331 . -7) (undo-tree-id8332 . -7) (undo-tree-id8333 . -7) (undo-tree-id8334 . -7) (undo-tree-id8335 . -7) (undo-tree-id8336 . -7) (undo-tree-id8337 . -16) (undo-tree-id8338 . -16) (undo-tree-id8339 . -16) (undo-tree-id8340 . -16) (undo-tree-id8341 . -16) (undo-tree-id8342 . -16) (undo-tree-id8343 . -16) (undo-tree-id8344 . -16) (undo-tree-id8345 . -16) (undo-tree-id8346 . -16) (undo-tree-id8347 . -16) (undo-tree-id8348 . -16) (undo-tree-id8349 . -16) (undo-tree-id8350 . -16) (undo-tree-id8351 . -16) 5000) nil (25731 64909 600286 698000) 0 nil])
([nil nil ((4995 . 4996) (#("         " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 8 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 9 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4995) (undo-tree-id8120 . 9) (undo-tree-id8121 . -8) (undo-tree-id8122 . -8) (undo-tree-id8123 . -8) (undo-tree-id8124 . -8) (undo-tree-id8125 . -8) (undo-tree-id8126 . -8) (undo-tree-id8127 . -8) (undo-tree-id8128 . -8) (undo-tree-id8129 . -7) (undo-tree-id8130 . -7) (undo-tree-id8131 . -7) (undo-tree-id8132 . -7) (undo-tree-id8133 . -7) (undo-tree-id8134 . -7) (undo-tree-id8135 . -7) (undo-tree-id8136 . -7) (undo-tree-id8137 . -7) (undo-tree-id8138 . -7) (undo-tree-id8139 . -7) (undo-tree-id8140 . -7) (undo-tree-id8141 . -7) (undo-tree-id8142 . -7) (undo-tree-id8143 . -7) (undo-tree-id8144 . -8) (undo-tree-id8145 . -8) (undo-tree-id8146 . -8) (undo-tree-id8147 . -8) (undo-tree-id8148 . -8) (undo-tree-id8149 . -8) (undo-tree-id8150 . -8) (undo-tree-id8151 . -8) (undo-tree-id8152 . -8) (undo-tree-id8153 . -8) (undo-tree-id8154 . -8) (undo-tree-id8155 . -8) (undo-tree-id8156 . -8) (undo-tree-id8157 . -9) (undo-tree-id8158 . -9) (undo-tree-id8159 . -9) (undo-tree-id8160 . -9) (undo-tree-id8161 . -9) (undo-tree-id8162 . -9) (undo-tree-id8163 . -9) (undo-tree-id8164 . -9) (undo-tree-id8165 . -9) (undo-tree-id8166 . -9) (undo-tree-id8167 . -9) (undo-tree-id8168 . -9) (undo-tree-id8169 . -9) (undo-tree-id8170 . -9) (undo-tree-id8171 . -9) (undo-tree-id8172 . -9) (undo-tree-id8173 . -9) (undo-tree-id8174 . -9) (undo-tree-id8175 . -9) (undo-tree-id8176 . -9) (undo-tree-id8177 . -9) (undo-tree-id8178 . -7) (#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -4995) (undo-tree-id8179 . 1) (undo-tree-id8180 . -1) 4994) nil (25731 64909 600173 25000) 0 nil])
([nil nil ((#("        (if (> x y)
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 3 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 7 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 8 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 9 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 9 11 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 11 12 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 12 13 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 13 14 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 14 15 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 15 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 19 20 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4984) (undo-tree-id7758 . -19) (undo-tree-id7759 . -12) (undo-tree-id7760 . -7) (undo-tree-id7761 . -7) (undo-tree-id7762 . -7) (undo-tree-id7763 . -7) (undo-tree-id7764 . -7) (undo-tree-id7765 . -7) (undo-tree-id7766 . -7) (undo-tree-id7767 . -7) (undo-tree-id7768 . -7) (undo-tree-id7769 . -7) (undo-tree-id7770 . -7) (undo-tree-id7771 . -7) (undo-tree-id7772 . -7) (undo-tree-id7773 . -9) (undo-tree-id7774 . -9) (undo-tree-id7775 . -9) (undo-tree-id7776 . -9) (undo-tree-id7777 . -9) (undo-tree-id7778 . -9) (undo-tree-id7779 . -9) (undo-tree-id7780 . -11) (undo-tree-id7781 . -11) (undo-tree-id7782 . -11) (undo-tree-id7783 . -11) (undo-tree-id7784 . -11) (undo-tree-id7785 . -11) (undo-tree-id7786 . -11) (undo-tree-id7787 . -11) (undo-tree-id7788 . -11) (undo-tree-id7789 . -11) (undo-tree-id7790 . -11) (undo-tree-id7791 . -11) (undo-tree-id7792 . -11) (undo-tree-id7793 . -11) (undo-tree-id7794 . -11) (undo-tree-id7795 . 8) (undo-tree-id7796 . -11) (undo-tree-id7797 . -11) (undo-tree-id7798 . -11) (undo-tree-id7799 . -11) (undo-tree-id7800 . -11) (undo-tree-id7801 . -11) (undo-tree-id7802 . -11) (undo-tree-id7803 . -11) (undo-tree-id7804 . -11) (undo-tree-id7805 . -11) (undo-tree-id7806 . -11) (undo-tree-id7807 . -11) (undo-tree-id7808 . -11) (undo-tree-id7809 . -11) (undo-tree-id7810 . -11) (undo-tree-id7811 . -11) (undo-tree-id7812 . -11) (undo-tree-id7813 . -11) (undo-tree-id7814 . -11) (undo-tree-id7815 . -11) (undo-tree-id7816 . -11) (undo-tree-id7817 . -11) (undo-tree-id7818 . -11) (undo-tree-id7819 . -11) (undo-tree-id7820 . -11) (undo-tree-id7821 . -11) (undo-tree-id7822 . -11) (undo-tree-id7823 . -11) (undo-tree-id7824 . -11) (undo-tree-id7825 . -11) (undo-tree-id7826 . -11) (undo-tree-id7827 . -11) (undo-tree-id7828 . -11) (undo-tree-id7829 . -11) (undo-tree-id7830 . -11) (undo-tree-id7831 . -11) (undo-tree-id7832 . -11) (undo-tree-id7833 . -11) (undo-tree-id7834 . -11) (undo-tree-id7835 . -11) (undo-tree-id7836 . -11) (undo-tree-id7837 . -11) (undo-tree-id7838 . -11) (undo-tree-id7839 . -11) (undo-tree-id7840 . -13) (undo-tree-id7841 . -13) (undo-tree-id7842 . -13) (undo-tree-id7843 . -13) (undo-tree-id7844 . -13) (undo-tree-id7845 . -13) (undo-tree-id7846 . -13) (undo-tree-id7847 . -13) (undo-tree-id7848 . -13) (undo-tree-id7849 . -13) (undo-tree-id7850 . -13) (undo-tree-id7851 . -13) (undo-tree-id7852 . -13) (undo-tree-id7853 . -13) (undo-tree-id7854 . -15) (undo-tree-id7855 . -15) (undo-tree-id7856 . -15) (undo-tree-id7857 . -15) (undo-tree-id7858 . -15) (undo-tree-id7859 . -15) (undo-tree-id7860 . -15) (undo-tree-id7861 . -16) (undo-tree-id7862 . -16) (undo-tree-id7863 . -16) (undo-tree-id7864 . -16) (undo-tree-id7865 . -16) (undo-tree-id7866 . -16) (undo-tree-id7867 . -16) (undo-tree-id7868 . -17) (undo-tree-id7869 . -17) (undo-tree-id7870 . -17) (undo-tree-id7871 . -17) (undo-tree-id7872 . -17) (undo-tree-id7873 . -17) (undo-tree-id7874 . -17) (undo-tree-id7875 . -18) (undo-tree-id7876 . -18) (undo-tree-id7877 . -18) (undo-tree-id7878 . -18) (undo-tree-id7879 . -18) (undo-tree-id7880 . -18) (undo-tree-id7881 . -18) (undo-tree-id7882 . -17) (undo-tree-id7883 . -17) (undo-tree-id7884 . -17) (undo-tree-id7885 . -17) (undo-tree-id7886 . -17) (undo-tree-id7887 . -17) (undo-tree-id7888 . -17) (undo-tree-id7889 . -15) (undo-tree-id7890 . -15) (undo-tree-id7891 . -15) (undo-tree-id7892 . -15) (undo-tree-id7893 . -15) (undo-tree-id7894 . -15) (undo-tree-id7895 . -15) (undo-tree-id7896 . -11) (undo-tree-id7897 . -11) (undo-tree-id7898 . -11) (undo-tree-id7899 . -11) (undo-tree-id7900 . -11) (undo-tree-id7901 . -11) (undo-tree-id7902 . -11) (undo-tree-id7903 . -13) (undo-tree-id7904 . -13) (undo-tree-id7905 . -13) (undo-tree-id7906 . -13) (undo-tree-id7907 . -13) (undo-tree-id7908 . -13) (undo-tree-id7909 . -13) (undo-tree-id7910 . -13) (undo-tree-id7911 . -13) (undo-tree-id7912 . -13) (undo-tree-id7913 . -13) (undo-tree-id7914 . -13) (undo-tree-id7915 . -13) (undo-tree-id7916 . -13) (undo-tree-id7917 . -13) (undo-tree-id7918 . -13) (undo-tree-id7919 . -13) (undo-tree-id7920 . -13) (undo-tree-id7921 . -13) (undo-tree-id7922 . -13) (undo-tree-id7923 . -13) (undo-tree-id7924 . -13) (undo-tree-id7925 . -13) (undo-tree-id7926 . -13) (undo-tree-id7927 . -13) (undo-tree-id7928 . -13) (undo-tree-id7929 . -13) (undo-tree-id7930 . -13) (undo-tree-id7931 . -13) (undo-tree-id7932 . -13) (undo-tree-id7933 . -13) (undo-tree-id7934 . -13) (undo-tree-id7935 . -13) (undo-tree-id7936 . -13) (undo-tree-id7937 . -13) (undo-tree-id7938 . -13) (undo-tree-id7939 . -13) (undo-tree-id7940 . -13) (undo-tree-id7941 . -13) (undo-tree-id7942 . -13) (undo-tree-id7943 . -13) (undo-tree-id7944 . -13) (undo-tree-id7945 . -13) (undo-tree-id7946 . -13) (undo-tree-id7947 . -13) (undo-tree-id7948 . -13) (undo-tree-id7949 . -13) (undo-tree-id7950 . -13) (undo-tree-id7951 . -13) (undo-tree-id7952 . -13) (undo-tree-id7953 . -13) (undo-tree-id7954 . -13) (undo-tree-id7955 . -13) (undo-tree-id7956 . -13) (undo-tree-id7957 . -13) (undo-tree-id7958 . -13) (undo-tree-id7959 . -13) (undo-tree-id7960 . -14) (undo-tree-id7961 . -14) (undo-tree-id7962 . -14) (undo-tree-id7963 . -14) (undo-tree-id7964 . -14) (undo-tree-id7965 . -14) (undo-tree-id7966 . -14) (undo-tree-id7967 . -13) (undo-tree-id7968 . -13) (undo-tree-id7969 . -13) (undo-tree-id7970 . -13) (undo-tree-id7971 . -13) (undo-tree-id7972 . -13) (undo-tree-id7973 . -13) (undo-tree-id7974 . -13) (undo-tree-id7975 . -13) (undo-tree-id7976 . -13) (undo-tree-id7977 . -13) (undo-tree-id7978 . -13) (undo-tree-id7979 . -13) (undo-tree-id7980 . -13) (undo-tree-id7981 . -13) (undo-tree-id7982 . -15) (undo-tree-id7983 . -15) (undo-tree-id7984 . -15) (undo-tree-id7985 . -15) (undo-tree-id7986 . -15) (undo-tree-id7987 . -15) (undo-tree-id7988 . -15) (undo-tree-id7989 . -17) (undo-tree-id7990 . -17) (undo-tree-id7991 . -17) (undo-tree-id7992 . -17) (undo-tree-id7993 . -17) (undo-tree-id7994 . -17) (undo-tree-id7995 . -17) (undo-tree-id7996 . -18) (undo-tree-id7997 . -18) (undo-tree-id7998 . -18) (undo-tree-id7999 . -18) (undo-tree-id8000 . -18) (undo-tree-id8001 . -18) (undo-tree-id8002 . -18) (undo-tree-id8003 . -18) (undo-tree-id8004 . -18) (undo-tree-id8005 . -18) (undo-tree-id8006 . -18) (undo-tree-id8007 . -18) (undo-tree-id8008 . -10) (undo-tree-id8009 . -10) (undo-tree-id8010 . -10) (undo-tree-id8011 . -10) (undo-tree-id8012 . -10) (undo-tree-id8013 . -10) (undo-tree-id8014 . -10) (undo-tree-id8015 . -11) (undo-tree-id8016 . -11) (undo-tree-id8017 . -11) (undo-tree-id8018 . -11) (undo-tree-id8019 . -11) (undo-tree-id8020 . -11) (undo-tree-id8021 . -11) (undo-tree-id8022 . -15) (undo-tree-id8023 . -15) (undo-tree-id8024 . -15) (undo-tree-id8025 . -15) (undo-tree-id8026 . -15) (undo-tree-id8027 . -15) (undo-tree-id8028 . -15) (undo-tree-id8029 . -15) (undo-tree-id8030 . -15) (undo-tree-id8031 . -15) (undo-tree-id8032 . -15) (undo-tree-id8033 . -15) (undo-tree-id8034 . -15) (undo-tree-id8035 . -15) (undo-tree-id8036 . -15) (undo-tree-id8037 . -15) (undo-tree-id8038 . -15) (undo-tree-id8039 . -15) (undo-tree-id8040 . -15) (undo-tree-id8041 . -15) (undo-tree-id8042 . -15) (undo-tree-id8043 . -15) (undo-tree-id8044 . -15) (undo-tree-id8045 . -15) (undo-tree-id8046 . -15) (undo-tree-id8047 . -15) (undo-tree-id8048 . -15) (undo-tree-id8049 . -15) (undo-tree-id8050 . -15) (undo-tree-id8051 . -15) (undo-tree-id8052 . -15) (undo-tree-id8053 . -15) (undo-tree-id8054 . -15) (undo-tree-id8055 . -15) (undo-tree-id8056 . -15) (undo-tree-id8057 . -8) (undo-tree-id8058 . -8) (undo-tree-id8059 . -8) (undo-tree-id8060 . -8) (undo-tree-id8061 . -8) (undo-tree-id8062 . -8) (undo-tree-id8063 . -8) (undo-tree-id8064 . -8) (undo-tree-id8065 . -8) (undo-tree-id8066 . -8) (undo-tree-id8067 . -8) (undo-tree-id8068 . -8) (undo-tree-id8069 . -7) (undo-tree-id8070 . -11) (undo-tree-id8071 . -18) (undo-tree-id8072 . -18) (undo-tree-id8073 . -18) (undo-tree-id8074 . -18) (undo-tree-id8075 . -18) (undo-tree-id8076 . -18) (undo-tree-id8077 . -18) (undo-tree-id8078 . -10) (undo-tree-id8079 . -10) (undo-tree-id8080 . -10) (undo-tree-id8081 . -10) (undo-tree-id8082 . -10) (undo-tree-id8083 . -10) (undo-tree-id8084 . -10) (undo-tree-id8085 . -11) (undo-tree-id8086 . -10) (undo-tree-id8087 . -10) (undo-tree-id8088 . -10) (undo-tree-id8089 . -10) (undo-tree-id8090 . -10) (undo-tree-id8091 . -10) (undo-tree-id8092 . -10) (undo-tree-id8093 . -10) (undo-tree-id8094 . -11) (undo-tree-id8095 . -11) (undo-tree-id8096 . -11) (undo-tree-id8097 . -11) (undo-tree-id8098 . -11) (undo-tree-id8099 . -11) (undo-tree-id8100 . -11) (undo-tree-id8101 . -12) (undo-tree-id8102 . -12) (undo-tree-id8103 . -12) (undo-tree-id8104 . -12) (undo-tree-id8105 . -12) (undo-tree-id8106 . -12) (undo-tree-id8107 . 8) (undo-tree-id8108 . -13) (undo-tree-id8109 . 7) (undo-tree-id8110 . -14) (undo-tree-id8111 . -12) (undo-tree-id8112 . -12) (undo-tree-id8113 . -12) (undo-tree-id8114 . -12) (undo-tree-id8115 . -12) (undo-tree-id8116 . -12) (undo-tree-id8117 . -12) (undo-tree-id8118 . -12) (undo-tree-id8119 . -12) 4996) nil (25731 64909 600119 67000) 0 nil])
([nil nil ((#("         (list x y)
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 3 5 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 5 7 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 8 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 8 9 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 9 10 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 10 18 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 18 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 19 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4984) (undo-tree-id7734 . -12) (undo-tree-id7735 . -7) (undo-tree-id7736 . 20) (undo-tree-id7737 . -9) (undo-tree-id7738 . -8) (undo-tree-id7739 . -7) (undo-tree-id7740 . -16) (undo-tree-id7741 . -19) (undo-tree-id7742 . -12) (undo-tree-id7743 . -12) (undo-tree-id7744 . -12) (undo-tree-id7745 . -12) (undo-tree-id7746 . -12) (undo-tree-id7747 . -12) (undo-tree-id7748 . -12) (undo-tree-id7749 . -12) (undo-tree-id7750 . -12) (undo-tree-id7751 . -12) (undo-tree-id7752 . -12) (undo-tree-id7753 . -12) (undo-tree-id7754 . -12) (undo-tree-id7755 . -12) (undo-tree-id7756 . -12) (undo-tree-id7757 . -12) 4996) nil (25731 64909 599090 747000) 0 nil])
([nil nil ((#("         (list y x)
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 9 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 9 10 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 10 18 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 18 19 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 19 20 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("               " 0 6 (face org-indent) 6 15 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4984) (undo-tree-id7619 . -9) (undo-tree-id7620 . -12) (undo-tree-id7621 . 20) (undo-tree-id7622 . -9) (undo-tree-id7623 . -10) (undo-tree-id7624 . -10) (undo-tree-id7625 . -10) (undo-tree-id7626 . -10) (undo-tree-id7627 . -10) (undo-tree-id7628 . -10) (undo-tree-id7629 . -10) (undo-tree-id7630 . -15) (undo-tree-id7631 . -15) (undo-tree-id7632 . -15) (undo-tree-id7633 . -15) (undo-tree-id7634 . -15) (undo-tree-id7635 . -15) (undo-tree-id7636 . -15) (undo-tree-id7637 . -17) (undo-tree-id7638 . -17) (undo-tree-id7639 . -17) (undo-tree-id7640 . -17) (undo-tree-id7641 . -17) (undo-tree-id7642 . -17) (undo-tree-id7643 . -17) (undo-tree-id7644 . -18) (undo-tree-id7645 . -18) (undo-tree-id7646 . -18) (undo-tree-id7647 . -18) (undo-tree-id7648 . -18) (undo-tree-id7649 . -18) (undo-tree-id7650 . -18) (undo-tree-id7651 . -18) (undo-tree-id7652 . -18) (undo-tree-id7653 . -18) (undo-tree-id7654 . -18) (undo-tree-id7655 . -18) (undo-tree-id7656 . -18) (undo-tree-id7657 . -18) (undo-tree-id7658 . -18) (undo-tree-id7659 . -17) (undo-tree-id7660 . -17) (undo-tree-id7661 . -17) (undo-tree-id7662 . -17) (undo-tree-id7663 . -17) (undo-tree-id7664 . -17) (undo-tree-id7665 . -17) (undo-tree-id7666 . -17) (undo-tree-id7667 . -17) (undo-tree-id7668 . -17) (undo-tree-id7669 . -17) (undo-tree-id7670 . -17) (undo-tree-id7671 . -17) (undo-tree-id7672 . -17) (undo-tree-id7673 . -17) (undo-tree-id7674 . -18) (undo-tree-id7675 . -18) (undo-tree-id7676 . -18) (undo-tree-id7677 . -18) (undo-tree-id7678 . -18) (undo-tree-id7679 . -18) (undo-tree-id7680 . -18) (undo-tree-id7681 . -18) (undo-tree-id7682 . -17) (undo-tree-id7683 . -17) (undo-tree-id7684 . -17) (undo-tree-id7685 . -17) (undo-tree-id7686 . -17) (undo-tree-id7687 . -17) (undo-tree-id7688 . -17) (undo-tree-id7689 . -17) (undo-tree-id7690 . -17) (undo-tree-id7691 . -17) (undo-tree-id7692 . -17) (undo-tree-id7693 . -17) (undo-tree-id7694 . -17) (undo-tree-id7695 . -17) (undo-tree-id7696 . -17) (undo-tree-id7697 . -18) (undo-tree-id7698 . -18) (undo-tree-id7699 . -18) (undo-tree-id7700 . -18) (undo-tree-id7701 . -18) (undo-tree-id7702 . -18) (undo-tree-id7703 . -18) (undo-tree-id7704 . -19) (undo-tree-id7705 . -19) (undo-tree-id7706 . -19) (undo-tree-id7707 . -19) (undo-tree-id7708 . -19) (undo-tree-id7709 . -19) (undo-tree-id7710 . -19) (undo-tree-id7711 . -19) (undo-tree-id7712 . 1) (undo-tree-id7713 . -20) (undo-tree-id7714 . -8) (undo-tree-id7715 . -7) (undo-tree-id7716 . -16) (undo-tree-id7717 . -19) (undo-tree-id7718 . -12) (undo-tree-id7719 . -12) (undo-tree-id7720 . -12) (undo-tree-id7721 . -12) (undo-tree-id7722 . -12) (undo-tree-id7723 . -12) (undo-tree-id7724 . -12) (undo-tree-id7725 . -12) (undo-tree-id7726 . -12) (undo-tree-id7727 . -12) (undo-tree-id7728 . -12) (undo-tree-id7729 . -12) (undo-tree-id7730 . -12) (undo-tree-id7731 . -12) (undo-tree-id7732 . -12) (undo-tree-id7733 . -12) 4996) nil (25731 64909 598894 663000) 0 nil])
([nil nil ((#("    " 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 3 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 4986) (undo-tree-id7541 . -4) (undo-tree-id7542 . -4) (undo-tree-id7543 . -4) (undo-tree-id7544 . -4) (undo-tree-id7545 . -4) (undo-tree-id7546 . -4) (undo-tree-id7547 . -4) (undo-tree-id7548 . -4) (undo-tree-id7549 . -4) (undo-tree-id7550 . -4) (undo-tree-id7551 . -4) (undo-tree-id7552 . -4) (undo-tree-id7553 . -4) (undo-tree-id7554 . -4) (undo-tree-id7555 . -4) (undo-tree-id7556 . -4) (undo-tree-id7557 . -4) (undo-tree-id7558 . -4) (undo-tree-id7559 . -4) (undo-tree-id7560 . -4) (undo-tree-id7561 . -4) (undo-tree-id7562 . -4) (undo-tree-id7563 . -4) (undo-tree-id7564 . -4) (undo-tree-id7565 . -4) (undo-tree-id7566 . -4) (undo-tree-id7567 . -4) (undo-tree-id7568 . -4) (undo-tree-id7569 . -4) (undo-tree-id7570 . -4) (undo-tree-id7571 . -4) (undo-tree-id7572 . -4) (undo-tree-id7573 . -4) (undo-tree-id7574 . -4) (undo-tree-id7575 . -4) (undo-tree-id7576 . -4) (undo-tree-id7577 . -4) (undo-tree-id7578 . -4) (undo-tree-id7579 . -4) (undo-tree-id7580 . -4) (undo-tree-id7581 . -4) (undo-tree-id7582 . -4) (undo-tree-id7583 . -4) (undo-tree-id7584 . -4) (undo-tree-id7585 . -4) (undo-tree-id7586 . -4) (undo-tree-id7587 . -4) (undo-tree-id7588 . -4) (undo-tree-id7589 . -4) (undo-tree-id7590 . -4) (undo-tree-id7591 . -4) (undo-tree-id7592 . -4) (undo-tree-id7593 . -4) (undo-tree-id7594 . -4) (undo-tree-id7595 . -4) (undo-tree-id7596 . -4) (undo-tree-id7597 . -4) (undo-tree-id7598 . -4) (undo-tree-id7599 . -4) (undo-tree-id7600 . -4) (undo-tree-id7601 . -4) (undo-tree-id7602 . -4) (undo-tree-id7603 . -3) (undo-tree-id7604 . -3) (undo-tree-id7605 . -3) (undo-tree-id7606 . -3) (undo-tree-id7607 . -3) (undo-tree-id7608 . -3) (undo-tree-id7609 . -3) (undo-tree-id7610 . -3) (undo-tree-id7611 . -3) (undo-tree-id7612 . -3) (undo-tree-id7613 . -3) (undo-tree-id7614 . -3) (undo-tree-id7615 . -3) (undo-tree-id7616 . -3) (undo-tree-id7617 . -3) (undo-tree-id7618 . -3) 4984) nil (25731 64909 598817 397000) 0 nil])
([nil nil ((5009 . 5011) 4984) nil (25731 64909 598610 506000) 0 nil])
([nil nil ((5029 . 5031) 4984) nil (25731 64909 600751 259000) 0 nil])
([nil nil ((5048 . 5050)) ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("              " 0 6 (face org-indent) 6 14 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5048)) (25731 64910 375809 990000) 0 nil])
([nil nil ((#("x" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5018)) nil (25731 64985 958774 845000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5018)) nil (25731 64985 958773 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5019 . 5020) (nil fontified nil 5019 . 5020) (5019 . 5020) 5018) nil (25731 64985 958772 741000) 0 nil])
([nil nil ((5019 . 5021)) nil (25731 64985 958771 383000) 0 nil])
([nil nil ((5020 . 5021)) nil (25731 64985 958770 619000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5021) (undo-tree-id8547 . 1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1)) nil (25731 65009 99281 175000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5021) (undo-tree-id8562 . 1) (undo-tree-id8563 . -1)) ((5021 . 5022) (t 25731 64986 26340 954000)) (25731 65010 62422 149000) 0 nil])
([nil nil ((5075 . 5079) (t 25731 64986 26340 954000)) nil (25731 65111 274912 60000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5143 . 5144) (nil fontified nil 5134 . 5144) (nil fontified nil 5079 . 5134) (5079 . 5144) 5078) nil (25731 65111 274911 153000) 0 nil])
([nil nil ((5133 . 5134) (#("
" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . -5133) (undo-tree-id8713 . -1) 5079) nil (25731 65111 274909 705000) 0 nil])
([nil nil ((#("THELisp: A Gentle Introduction to Symbolic Computation" 0 54 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . 5079) (undo-tree-id8612 . -53) (undo-tree-id8613 . -53) (undo-tree-id8614 . -53) (undo-tree-id8615 . -54) (undo-tree-id8616 . -9) (undo-tree-id8617 . -9) (undo-tree-id8618 . -9) (undo-tree-id8619 . -9) (undo-tree-id8620 . -9) (undo-tree-id8621 . -9) (undo-tree-id8622 . -9) (undo-tree-id8623 . -7) (undo-tree-id8624 . -7) (undo-tree-id8625 . -7) (undo-tree-id8626 . -7) (undo-tree-id8627 . -7) (undo-tree-id8628 . -7) (undo-tree-id8629 . -7) (undo-tree-id8630 . -54) (undo-tree-id8631 . -54) (undo-tree-id8632 . -54) (undo-tree-id8633 . -54) (undo-tree-id8634 . -54) (undo-tree-id8635 . -54) (undo-tree-id8636 . -54) (undo-tree-id8637 . -54) (undo-tree-id8638 . -43) (undo-tree-id8639 . -43) (undo-tree-id8640 . -43) (undo-tree-id8641 . -43) (undo-tree-id8642 . -43) (undo-tree-id8643 . -43) (undo-tree-id8644 . -43) (undo-tree-id8645 . -34) (undo-tree-id8646 . -34) (undo-tree-id8647 . -34) (undo-tree-id8648 . -34) (undo-tree-id8649 . -34) (undo-tree-id8650 . -34) (undo-tree-id8651 . -34) (undo-tree-id8652 . -31) (undo-tree-id8653 . -31) (undo-tree-id8654 . -31) (undo-tree-id8655 . -31) (undo-tree-id8656 . -31) (undo-tree-id8657 . -31) (undo-tree-id8658 . -31) (undo-tree-id8659 . -18) (undo-tree-id8660 . -18) (undo-tree-id8661 . -18) (undo-tree-id8662 . -18) (undo-tree-id8663 . -18) (undo-tree-id8664 . -18) (undo-tree-id8665 . -18) (undo-tree-id8666 . -11) (undo-tree-id8667 . -11) (undo-tree-id8668 . -11) (undo-tree-id8669 . -11) (undo-tree-id8670 . -11) (undo-tree-id8671 . -11) (undo-tree-id8672 . -11) (undo-tree-id8673 . -9) (undo-tree-id8674 . -9) (undo-tree-id8675 . -9) (undo-tree-id8676 . -9) (undo-tree-id8677 . -9) (undo-tree-id8678 . -9) (undo-tree-id8679 . -9) (undo-tree-id8680 . 54) (undo-tree-id8681 . -7) (undo-tree-id8682 . -7) (undo-tree-id8683 . -7) (undo-tree-id8684 . -7) (undo-tree-id8685 . -7) (undo-tree-id8686 . -7) (undo-tree-id8687 . -7) (undo-tree-id8688 . -7) (undo-tree-id8689 . -54) (undo-tree-id8690 . -53) (undo-tree-id8691 . -6) (undo-tree-id8692 . -6) (undo-tree-id8693 . -6) (undo-tree-id8694 . -6) (undo-tree-id8695 . -6) (undo-tree-id8696 . -6) (undo-tree-id8697 . -6) (undo-tree-id8698 . -43) (undo-tree-id8699 . -43) (undo-tree-id8700 . -43) (undo-tree-id8701 . -43) (undo-tree-id8702 . -43) (undo-tree-id8703 . -43) (undo-tree-id8704 . -43) (undo-tree-id8705 . -53) (undo-tree-id8706 . -53) (undo-tree-id8707 . -53) (undo-tree-id8708 . -53) (undo-tree-id8709 . -53) (undo-tree-id8710 . -53) (undo-tree-id8711 . -53) (undo-tree-id8712 . -53) 5132) nil (25731 65111 274905 229000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . 5079) (undo-tree-id8611 . 1)) nil (25731 65111 274840 902000) 0 nil])
([nil nil ((5080 . 5083) (#("M" 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . -5080) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (#("E" 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . -5081) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) 5082 (5080 . 5082) (#("h" 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . -5080) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) 5081 (5079 . 5081)) nil (25731 65111 274836 166000) 0 nil])
([nil nil ((5094 . 5096) (5093 . 5094) 5082) nil (25731 65111 274183 26000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5096) (undo-tree-id8567 . 1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1)) nil (25731 65111 274181 814000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5096) (undo-tree-id8566 . 1)) nil (25731 65111 274178 844000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5096) (undo-tree-id8565 . 1)) nil (25731 65111 274176 180000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5096) (undo-tree-id8564 . 1)) nil (25731 65111 274170 124000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5213 . 5214) (nil fontified nil 5186 . 5214) (nil fontified nil 5158 . 5186) (nil fontified nil 5116 . 5158) (nil fontified nil 5095 . 5116) (5095 . 5214) (t 25731 65111 337257 323000)) nil (25731 65165 921169 871000) 0 nil])
([nil nil ((5215 . 5216) (5214 . 5215) 5213) nil (25731 65165 921168 182000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5094 . 5095) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -5131) (5094 . 5132)) nil (25731 65165 921167 128000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5252 . 5253) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -5289) (5252 . 5290)) nil (25731 65165 921165 540000) 0 nil])
([nil nil ((5255 . 5258) (#("BEGIN" 0 5 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5255) (undo-tree-id8735 . -4) (undo-tree-id8736 . -4) (undo-tree-id8737 . -4) (undo-tree-id8738 . -5) (undo-tree-id8739 . -4) (undo-tree-id8740 . -4) (undo-tree-id8741 . -4) (undo-tree-id8742 . -4) (undo-tree-id8743 . -4) (undo-tree-id8744 . -4) (undo-tree-id8745 . -4) (undo-tree-id8746 . -4) (undo-tree-id8747 . -4) 5259) nil (25731 65165 921163 286000) 0 nil])
([nil nil ((#("lisp :results output " 0 5 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil src-block t font-lock-multiline t face org-block-end-line) 5 13 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil src-block t font-lock-multiline t face org-block-end-line) 13 21 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) src-block t font-lock-multiline t face org-block-end-line)) . 5266) (undo-tree-id8714 . -20) (undo-tree-id8715 . -20) (undo-tree-id8716 . -20) (undo-tree-id8717 . -20) (undo-tree-id8718 . -20) (undo-tree-id8719 . -20) (undo-tree-id8720 . -20) (undo-tree-id8721 . -14) (undo-tree-id8722 . -14) (undo-tree-id8723 . -14) (undo-tree-id8724 . -14) (undo-tree-id8725 . -14) (undo-tree-id8726 . -14) (undo-tree-id8727 . -14) (undo-tree-id8728 . -5) (undo-tree-id8729 . -5) (undo-tree-id8730 . -5) (undo-tree-id8731 . -5) (undo-tree-id8732 . -5) (undo-tree-id8733 . -5) (undo-tree-id8734 . -5)) nil (25731 65165 921148 395000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5252) (t 25731 65165 985168 920000)) nil (25731 65168 113309 455000) 0 nil])
([nil nil ((5132 . 5134) (5153 . 5155) (5195 . 5197) (5223 . 5225) 5132 (t 25731 65168 125072 279000)) nil (25731 65176 539934 629000) 0 nil])
([nil nil ((5157 . 5159) 5132) nil (25731 65176 539932 609000) 0 nil])
([nil nil ((5203 . 5211) 5132) nil (25731 65176 539930 368000) 0 nil])
([nil nil ((5241 . 5249) 5132) nil (25731 65176 539924 922000) 0 nil])
([nil nil ((5178 . 5179) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5178) (t 25731 65176 556730 425000)) nil (25731 65424 592767 865000) 0 nil])
([nil nil ((5220 . 5221) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5220) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1)) nil (25731 65424 592766 390000) 0 nil])
([nil nil ((5258 . 5259) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5258)) nil (25731 65424 592760 686000) 0 nil])
([nil nil ((5258 . 5259) (#("'" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5258)) nil (25731 65424 592759 611000) 0 nil])
([nil nil ((5292 . 5294) (5291 . 5292) 5290) nil (25731 65424 592758 792000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5705 . 5706) (nil fontified nil 5650 . 5706) (nil fontified nil 5570 . 5650) (nil fontified nil 5504 . 5570) (nil fontified nil 5484 . 5504) (nil fontified nil 5464 . 5484) (nil fontified nil 5450 . 5464) (nil fontified nil 5431 . 5450) (nil fontified nil 5367 . 5431) (nil fontified nil 5293 . 5367) (5293 . 5706)) nil (25731 65424 592757 632000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t src-block t face org-block-end-line)) . 5707) (undo-tree-id8810 . 1)) nil (25731 65424 592755 551000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 5293)) nil (25731 65424 592754 62000) 0 nil])
([nil nil ((5343 . 5344) (#("‘‘" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5343) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -2) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) 5344) nil (25731 65424 592752 846000) 0 nil])
([nil nil ((5346 . 5347) (#("’’" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5346) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -2) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) 5347) nil (25731 65424 592740 989000) 0 nil])
([nil nil ((5348 . 5349) (#("‘‘" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5348) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -2) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) 5349) nil (25731 65424 592351 447000) 0 nil])
([nil nil ((5351 . 5352) (#("’’" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5351) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -2) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) 5352) nil (25731 65424 592342 78000) 0 nil])
([nil nil ((5356 . 5357) (#("‘" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5356)) nil (25731 65424 592332 267000) 0 nil])
([nil nil ((#("‘" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5357) (undo-tree-id8756 . 1)) nil (25731 65424 592331 36000) 0 nil])
([nil nil ((#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5359)) nil (25731 65424 592329 300000) 0 nil])
([nil nil ((#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 5358) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1)) nil (25731 65424 592327 198000) 0 nil])
([nil nil ((5358 . 5359)) nil (25731 65424 592309 329000) 0 nil])
([nil nil ((#("For each of the following calls to COMPARE, write \"1,\" \"2,\" or \"3\"
to indicate which clause of the COND will have a predicate that
evaluates to true.
(compare 9 1)
(compare (+ 2 2) 5)
(compare 6 (* 2 3))
COND and IF are similar functions. COND may appear more versatile
since it accepts any number of clauses, but there is a way to do the same thing
with nested IFs. This is explained later in the chapter.

** LOOPS  

** FUNCTIONS

** MACROS
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 66 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 66 67 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 67 131 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 131 150 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 150 164 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 164 184 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 184 204 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 204 270 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 270 350 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 350 405 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 405 406 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t rear-nonsticky t) 406 407 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 407 408 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t src-block t) 408 409 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) font-lock-fontified t face org-hide keymap (keymap)) 409 410 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) font-lock-fontified t composition (1 1 [9679]) keymap (keymap) face org-level-2) 410 411 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) font-lock-fontified t keymap (keymap) face org-level-2) 411 418 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2) 418 419 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent))) 419 420 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 420 421 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-hide keymap (keymap)) 421 422 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) composition (1 1 [9679]) keymap (keymap) face org-level-2) 422 423 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) keymap (keymap) face org-level-2) 423 432 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2) 432 433 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent))) 433 434 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 434 435 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-hide keymap (keymap)) 435 436 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) composition (1 1 [9679]) keymap (keymap) face org-level-2) 436 437 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) keymap (keymap) face org-level-2) 437 443 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2) 443 444 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)))) . 5293) (undo-tree-id8852 . -163) (undo-tree-id8853 . -442) (undo-tree-id8854 . -58) (undo-tree-id8855 . 385) (undo-tree-id8856 . 378) (undo-tree-id8857 . -58) (undo-tree-id8858 . -58) (undo-tree-id8859 . -408) (undo-tree-id8860 . -50) (undo-tree-id8861 . -50) (undo-tree-id8862 . -50) (undo-tree-id8863 . -50) (undo-tree-id8864 . -50) (undo-tree-id8865 . -50) (undo-tree-id8866 . -50) (undo-tree-id8867 . -50) (undo-tree-id8868 . -53) (undo-tree-id8869 . -53) (undo-tree-id8870 . -53) (undo-tree-id8871 . -53) (undo-tree-id8872 . -53) (undo-tree-id8873 . -53) (undo-tree-id8874 . -53) (undo-tree-id8875 . -55) (undo-tree-id8876 . -55) (undo-tree-id8877 . -55) (undo-tree-id8878 . -55) (undo-tree-id8879 . -55) (undo-tree-id8880 . -55) (undo-tree-id8881 . -55) (undo-tree-id8882 . -58) (undo-tree-id8883 . -58) (undo-tree-id8884 . -58) (undo-tree-id8885 . -58) (undo-tree-id8886 . -58) (undo-tree-id8887 . -58) (undo-tree-id8888 . -58) (undo-tree-id8889 . -65) (undo-tree-id8890 . -65) (undo-tree-id8891 . -65) (undo-tree-id8892 . -65) (undo-tree-id8893 . -65) (undo-tree-id8894 . -65) (undo-tree-id8895 . -65) (undo-tree-id8896 . -65) (undo-tree-id8897 . -65) (undo-tree-id8898 . -65) (undo-tree-id8899 . -65) (undo-tree-id8900 . -65) (undo-tree-id8901 . -65) (undo-tree-id8902 . -65) (undo-tree-id8903 . -65) (undo-tree-id8904 . -65) (undo-tree-id8905 . -65) (undo-tree-id8906 . -65) (undo-tree-id8907 . -65) (undo-tree-id8908 . -65) (undo-tree-id8909 . -65) (undo-tree-id8910 . -65) (undo-tree-id8911 . -65) (undo-tree-id8912 . -65) (undo-tree-id8913 . -65) (undo-tree-id8914 . -65) (undo-tree-id8915 . -65) (undo-tree-id8916 . -65) (undo-tree-id8917 . -65) (undo-tree-id8918 . -67) (undo-tree-id8919 . -67) (undo-tree-id8920 . -67) (undo-tree-id8921 . -67) (undo-tree-id8922 . -67) (undo-tree-id8923 . -67) (undo-tree-id8924 . -67) (undo-tree-id8925 . -67) (undo-tree-id8926 . -67) (undo-tree-id8927 . -67) (undo-tree-id8928 . -67) (undo-tree-id8929 . -67) (undo-tree-id8930 . -67) (undo-tree-id8931 . -67) (undo-tree-id8932 . -67) (undo-tree-id8933 . -67) (undo-tree-id8934 . -67) (undo-tree-id8935 . -162) (undo-tree-id8936 . -162) (undo-tree-id8937 . -67) (undo-tree-id8938 . -67) (undo-tree-id8939 . -67) (undo-tree-id8940 . -67) (undo-tree-id8941 . -67) (undo-tree-id8942 . -67) (undo-tree-id8943 . -67) (undo-tree-id8944 . -67) (undo-tree-id8945 . -67) (undo-tree-id8946 . -67) (undo-tree-id8947 . -67) (undo-tree-id8948 . -67) (undo-tree-id8949 . -67) (undo-tree-id8950 . -67) (undo-tree-id8951 . -131) (undo-tree-id8952 . -150) (undo-tree-id8953 . -150) (undo-tree-id8954 . -150) (undo-tree-id8955 . -150) (undo-tree-id8956 . -150) (undo-tree-id8957 . -150) (undo-tree-id8958 . -150) (undo-tree-id8959 . -150) (undo-tree-id8960 . -150) (undo-tree-id8961 . -150) (undo-tree-id8962 . -150) (undo-tree-id8963 . -150) (undo-tree-id8964 . -150) (undo-tree-id8965 . -150) (undo-tree-id8966 . -150) (undo-tree-id8967 . -150) (undo-tree-id8968 . -150) (undo-tree-id8969 . -150) (undo-tree-id8970 . -150) (undo-tree-id8971 . -150) (undo-tree-id8972 . -150) (undo-tree-id8973 . -150) (undo-tree-id8974 . -150) (undo-tree-id8975 . -150) (undo-tree-id8976 . -150) (undo-tree-id8977 . -150) (undo-tree-id8978 . -150) (undo-tree-id8979 . -150) (undo-tree-id8980 . -150) (undo-tree-id8981 . -150) (undo-tree-id8982 . -150) (undo-tree-id8983 . -163) (undo-tree-id8984 . -163) (undo-tree-id8985 . -163) (undo-tree-id8986 . -163) (undo-tree-id8987 . -163) (undo-tree-id8988 . -163) (undo-tree-id8989 . -163) (undo-tree-id8990 . -162) (undo-tree-id8991 . -162) (undo-tree-id8992 . -162) (undo-tree-id8993 . -162) (undo-tree-id8994 . -162) (undo-tree-id8995 . -162) (undo-tree-id8996 . -162) (undo-tree-id8997 . -162) (undo-tree-id8998 . -162) (undo-tree-id8999 . 282) (undo-tree-id9000 . -163) (undo-tree-id9001 . 294) (undo-tree-id9002 . -151) (undo-tree-id9003 . -162) (undo-tree-id9004 . -162) (undo-tree-id9005 . -162) (undo-tree-id9006 . -162) (undo-tree-id9007 . -162) (undo-tree-id9008 . -162) (undo-tree-id9009 . -162) (undo-tree-id9010 . -162) (undo-tree-id9011 . -162) (undo-tree-id9012 . -162) (undo-tree-id9013 . -162) (undo-tree-id9014 . -162) (undo-tree-id9015 . -162) (undo-tree-id9016 . -162) (undo-tree-id9017 . -162) (undo-tree-id9018 . -162) (undo-tree-id9019 . -162) (undo-tree-id9020 . -162) (undo-tree-id9021 . -162) (undo-tree-id9022 . -162) (undo-tree-id9023 . -162) (undo-tree-id9024 . -162) (undo-tree-id9025 . -162) (undo-tree-id9026 . -162) (undo-tree-id9027 . -162) (undo-tree-id9028 . -162) (undo-tree-id9029 . -162) (undo-tree-id9030 . -162) (undo-tree-id9031 . -162) (undo-tree-id9032 . -162) 5455 (t 25731 65424 610295 293000)) nil (25732 30 200463 870000) 0 nil])
([nil nil ((#("Macros allow us to define and use new language constructs, extend the syntax and semantics of the language itself.
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 1 12 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 12 115 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5293) (undo-tree-id9033 . 115) (undo-tree-id9034 . 115) (undo-tree-id9035 . -12) (undo-tree-id9036 . -12) (undo-tree-id9037 . -12) (undo-tree-id9038 . -12) (undo-tree-id9039 . -12) (undo-tree-id9040 . -12) (undo-tree-id9041 . -12) (undo-tree-id9042 . -12) (undo-tree-id9043 . -12) (undo-tree-id9044 . -12) (undo-tree-id9045 . -12) (undo-tree-id9046 . -12) (undo-tree-id9047 . -12) (undo-tree-id9048 . -12) (undo-tree-id9049 . -12) (undo-tree-id9050 . -12) (undo-tree-id9051 . -12) (undo-tree-id9052 . -12) (undo-tree-id9053 . -12) (undo-tree-id9054 . -12) (undo-tree-id9055 . -12) (undo-tree-id9056 . -12) (undo-tree-id9057 . -12) (undo-tree-id9058 . -12) (undo-tree-id9059 . -12) (undo-tree-id9060 . -12) (undo-tree-id9061 . -12) (undo-tree-id9062 . -12) (undo-tree-id9063 . -12) (undo-tree-id9064 . -12) (undo-tree-id9065 . -12) (undo-tree-id9066 . -12) (undo-tree-id9067 . -12) (undo-tree-id9068 . -12) (undo-tree-id9069 . -12) (undo-tree-id9070 . -12) (undo-tree-id9071 . -12) (undo-tree-id9072 . -12) (undo-tree-id9073 . -12) (undo-tree-id9074 . -12) (undo-tree-id9075 . -12) (undo-tree-id9076 . -12) (undo-tree-id9077 . -12) (undo-tree-id9078 . -12) (undo-tree-id9079 . -12) (undo-tree-id9080 . -12) 5305) nil (25732 32 678768 659000) 0 nil] [nil nil ((#("Macros allow us to define and use new language constructs, extend the syntax and semantics of the language itself.

#+BEGIN_SRC    lisp :results output 

" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 1 115 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 115 116 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 116 152 (fontified t font-lock-fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face org-block-begin-line) 152 153 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face org-block-begin-line) 153 154 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block))) . 5293) (undo-tree-id8819 . -153) (undo-tree-id8820 . 154) (undo-tree-id8821 . 154) (undo-tree-id8822 . -12) (undo-tree-id8823 . -12) (undo-tree-id8824 . -12) (undo-tree-id8825 . -12) (undo-tree-id8826 . -12) (undo-tree-id8827 . -12) (undo-tree-id8828 . -12) (undo-tree-id8829 . -12) (undo-tree-id8830 . -12) (undo-tree-id8831 . -12) (undo-tree-id8832 . -12) (undo-tree-id8833 . -12) (undo-tree-id8834 . -12) (undo-tree-id8835 . -12) (undo-tree-id8836 . -12) (undo-tree-id8837 . -12) (undo-tree-id8838 . -12) (undo-tree-id8839 . -12) (undo-tree-id8840 . -12) (undo-tree-id8841 . -12) (undo-tree-id8842 . -12) (undo-tree-id8843 . -12) (undo-tree-id8844 . -12) (undo-tree-id8845 . -12) (undo-tree-id8846 . -12) (undo-tree-id8847 . -12) (undo-tree-id8848 . -12) (undo-tree-id8849 . -12) (undo-tree-id8850 . -12) (undo-tree-id8851 . -12) 5305) ((5293 . 5447)) (25732 30 199818 449000) 0 nil])
([nil nil ((5293 . 5294) (t 25732 32 699987 818000) 5293) nil (25732 134 541595 939000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 5372 . 5373) (nil fontified nil 5359 . 5373) (nil fontified nil 5293 . 5359) (5293 . 5373)) nil (25732 134 541594 721000) 0 nil])
([nil nil ((#("  (setf a 7)
  (simple-incf a)
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 2 3 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 3 11 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 11 12 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 12 13 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 13 15 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 15 16 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 16 29 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 29 30 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 30 31 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 5482) (undo-tree-id9298 . -11) (undo-tree-id9299 . -11) (undo-tree-id9300 . -11) (undo-tree-id9301 . -11) (undo-tree-id9302 . -11) (undo-tree-id9303 . -11) (undo-tree-id9304 . -11) (undo-tree-id9305 . 20) (undo-tree-id9306 . -12) (undo-tree-id9307 . 29) (undo-tree-id9308 . -3) (undo-tree-id9309 . -11) (undo-tree-id9310 . -11) (undo-tree-id9311 . -11) (undo-tree-id9312 . -11) (undo-tree-id9313 . -11) (undo-tree-id9314 . -11) (undo-tree-id9315 . -11) (undo-tree-id9316 . -11) (undo-tree-id9317 . -11) 5493) nil (25732 134 541592 554000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 5481) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) 5482) nil (25732 134 541535 766000) 0 nil])
([nil nil ((#("  (defmacro simple-incf (var)
    (list ’setq var (list ’+ var 1)))
  (defun my-abs (x)
    (if (< x 0) (- x) x))
" 0 2 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 2 3 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 3 11 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (font-lock-keyword-face org-block)) 11 12 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 12 23 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (font-lock-function-name-face org-block)) 23 24 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 24 25 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 25 28 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 28 29 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 29 30 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-multiline t face (org-block)) 30 31 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 31 34 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (org-block)) 34 35 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 35 50 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (org-block)) 50 51 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 51 64 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (org-block)) 64 65 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 65 66 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (org-block)) 68 69 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 69 70 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 70 71 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 71 76 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 76 77 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 77 81 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 81 83 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 83 84 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 84 85 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 85 86 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 86 87 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 87 88 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 88 90 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 90 92 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 92 93 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 93 95 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 95 96 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 96 97 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 97 102 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 102 103 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 103 104 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 104 105 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 105 108 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 108 109 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 109 111 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 111 112 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 112 113 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t font-lock-fontified t src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-multiline t face (org-block))) . 5413) (undo-tree-id9193 . -68) (undo-tree-id9194 . -13) (undo-tree-id9195 . -13) (undo-tree-id9196 . -13) (undo-tree-id9197 . -13) (undo-tree-id9198 . -13) (undo-tree-id9199 . -13) (undo-tree-id9200 . -13) (undo-tree-id9201 . -43) (undo-tree-id9202 . -68) (undo-tree-id9203 . -68) (undo-tree-id9204 . -68) (undo-tree-id9205 . -68) (undo-tree-id9206 . -68) (undo-tree-id9207 . -68) (undo-tree-id9208 . -68) (undo-tree-id9209 . -68) (undo-tree-id9210 . -68) (undo-tree-id9211 . -68) (undo-tree-id9212 . -68) (undo-tree-id9213 . -68) (undo-tree-id9214 . -68) (undo-tree-id9215 . -68) (undo-tree-id9216 . -68) (undo-tree-id9217 . -68) (undo-tree-id9218 . -68) (undo-tree-id9219 . -68) (undo-tree-id9220 . -68) (undo-tree-id9221 . -68) (undo-tree-id9222 . -68) (undo-tree-id9223 . -68) (undo-tree-id9224 . -68) (undo-tree-id9225 . -68) (undo-tree-id9226 . -68) (undo-tree-id9227 . -68) (undo-tree-id9228 . -68) (undo-tree-id9229 . -68) (undo-tree-id9230 . -68) (undo-tree-id9231 . -68) (undo-tree-id9232 . -68) (undo-tree-id9233 . -68) (undo-tree-id9234 . -68) (undo-tree-id9235 . -68) (undo-tree-id9236 . -68) (undo-tree-id9237 . -68) (undo-tree-id9238 . -68) (undo-tree-id9239 . -68) (undo-tree-id9240 . -68) (undo-tree-id9241 . -68) (undo-tree-id9242 . -68) (undo-tree-id9243 . -68) (undo-tree-id9244 . -68) (undo-tree-id9245 . -68) (undo-tree-id9246 . -68) (undo-tree-id9247 . -87) (undo-tree-id9248 . -68) (undo-tree-id9249 . -68) (undo-tree-id9250 . -68) (undo-tree-id9251 . -68) (undo-tree-id9252 . -68) (undo-tree-id9253 . -68) (undo-tree-id9254 . -68) (undo-tree-id9255 . -68) (undo-tree-id9256 . -68) (undo-tree-id9257 . -68) 5481) nil (25732 135 248728 555000) 0 nil])
([nil nil ((5495 . 5497) (5485 . 5495) 5412 (5482 . 5485) (5481 . 5482) (5478 . 5481) (5468 . 5478) 5412 (5465 . 5468) (5461 . 5465) (5451 . 5461) 5412 (5448 . 5451) (5440 . 5448) (5434 . 5440) (5412 . 5414) (5430 . 5432) 5412 (5429 . 5430) (5413 . 5429) (5412 . 5413)) nil (25732 223 128678 206000) 0 nil] [nil nil ((#("
#+BEGIN_SRC    lisp :results output 


" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 1 37 (fontified t font-lock-fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face org-block-begin-line) 37 38 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face org-block-begin-line) 38 39 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block)) 39 40 (fontified t font-lock-fontified t src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block))) . 5374) (undo-tree-id9085 . -38) (undo-tree-id9086 . 40) (undo-tree-id9087 . 40) (undo-tree-id9088 . -39) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -14) (undo-tree-id9096 . -14) (undo-tree-id9097 . -14) (undo-tree-id9098 . -14) (undo-tree-id9099 . -14) (undo-tree-id9100 . -14) (undo-tree-id9101 . -14) (undo-tree-id9102 . -38) (undo-tree-id9103 . -38) (undo-tree-id9104 . -38) (undo-tree-id9105 . -38) (undo-tree-id9106 . -38) (undo-tree-id9107 . -38) (undo-tree-id9108 . -38) (undo-tree-id9109 . -39) (undo-tree-id9110 . -39) (undo-tree-id9111 . -39) (undo-tree-id9112 . -39) (undo-tree-id9113 . -39) (undo-tree-id9114 . -39) (undo-tree-id9115 . -39) (undo-tree-id9116 . -39) (undo-tree-id9117 . -39) (undo-tree-id9118 . -39) (undo-tree-id9119 . -39) (undo-tree-id9120 . -39) (undo-tree-id9121 . -39) (undo-tree-id9122 . -39) (undo-tree-id9123 . -39) (undo-tree-id9124 . -39) (undo-tree-id9125 . -39) (undo-tree-id9126 . -39) (undo-tree-id9127 . -39) (undo-tree-id9128 . -39) (undo-tree-id9129 . -39) (undo-tree-id9130 . -39) (undo-tree-id9131 . -39) (undo-tree-id9132 . -39) (undo-tree-id9133 . -39) (undo-tree-id9134 . -39) (undo-tree-id9135 . -39) (undo-tree-id9136 . -39) (undo-tree-id9137 . -39) (undo-tree-id9138 . -1) (undo-tree-id9139 . -39) (undo-tree-id9140 . -39) (undo-tree-id9141 . -39) (undo-tree-id9142 . -39) (undo-tree-id9143 . -39) (undo-tree-id9144 . -39) (undo-tree-id9145 . -39) (undo-tree-id9146 . -39) (undo-tree-id9147 . -39) (undo-tree-id9148 . -39) (undo-tree-id9149 . -39) (undo-tree-id9150 . -39) (undo-tree-id9151 . -39) (undo-tree-id9152 . -39) (undo-tree-id9153 . -39) (undo-tree-id9154 . -39) (undo-tree-id9155 . -39) (undo-tree-id9156 . -39) (undo-tree-id9157 . -39) (undo-tree-id9158 . -39) (undo-tree-id9159 . -39) (undo-tree-id9160 . -39) (undo-tree-id9161 . -39) (undo-tree-id9162 . -39) (undo-tree-id9163 . -1) (undo-tree-id9164 . -39) (undo-tree-id9165 . -39) (undo-tree-id9166 . -39) (undo-tree-id9167 . -39) (undo-tree-id9168 . -39) (undo-tree-id9169 . -39) (undo-tree-id9170 . -39) (undo-tree-id9171 . -39) (undo-tree-id9172 . -39) (undo-tree-id9173 . -39) (undo-tree-id9174 . -1) (undo-tree-id9175 . -39) (undo-tree-id9176 . -39) (undo-tree-id9177 . -39) (undo-tree-id9178 . -39) (undo-tree-id9179 . -39) (undo-tree-id9180 . -39) (undo-tree-id9181 . -39) (undo-tree-id9182 . -39) (undo-tree-id9183 . -39) (undo-tree-id9184 . -39) (undo-tree-id9185 . -39) (undo-tree-id9186 . -39) (undo-tree-id9187 . -39) (undo-tree-id9188 . -39) (undo-tree-id9189 . -39) (undo-tree-id9190 . -39) (undo-tree-id9191 . -39) (undo-tree-id9192 . -39) 5413) ((5374 . 5414)) (25732 134 909283 89000) 0 nil])
([nil nil ((5450 . 5451) (#("y" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5450) (undo-tree-id9419 . -1) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -1) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) (undo-tree-id9436 . -1) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) (undo-tree-id9440 . -1) (undo-tree-id9441 . -1) (undo-tree-id9442 . -1) (undo-tree-id9443 . -1) (undo-tree-id9444 . -1) (undo-tree-id9445 . -1) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) 5451 (5448 . 5451) (5446 . 5448) (#(">" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5446) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . 1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) 5447 (5446 . 5447) (#("x" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5446) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) 5447 (5446 . 5447)) nil (25732 223 128671 868000) 0 nil])
([nil nil ((#("#+END_SRC
" 0 2 (fontified t font-lock-fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-meta-line) 2 9 (fontified t font-lock-fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-meta-line) 9 10 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 5374) (undo-tree-id9081 . 10) (undo-tree-id9082 . 10) (undo-tree-id9083 . -10) (undo-tree-id9084 . -9)) ((5374 . 5384)) (25732 134 541908 503000) 0 nil])
([nil nil ((5450 . 5451) (#("o" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 5450) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) (undo-tree-id9400 . -1) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) (undo-tree-id9403 . -1) (undo-tree-id9404 . -1) (undo-tree-id9405 . -1) (undo-tree-id9406 . -1) (undo-tree-id9407 . -1) (undo-tree-id9408 . -1) (undo-tree-id9409 . -1) (undo-tree-id9410 . -1) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (undo-tree-id9416 . -1) (undo-tree-id9417 . -1) (undo-tree-id9418 . -1)) nil (25732 223 128589 279000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 5293)) ((5293 . 5294)) (25732 134 540137 612000) 0 nil])
([nil nil ((5456 . 5458) (#("@" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5456) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block))) . -5457) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . 1) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) 5458 (5453 . 5458) (#("-" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5453) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -1) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (#("x" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -5454) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) (undo-tree-id9389 . -1) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) (undo-tree-id9392 . -1) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) (undo-tree-id9395 . -1) 5455 (5452 . 5455)) nil (25732 223 128984 817000) 0 nil])
nil
([nil nil ((#("            " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 2 12 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . -5460) (undo-tree-id10819 . -12) (undo-tree-id10820 . -2) (undo-tree-id10821 . -12) (undo-tree-id10822 . -12) (undo-tree-id10823 . -12) (undo-tree-id10824 . -12) (undo-tree-id10825 . -12) (undo-tree-id10826 . -12) (undo-tree-id10827 . -12) (undo-tree-id10828 . -12) (undo-tree-id10829 . -12) 5472 (5462 . 5472) 5412 (5459 . 5462) 5444) nil (25732 365 124721 469000) 0 nil] [nil nil ((nil rear-nonsticky nil 5459 . 5460) (nil fontified nil 5445 . 5460) (5445 . 5460) 5444) ((#("((< x 0) (- x))" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t) 1 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) help-echo nil src-block t) 2 7 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 7 8 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) help-echo nil src-block t) 8 9 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 9 10 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) help-echo nil src-block t) 10 13 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 13 14 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) help-echo nil src-block t) 14 15 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t)) . 5445) (undo-tree-id9471 . -14) (undo-tree-id9472 . -14) (undo-tree-id9473 . 1) (undo-tree-id9474 . -15) (undo-tree-id9475 . 14) (undo-tree-id9476 . -2) (undo-tree-id9477 . -14) (undo-tree-id9478 . -14) (nil rear-nonsticky t 5459 . 5460)) (25732 223 127868 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5474 . 5475) (nil fontified nil 5460 . 5475) (5460 . 5475)) nil (25732 365 124713 372000) 0 nil])
nil
([nil nil ((5414 . 5416) (5432 . 5433) (5436 . 5437) (5460 . 5474) (5488 . 5490) (5493 . 5494) (5505 . 5506) (5510 . 5512) 5412) nil (25732 365 124711 612000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5414) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5434) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5439) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5464) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5506) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5513) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5526) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                    " 0 6 (face org-indent) 6 20 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5532) 5412) nil (25732 365 124709 52000) 0 nil])
([nil nil ((5474 . 5475) (#("<" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5474) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1) (undo-tree-id10817 . 1) (undo-tree-id10818 . -1)) nil (25732 365 124706 183000) 0 nil])
([nil nil ((5474 . 5475) (#("?" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5474)) nil (25732 365 124699 252000) 0 nil])
([nil nil ((5474 . 5475) (#("2" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 5474) (undo-tree-id10809 . -1)) nil (25732 365 124698 167000) 0 nil])
([nil nil ((#("-" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5482)) nil (25732 365 124696 184000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 5482)) nil (25732 365 124695 457000) 0 nil])
([nil nil ((#("(" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block))) . 5481) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . 1) (undo-tree-id10808 . -1)) nil (25732 365 124693 745000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block))) . 5483) (undo-tree-id10776 . -1) (undo-tree-id10777 . 1) (undo-tree-id10778 . -1)) nil (25732 365 124676 665000) 0 nil])
([nil nil ((5459 . 5460)) nil (25732 365 124674 366000) 0 nil])
([nil nil ((5499 . 5504)) nil (25732 365 124673 793000) 0 nil])
([nil nil ((5505 . 5507)) nil (25732 365 124673 207000) 0 nil])
([nil nil ((#("            (())
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 2 12 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 12 13 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 13 14 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 14 15 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 15 16 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 16 17 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 5509) (undo-tree-id10742 . -12) (undo-tree-id10743 . -13) (undo-tree-id10744 . -12) (undo-tree-id10745 . -13) (undo-tree-id10746 . -13) (undo-tree-id10747 . -13) (undo-tree-id10748 . -13) (undo-tree-id10749 . -13) (undo-tree-id10750 . -13) (undo-tree-id10751 . -13) (undo-tree-id10752 . -13) (undo-tree-id10753 . -13) (undo-tree-id10754 . -13) (undo-tree-id10755 . -13) (undo-tree-id10756 . -13) (undo-tree-id10757 . 5) (undo-tree-id10758 . -13) (undo-tree-id10759 . 2) (undo-tree-id10760 . -16) (undo-tree-id10761 . -12) (undo-tree-id10762 . -12) (undo-tree-id10763 . -12) (undo-tree-id10764 . -12) (undo-tree-id10765 . -12) (undo-tree-id10766 . -12) (undo-tree-id10767 . -12) (undo-tree-id10768 . -12) (undo-tree-id10769 . -12) (undo-tree-id10770 . -12) (undo-tree-id10771 . -12) (undo-tree-id10772 . -12) (undo-tree-id10773 . -12) (undo-tree-id10774 . -12) (undo-tree-id10775 . -12) 5521) nil (25732 365 124671 291000) 0 nil])
([nil nil ((5484 . 5485)) nil (25732 365 124649 718000) 0 nil])
([nil nil ((5509 . 5510)) nil (25732 365 124648 729000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5494 . 5495) (nil fontified nil 5474 . 5495) (nil fontified nil 5454 . 5474) (nil fontified nil 5430 . 5454) (nil fontified nil 5412 . 5430) (5412 . 5495) 5526 (#("  (defun my-abs (x)
    (cond   ((< x 0) (- x)))
            ((> x 0) x))
            ((= x 0) 0))
            ))
" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 3 8 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 8 9 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (org-block)) 9 15 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 15 16 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (org-block)) 16 17 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 17 18 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (org-block)) 18 19 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 19 20 (fontified t font-lock-fontified t help-echo nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) src-block t font-lock-multiline t face (org-block)) 20 24 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 24 25 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 25 29 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 29 32 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 32 33 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 33 34 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 34 39 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 39 40 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 40 41 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 42 45 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 45 46 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 46 47 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 47 48 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 48 49 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 49 61 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 61 62 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 62 63 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 63 64 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 64 68 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 68 69 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 69 70 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 70 71 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 71 72 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 72 73 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 73 74 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 74 76 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 76 86 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 86 87 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 87 88 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 88 93 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 93 94 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 94 96 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 96 97 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 97 98 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 98 99 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 99 101 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 101 111 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 111 112 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 112 113 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block)) 113 114 (fontified t font-lock-fontified t help-echo nil src-block t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-multiline t face (org-block))) . 5412) (undo-tree-id9479 . -114) (undo-tree-id9480 . -27) (undo-tree-id9481 . 16) (undo-tree-id9482 . -13) (undo-tree-id9483 . -112) (undo-tree-id9484 . -38) (undo-tree-id9485 . -112) (undo-tree-id9486 . -114) (undo-tree-id9487 . -114) (undo-tree-id9488 . -114) (undo-tree-id9489 . -114) (undo-tree-id9490 . -114) (undo-tree-id9491 . -114) (undo-tree-id9492 . -114) (undo-tree-id9493 . -114) (undo-tree-id9494 . -114) (undo-tree-id9495 . -114) (undo-tree-id9496 . -114) (undo-tree-id9497 . -114) (undo-tree-id9498 . -114) (undo-tree-id9499 . -114) (undo-tree-id9500 . -114) (undo-tree-id9501 . -114) (undo-tree-id9502 . -114) (undo-tree-id9503 . -114) (undo-tree-id9504 . -114) (undo-tree-id9505 . -114) (undo-tree-id9506 . -114) (undo-tree-id9507 . -114) (undo-tree-id9508 . -114) (undo-tree-id9509 . -114) (undo-tree-id9510 . -114) (undo-tree-id9511 . -114) (undo-tree-id9512 . -114) (undo-tree-id9513 . -114) (undo-tree-id9514 . -114) (undo-tree-id9515 . -114) (undo-tree-id9516 . -114) (undo-tree-id9517 . -114) (undo-tree-id9518 . -114) (undo-tree-id9519 . -114) (undo-tree-id9520 . -114) (undo-tree-id9521 . -114) (undo-tree-id9522 . -114) (undo-tree-id9523 . -114) (undo-tree-id9524 . -114) (undo-tree-id9525 . -114) (undo-tree-id9526 . -114) (undo-tree-id9527 . -114) (undo-tree-id9528 . -114) (undo-tree-id9529 . -114) (undo-tree-id9530 . -114) (undo-tree-id9531 . -114) (undo-tree-id9532 . -114) (undo-tree-id9533 . -114) (undo-tree-id9534 . -114) (undo-tree-id9535 . -114) (undo-tree-id9536 . -114) (undo-tree-id9537 . -114) (undo-tree-id9538 . -114) (undo-tree-id9539 . -114) (undo-tree-id9540 . -114) (undo-tree-id9541 . -114) (undo-tree-id9542 . -114) (undo-tree-id9543 . -114) (undo-tree-id9544 . -114) (undo-tree-id9545 . -114) (undo-tree-id9546 . -114) (undo-tree-id9547 . -114) (undo-tree-id9548 . -114) (undo-tree-id9549 . -34) (undo-tree-id9550 . -34) (undo-tree-id9551 . -34) (undo-tree-id9552 . -34) (undo-tree-id9553 . -34) (undo-tree-id9554 . -34) (undo-tree-id9555 . -34) (undo-tree-id9556 . -34) (undo-tree-id9557 . -34) (undo-tree-id9558 . -34) (undo-tree-id9559 . -34) (undo-tree-id9560 . -34) (undo-tree-id9561 . -34) (undo-tree-id9562 . -34) (undo-tree-id9563 . -38) (undo-tree-id9564 . -38) (undo-tree-id9565 . -38) (undo-tree-id9566 . -38) (undo-tree-id9567 . -38) (undo-tree-id9568 . -38) (undo-tree-id9569 . -38) (undo-tree-id9570 . -38) (undo-tree-id9571 . -38) (undo-tree-id9572 . -38) (undo-tree-id9573 . -38) (undo-tree-id9574 . -38) (undo-tree-id9575 . -38) (undo-tree-id9576 . -38) (undo-tree-id9577 . -38) (undo-tree-id9578 . -38) (undo-tree-id9579 . -38) (undo-tree-id9580 . -38) (undo-tree-id9581 . -38) (undo-tree-id9582 . -38) (undo-tree-id9583 . -38) (undo-tree-id9584 . -38) (undo-tree-id9585 . -38) (undo-tree-id9586 . -38) (undo-tree-id9587 . -38) (undo-tree-id9588 . -38) (undo-tree-id9589 . -38) (undo-tree-id9590 . -38) (undo-tree-id9591 . -38) (undo-tree-id9592 . -38) (undo-tree-id9593 . -38) (undo-tree-id9594 . -38) (undo-tree-id9595 . -38) (undo-tree-id9596 . -38) (undo-tree-id9597 . -38) (undo-tree-id9598 . -38) (undo-tree-id9599 . -38) (undo-tree-id9600 . -38) (undo-tree-id9601 . -38) (undo-tree-id9602 . -38) (undo-tree-id9603 . -38) (undo-tree-id9604 . -38) (undo-tree-id9605 . -38) (undo-tree-id9606 . -38) (undo-tree-id9607 . -38) (undo-tree-id9608 . -38) (undo-tree-id9609 . -38) (undo-tree-id9610 . -38) (undo-tree-id9611 . -38) (undo-tree-id9612 . -38) (undo-tree-id9613 . -38) (undo-tree-id9614 . -41) (undo-tree-id9615 . -41) (undo-tree-id9616 . -41) (undo-tree-id9617 . -41) (undo-tree-id9618 . -41) (undo-tree-id9619 . -41) (undo-tree-id9620 . -41) (undo-tree-id9621 . -41) (undo-tree-id9622 . -41) (undo-tree-id9623 . -41) (undo-tree-id9624 . -41) (undo-tree-id9625 . -41) (undo-tree-id9626 . -41) (undo-tree-id9627 . -41) (undo-tree-id9628 . -41) (undo-tree-id9629 . -41) (undo-tree-id9630 . -41) (undo-tree-id9631 . -41) (undo-tree-id9632 . -41) (undo-tree-id9633 . -41) (undo-tree-id9634 . -41) (undo-tree-id9635 . -44) (undo-tree-id9636 . -44) (undo-tree-id9637 . -44) (undo-tree-id9638 . -44) (undo-tree-id9639 . -44) (undo-tree-id9640 . -44) (undo-tree-id9641 . -44) (undo-tree-id9642 . -44) (undo-tree-id9643 . -44) (undo-tree-id9644 . -44) (undo-tree-id9645 . -44) (undo-tree-id9646 . -44) (undo-tree-id9647 . -44) (undo-tree-id9648 . -44) (undo-tree-id9649 . -44) (undo-tree-id9650 . -44) (undo-tree-id9651 . -44) (undo-tree-id9652 . -44) (undo-tree-id9653 . -44) (undo-tree-id9654 . -44) (undo-tree-id9655 . -44) (undo-tree-id9656 . -44) (undo-tree-id9657 . -44) (undo-tree-id9658 . -44) (undo-tree-id9659 . -44) (undo-tree-id9660 . -44) (undo-tree-id9661 . -44) (undo-tree-id9662 . -46) (undo-tree-id9663 . -33) (undo-tree-id9664 . -32) (undo-tree-id9665 . -32) (undo-tree-id9666 . -32) (undo-tree-id9667 . -32) (undo-tree-id9668 . -32) (undo-tree-id9669 . -32) (undo-tree-id9670 . -32) (undo-tree-id9671 . -49) (undo-tree-id9672 . -49) (undo-tree-id9673 . -49) (undo-tree-id9674 . -49) (undo-tree-id9675 . -49) (undo-tree-id9676 . -49) (undo-tree-id9677 . -49) (undo-tree-id9678 . -49) (undo-tree-id9679 . -49) (undo-tree-id9680 . -49) (undo-tree-id9681 . -49) (undo-tree-id9682 . -49) (undo-tree-id9683 . -49) (undo-tree-id9684 . -49) (undo-tree-id9685 . -49) (undo-tree-id9686 . -49) (undo-tree-id9687 . -49) (undo-tree-id9688 . -49) (undo-tree-id9689 . -49) (undo-tree-id9690 . -49) (undo-tree-id9691 . -49) (undo-tree-id9692 . -49) (undo-tree-id9693 . -49) (undo-tree-id9694 . -49) (undo-tree-id9695 . -33) (undo-tree-id9696 . -72) (undo-tree-id9697 . -72) (undo-tree-id9698 . -72) (undo-tree-id9699 . -72) (undo-tree-id9700 . -72) (undo-tree-id9701 . -72) (undo-tree-id9702 . -72) (undo-tree-id9703 . -72) (undo-tree-id9704 . -72) (undo-tree-id9705 . -72) (undo-tree-id9706 . -72) (undo-tree-id9707 . -72) (undo-tree-id9708 . -72) (undo-tree-id9709 . -72) (undo-tree-id9710 . -72) (undo-tree-id9711 . -72) (undo-tree-id9712 . -72) (undo-tree-id9713 . -72) (undo-tree-id9714 . -72) (undo-tree-id9715 . -72) (undo-tree-id9716 . -72) (undo-tree-id9717 . -72) (undo-tree-id9718 . -72) (undo-tree-id9719 . -46) (undo-tree-id9720 . -18) (undo-tree-id9721 . -18) (undo-tree-id9722 . -18) (undo-tree-id9723 . -18) (undo-tree-id9724 . -18) (undo-tree-id9725 . -18) (undo-tree-id9726 . -18) (undo-tree-id9727 . -18) (undo-tree-id9728 . -18) (undo-tree-id9729 . -18) (undo-tree-id9730 . -18) (undo-tree-id9731 . -18) (undo-tree-id9732 . -18) (undo-tree-id9733 . -18) (undo-tree-id9734 . -18) (undo-tree-id9735 . -18) (undo-tree-id9736 . -18) (undo-tree-id9737 . -18) (undo-tree-id9738 . -18) (undo-tree-id9739 . -18) (undo-tree-id9740 . -18) (undo-tree-id9741 . -38) (undo-tree-id9742 . -38) (undo-tree-id9743 . -38) (undo-tree-id9744 . -38) (undo-tree-id9745 . -38) (undo-tree-id9746 . -38) (undo-tree-id9747 . -38) (undo-tree-id9748 . -38) (undo-tree-id9749 . -38) (undo-tree-id9750 . -38) (undo-tree-id9751 . -38) (undo-tree-id9752 . -38) (undo-tree-id9753 . -38) (undo-tree-id9754 . -38) (undo-tree-id9755 . -38) (undo-tree-id9756 . -67) (undo-tree-id9757 . -67) (undo-tree-id9758 . -67) (undo-tree-id9759 . -67) (undo-tree-id9760 . -67) (undo-tree-id9761 . -67) (undo-tree-id9762 . -67) (undo-tree-id9763 . -67) (undo-tree-id9764 . -67) (undo-tree-id9765 . -67) (undo-tree-id9766 . -66) (undo-tree-id9767 . -66) (undo-tree-id9768 . -66) (undo-tree-id9769 . -66) (undo-tree-id9770 . -66) (undo-tree-id9771 . -66) (undo-tree-id9772 . -66) (undo-tree-id9773 . -65) (undo-tree-id9774 . -65) (undo-tree-id9775 . -65) (undo-tree-id9776 . -65) (undo-tree-id9777 . -65) (undo-tree-id9778 . -65) (undo-tree-id9779 . -65) (undo-tree-id9780 . -63) (undo-tree-id9781 . -63) (undo-tree-id9782 . -63) (undo-tree-id9783 . -63) (undo-tree-id9784 . -63) (undo-tree-id9785 . -63) (undo-tree-id9786 . -63) (undo-tree-id9787 . -63) (undo-tree-id9788 . -63) (undo-tree-id9789 . -63) (undo-tree-id9790 . -63) (undo-tree-id9791 . -63) (undo-tree-id9792 . -63) (undo-tree-id9793 . -63) (undo-tree-id9794 . -63) (undo-tree-id9795 . -65) (undo-tree-id9796 . -65) (undo-tree-id9797 . -65) (undo-tree-id9798 . -65) (undo-tree-id9799 . -65) (undo-tree-id9800 . -65) (undo-tree-id9801 . -65) (undo-tree-id9802 . -61) (undo-tree-id9803 . -61) (undo-tree-id9804 . -61) (undo-tree-id9805 . -61) (undo-tree-id9806 . -61) (undo-tree-id9807 . -61) (undo-tree-id9808 . -61) (undo-tree-id9809 . -62) (undo-tree-id9810 . -62) (undo-tree-id9811 . -62) (undo-tree-id9812 . -62) (undo-tree-id9813 . -62) (undo-tree-id9814 . -62) (undo-tree-id9815 . -62) (undo-tree-id9816 . -63) (undo-tree-id9817 . -63) (undo-tree-id9818 . -63) (undo-tree-id9819 . -63) (undo-tree-id9820 . -63) (undo-tree-id9821 . -63) (undo-tree-id9822 . -63) (undo-tree-id9823 . -63) (undo-tree-id9824 . -63) (undo-tree-id9825 . -63) (undo-tree-id9826 . -63) (undo-tree-id9827 . -63) (undo-tree-id9828 . -63) (undo-tree-id9829 . -63) (undo-tree-id9830 . -63) (undo-tree-id9831 . -63) (undo-tree-id9832 . -63) (undo-tree-id9833 . -63) (undo-tree-id9834 . -63) (undo-tree-id9835 . -63) (undo-tree-id9836 . -63) (undo-tree-id9837 . -63) (undo-tree-id9838 . -63) (undo-tree-id9839 . -63) (undo-tree-id9840 . -63) (undo-tree-id9841 . -63) (undo-tree-id9842 . -63) (undo-tree-id9843 . -63) (undo-tree-id9844 . -63) (undo-tree-id9845 . -63) (undo-tree-id9846 . -63) (undo-tree-id9847 . -63) (undo-tree-id9848 . -63) (undo-tree-id9849 . -63) (undo-tree-id9850 . -63) (undo-tree-id9851 . -63) (undo-tree-id9852 . -63) (undo-tree-id9853 . -63) (undo-tree-id9854 . -63) (undo-tree-id9855 . -64) (undo-tree-id9856 . -64) (undo-tree-id9857 . -64) (undo-tree-id9858 . -64) (undo-tree-id9859 . -64) (undo-tree-id9860 . -64) (undo-tree-id9861 . -64) (undo-tree-id9862 . -63) (undo-tree-id9863 . -63) (undo-tree-id9864 . -63) (undo-tree-id9865 . -63) (undo-tree-id9866 . -63) (undo-tree-id9867 . -63) (undo-tree-id9868 . -63) (undo-tree-id9869 . -63) (undo-tree-id9870 . -63) (undo-tree-id9871 . -63) (undo-tree-id9872 . -63) (undo-tree-id9873 . -63) (undo-tree-id9874 . -63) (undo-tree-id9875 . -63) (undo-tree-id9876 . -63) (undo-tree-id9877 . -65) (undo-tree-id9878 . -65) (undo-tree-id9879 . -65) (undo-tree-id9880 . -65) (undo-tree-id9881 . -65) (undo-tree-id9882 . -65) (undo-tree-id9883 . -65) (undo-tree-id9884 . -67) (undo-tree-id9885 . -67) (undo-tree-id9886 . -67) (undo-tree-id9887 . -67) (undo-tree-id9888 . -67) (undo-tree-id9889 . -67) (undo-tree-id9890 . -67) (undo-tree-id9891 . -68) (undo-tree-id9892 . -68) (undo-tree-id9893 . -68) (undo-tree-id9894 . -68) (undo-tree-id9895 . -68) (undo-tree-id9896 . -68) (undo-tree-id9897 . -68) (undo-tree-id9898 . -70) (undo-tree-id9899 . -70) (undo-tree-id9900 . -70) (undo-tree-id9901 . -70) (undo-tree-id9902 . -70) (undo-tree-id9903 . -70) (undo-tree-id9904 . -70) (undo-tree-id9905 . -70) (undo-tree-id9906 . -70) (undo-tree-id9907 . -70) (undo-tree-id9908 . -70) (undo-tree-id9909 . -70) (undo-tree-id9910 . -70) (undo-tree-id9911 . -70) (undo-tree-id9912 . -70) (undo-tree-id9913 . -70) (undo-tree-id9914 . -70) (undo-tree-id9915 . -70) (undo-tree-id9916 . -70) (undo-tree-id9917 . -70) (undo-tree-id9918 . -70) (undo-tree-id9919 . -70) (undo-tree-id9920 . -70) (undo-tree-id9921 . -70) (undo-tree-id9922 . -70) (undo-tree-id9923 . -70) (undo-tree-id9924 . -70) (undo-tree-id9925 . -70) (undo-tree-id9926 . -71) (undo-tree-id9927 . -71) (undo-tree-id9928 . -71) (undo-tree-id9929 . -71) (undo-tree-id9930 . -71) (undo-tree-id9931 . -71) (undo-tree-id9932 . -71) (undo-tree-id9933 . -72) (undo-tree-id9934 . -72) (undo-tree-id9935 . -72) (undo-tree-id9936 . -72) (undo-tree-id9937 . -72) (undo-tree-id9938 . -72) (undo-tree-id9939 . -72) (undo-tree-id9940 . -71) (undo-tree-id9941 . -71) (undo-tree-id9942 . -71) (undo-tree-id9943 . -71) (undo-tree-id9944 . -71) (undo-tree-id9945 . -71) (undo-tree-id9946 . -71) (undo-tree-id9947 . -70) (undo-tree-id9948 . -70) (undo-tree-id9949 . -70) (undo-tree-id9950 . -70) (undo-tree-id9951 . -70) (undo-tree-id9952 . -70) (undo-tree-id9953 . -70) (undo-tree-id9954 . -70) (undo-tree-id9955 . -70) (undo-tree-id9956 . -70) (undo-tree-id9957 . -70) (undo-tree-id9958 . -70) (undo-tree-id9959 . -70) (undo-tree-id9960 . -70) (undo-tree-id9961 . -70) (undo-tree-id9962 . -70) (undo-tree-id9963 . -70) (undo-tree-id9964 . -70) (undo-tree-id9965 . -70) (undo-tree-id9966 . -70) (undo-tree-id9967 . -70) (undo-tree-id9968 . -71) (undo-tree-id9969 . -71) (undo-tree-id9970 . -71) (undo-tree-id9971 . -71) (undo-tree-id9972 . -71) (undo-tree-id9973 . -71) (undo-tree-id9974 . -71) (undo-tree-id9975 . -72) (undo-tree-id9976 . -72) (undo-tree-id9977 . -72) (undo-tree-id9978 . -72) (undo-tree-id9979 . -72) (undo-tree-id9980 . -72) (undo-tree-id9981 . -72) (undo-tree-id9982 . -72) (undo-tree-id9983 . -71) (undo-tree-id9984 . -71) (undo-tree-id9985 . -71) (undo-tree-id9986 . -71) (undo-tree-id9987 . -71) (undo-tree-id9988 . -71) (undo-tree-id9989 . -71) (undo-tree-id9990 . -71) (undo-tree-id9991 . -71) (undo-tree-id9992 . -71) (undo-tree-id9993 . -71) (undo-tree-id9994 . -71) (undo-tree-id9995 . -71) (undo-tree-id9996 . -42) (undo-tree-id9997 . -43) (undo-tree-id9998 . -43) (undo-tree-id9999 . -43) (undo-tree-id10000 . -43) (undo-tree-id10001 . -43) (undo-tree-id10002 . -43) (undo-tree-id10003 . -43) (undo-tree-id10004 . -44) (undo-tree-id10005 . -44) (undo-tree-id10006 . -44) (undo-tree-id10007 . -44) (undo-tree-id10008 . -44) (undo-tree-id10009 . -44) (undo-tree-id10010 . -44) (undo-tree-id10011 . -45) (undo-tree-id10012 . -45) (undo-tree-id10013 . -45) (undo-tree-id10014 . -45) (undo-tree-id10015 . -45) (undo-tree-id10016 . -45) (undo-tree-id10017 . -45) (undo-tree-id10018 . -46) (undo-tree-id10019 . -46) (undo-tree-id10020 . -46) (undo-tree-id10021 . -46) (undo-tree-id10022 . -46) (undo-tree-id10023 . -46) (undo-tree-id10024 . -46) (undo-tree-id10025 . -47) (undo-tree-id10026 . -47) (undo-tree-id10027 . -47) (undo-tree-id10028 . -47) (undo-tree-id10029 . -47) (undo-tree-id10030 . -47) (undo-tree-id10031 . -47) (undo-tree-id10032 . -47) (undo-tree-id10033 . -48) (undo-tree-id10034 . -48) (undo-tree-id10035 . -48) (undo-tree-id10036 . -48) (undo-tree-id10037 . -48) (undo-tree-id10038 . -48) (undo-tree-id10039 . -48) (undo-tree-id10040 . -48) (undo-tree-id10041 . -48) (undo-tree-id10042 . -48) (undo-tree-id10043 . -48) (undo-tree-id10044 . -48) (undo-tree-id10045 . -48) (undo-tree-id10046 . -47) (undo-tree-id10047 . -47) (undo-tree-id10048 . -47) (undo-tree-id10049 . -47) (undo-tree-id10050 . -47) (undo-tree-id10051 . -47) (undo-tree-id10052 . -47) (undo-tree-id10053 . -47) (undo-tree-id10054 . -47) (undo-tree-id10055 . -47) (undo-tree-id10056 . -47) (undo-tree-id10057 . -47) (undo-tree-id10058 . -47) (undo-tree-id10059 . -47) (undo-tree-id10060 . -47) (undo-tree-id10061 . -61) (undo-tree-id10062 . -61) (undo-tree-id10063 . -61) (undo-tree-id10064 . -61) (undo-tree-id10065 . -61) (undo-tree-id10066 . -61) (undo-tree-id10067 . -61) (undo-tree-id10068 . -62) (undo-tree-id10069 . -62) (undo-tree-id10070 . -62) (undo-tree-id10071 . -62) (undo-tree-id10072 . -62) (undo-tree-id10073 . -62) (undo-tree-id10074 . -62) (undo-tree-id10075 . -62) (undo-tree-id10076 . -62) (undo-tree-id10077 . -62) (undo-tree-id10078 . -62) (undo-tree-id10079 . -62) (undo-tree-id10080 . -87) (undo-tree-id10081 . -99) (undo-tree-id10082 . -87) (undo-tree-id10083 . -62) (undo-tree-id10084 . -65) (undo-tree-id10085 . -65) (undo-tree-id10086 . -65) (undo-tree-id10087 . -65) (undo-tree-id10088 . -65) (undo-tree-id10089 . -65) (undo-tree-id10090 . -65) (undo-tree-id10091 . -67) (undo-tree-id10092 . -67) (undo-tree-id10093 . -67) (undo-tree-id10094 . -67) (undo-tree-id10095 . -67) (undo-tree-id10096 . -67) (undo-tree-id10097 . -67) (undo-tree-id10098 . -68) (undo-tree-id10099 . -68) (undo-tree-id10100 . -68) (undo-tree-id10101 . -68) (undo-tree-id10102 . -68) (undo-tree-id10103 . -68) (undo-tree-id10104 . -68) (undo-tree-id10105 . -70) (undo-tree-id10106 . -70) (undo-tree-id10107 . -70) (undo-tree-id10108 . -70) (undo-tree-id10109 . -70) (undo-tree-id10110 . -70) (undo-tree-id10111 . -70) (undo-tree-id10112 . -71) (undo-tree-id10113 . -71) (undo-tree-id10114 . -71) (undo-tree-id10115 . -71) (undo-tree-id10116 . -71) (undo-tree-id10117 . -71) (undo-tree-id10118 . -71) (undo-tree-id10119 . -71) (undo-tree-id10120 . -71) (undo-tree-id10121 . -71) (undo-tree-id10122 . -71) (undo-tree-id10123 . -71) (undo-tree-id10124 . -94) (undo-tree-id10125 . -94) (undo-tree-id10126 . -94) (undo-tree-id10127 . -94) (undo-tree-id10128 . -94) (undo-tree-id10129 . -94) (undo-tree-id10130 . -94) (undo-tree-id10131 . -86) (undo-tree-id10132 . -86) (undo-tree-id10133 . -86) (undo-tree-id10134 . -86) (undo-tree-id10135 . -86) (undo-tree-id10136 . -86) (undo-tree-id10137 . -86) (undo-tree-id10138 . -99) (undo-tree-id10139 . -99) (undo-tree-id10140 . -99) (undo-tree-id10141 . -99) (undo-tree-id10142 . -99) (undo-tree-id10143 . -99) (undo-tree-id10144 . -99) (undo-tree-id10145 . -99) (undo-tree-id10146 . -99) (undo-tree-id10147 . -99) (undo-tree-id10148 . -99) (undo-tree-id10149 . -99) (undo-tree-id10150 . -99) (undo-tree-id10151 . -87) (undo-tree-id10152 . -88) (undo-tree-id10153 . -88) (undo-tree-id10154 . -88) (undo-tree-id10155 . -88) (undo-tree-id10156 . -88) (undo-tree-id10157 . -88) (undo-tree-id10158 . -88) (undo-tree-id10159 . -88) (undo-tree-id10160 . -89) (undo-tree-id10161 . -89) (undo-tree-id10162 . -89) (undo-tree-id10163 . -89) (undo-tree-id10164 . -89) (undo-tree-id10165 . -89) (undo-tree-id10166 . -89) (undo-tree-id10167 . -90) (undo-tree-id10168 . -90) (undo-tree-id10169 . -90) (undo-tree-id10170 . -90) (undo-tree-id10171 . -90) (undo-tree-id10172 . -90) (undo-tree-id10173 . -90) (undo-tree-id10174 . -91) (undo-tree-id10175 . -91) (undo-tree-id10176 . -91) (undo-tree-id10177 . -91) (undo-tree-id10178 . -91) (undo-tree-id10179 . -91) (undo-tree-id10180 . -91) (undo-tree-id10181 . -92) (undo-tree-id10182 . -92) (undo-tree-id10183 . -92) (undo-tree-id10184 . -92) (undo-tree-id10185 . -92) (undo-tree-id10186 . -92) (undo-tree-id10187 . -92) (undo-tree-id10188 . -93) (undo-tree-id10189 . -93) (undo-tree-id10190 . -93) (undo-tree-id10191 . -93) (undo-tree-id10192 . -93) (undo-tree-id10193 . -93) (undo-tree-id10194 . -93) (undo-tree-id10195 . -92) (undo-tree-id10196 . -92) (undo-tree-id10197 . -92) (undo-tree-id10198 . -92) (undo-tree-id10199 . -92) (undo-tree-id10200 . -92) (undo-tree-id10201 . -92) (undo-tree-id10202 . -92) (undo-tree-id10203 . -92) (undo-tree-id10204 . -92) (undo-tree-id10205 . -92) (undo-tree-id10206 . -92) (undo-tree-id10207 . -92) (undo-tree-id10208 . -92) (undo-tree-id10209 . -92) (undo-tree-id10210 . -93) (undo-tree-id10211 . -93) (undo-tree-id10212 . -93) (undo-tree-id10213 . -93) (undo-tree-id10214 . -93) (undo-tree-id10215 . -93) (undo-tree-id10216 . -93) (undo-tree-id10217 . -94) (undo-tree-id10218 . -94) (undo-tree-id10219 . -94) (undo-tree-id10220 . -94) (undo-tree-id10221 . -94) (undo-tree-id10222 . -94) (undo-tree-id10223 . -94) (undo-tree-id10224 . -94) (undo-tree-id10225 . -95) (undo-tree-id10226 . -95) (undo-tree-id10227 . -95) (undo-tree-id10228 . -95) (undo-tree-id10229 . -95) (undo-tree-id10230 . -95) (undo-tree-id10231 . -95) (undo-tree-id10232 . -96) (undo-tree-id10233 . -96) (undo-tree-id10234 . -96) (undo-tree-id10235 . -96) (undo-tree-id10236 . -96) (undo-tree-id10237 . -96) (undo-tree-id10238 . -96) (undo-tree-id10239 . -95) (undo-tree-id10240 . -95) (undo-tree-id10241 . -95) (undo-tree-id10242 . -95) (undo-tree-id10243 . -95) (undo-tree-id10244 . -95) (undo-tree-id10245 . -95) (undo-tree-id10246 . -95) (undo-tree-id10247 . -95) (undo-tree-id10248 . -95) (undo-tree-id10249 . -95) (undo-tree-id10250 . -95) (undo-tree-id10251 . -95) (undo-tree-id10252 . -95) (undo-tree-id10253 . -95) (undo-tree-id10254 . -96) (undo-tree-id10255 . -96) (undo-tree-id10256 . -96) (undo-tree-id10257 . -96) (undo-tree-id10258 . -96) (undo-tree-id10259 . -96) (undo-tree-id10260 . -96) (undo-tree-id10261 . -99) (undo-tree-id10262 . -99) (undo-tree-id10263 . -99) (undo-tree-id10264 . -99) (undo-tree-id10265 . -99) (undo-tree-id10266 . -99) (undo-tree-id10267 . -99) (undo-tree-id10268 . -99) (undo-tree-id10269 . -99) (undo-tree-id10270 . -99) (undo-tree-id10271 . -99) (undo-tree-id10272 . -99) (undo-tree-id10273 . -99) (undo-tree-id10274 . -99) (undo-tree-id10275 . -113) (undo-tree-id10276 . -111) (undo-tree-id10277 . -111) (undo-tree-id10278 . -111) (undo-tree-id10279 . -111) (undo-tree-id10280 . -111) (undo-tree-id10281 . -111) (undo-tree-id10282 . -111) (undo-tree-id10283 . -111) (undo-tree-id10284 . -114) (undo-tree-id10285 . -114) (undo-tree-id10286 . -114) (undo-tree-id10287 . -114) (undo-tree-id10288 . -114) (undo-tree-id10289 . -114) (undo-tree-id10290 . -114) (undo-tree-id10291 . -114) (undo-tree-id10292 . -114) (undo-tree-id10293 . -114) (undo-tree-id10294 . -114) (undo-tree-id10295 . -114) (undo-tree-id10296 . -99) (undo-tree-id10297 . -100) (undo-tree-id10298 . -100) (undo-tree-id10299 . -100) (undo-tree-id10300 . -100) (undo-tree-id10301 . -100) (undo-tree-id10302 . -100) (undo-tree-id10303 . -100) (undo-tree-id10304 . -101) (undo-tree-id10305 . -101) (undo-tree-id10306 . -101) (undo-tree-id10307 . -101) (undo-tree-id10308 . -101) (undo-tree-id10309 . -101) (undo-tree-id10310 . -101) (undo-tree-id10311 . -102) (undo-tree-id10312 . -102) (undo-tree-id10313 . -102) (undo-tree-id10314 . -102) (undo-tree-id10315 . -102) (undo-tree-id10316 . -102) (undo-tree-id10317 . -102) (undo-tree-id10318 . -103) (undo-tree-id10319 . -103) (undo-tree-id10320 . -103) (undo-tree-id10321 . -103) (undo-tree-id10322 . -103) (undo-tree-id10323 . -103) (undo-tree-id10324 . -103) (undo-tree-id10325 . -104) (undo-tree-id10326 . -104) (undo-tree-id10327 . -104) (undo-tree-id10328 . -104) (undo-tree-id10329 . -104) (undo-tree-id10330 . -104) (undo-tree-id10331 . -104) (undo-tree-id10332 . -105) (undo-tree-id10333 . -105) (undo-tree-id10334 . -105) (undo-tree-id10335 . -105) (undo-tree-id10336 . -105) (undo-tree-id10337 . -105) (undo-tree-id10338 . -105) (undo-tree-id10339 . -106) (undo-tree-id10340 . -106) (undo-tree-id10341 . -106) (undo-tree-id10342 . -106) (undo-tree-id10343 . -106) (undo-tree-id10344 . -106) (undo-tree-id10345 . -106) (undo-tree-id10346 . -107) (undo-tree-id10347 . -107) (undo-tree-id10348 . -107) (undo-tree-id10349 . -107) (undo-tree-id10350 . -107) (undo-tree-id10351 . -107) (undo-tree-id10352 . -107) (undo-tree-id10353 . -108) (undo-tree-id10354 . -108) (undo-tree-id10355 . -108) (undo-tree-id10356 . -108) (undo-tree-id10357 . -108) (undo-tree-id10358 . -108) (undo-tree-id10359 . -108) (undo-tree-id10360 . -109) (undo-tree-id10361 . -109) (undo-tree-id10362 . -109) (undo-tree-id10363 . -109) (undo-tree-id10364 . -109) (undo-tree-id10365 . -109) (undo-tree-id10366 . -109) (undo-tree-id10367 . -110) (undo-tree-id10368 . -110) (undo-tree-id10369 . -110) (undo-tree-id10370 . -110) (undo-tree-id10371 . -110) (undo-tree-id10372 . -110) (undo-tree-id10373 . -110) (undo-tree-id10374 . -110) (undo-tree-id10375 . -110) (undo-tree-id10376 . -110) (undo-tree-id10377 . -110) (undo-tree-id10378 . -110) (undo-tree-id10379 . -85) (undo-tree-id10380 . -60) (undo-tree-id10381 . -61) (undo-tree-id10382 . -61) (undo-tree-id10383 . -61) (undo-tree-id10384 . -61) (undo-tree-id10385 . -61) (undo-tree-id10386 . -61) (undo-tree-id10387 . -61) (undo-tree-id10388 . -72) (undo-tree-id10389 . -72) (undo-tree-id10390 . -72) (undo-tree-id10391 . -72) (undo-tree-id10392 . -72) (undo-tree-id10393 . -72) (undo-tree-id10394 . -72) (undo-tree-id10395 . -72) (undo-tree-id10396 . -73) (undo-tree-id10397 . -73) (undo-tree-id10398 . -73) (undo-tree-id10399 . -73) (undo-tree-id10400 . -73) (undo-tree-id10401 . -73) (undo-tree-id10402 . -73) (undo-tree-id10403 . -73) (undo-tree-id10404 . -73) (undo-tree-id10405 . -73) (undo-tree-id10406 . -73) (undo-tree-id10407 . -73) (undo-tree-id10408 . -73) (undo-tree-id10409 . -72) (undo-tree-id10410 . -72) (undo-tree-id10411 . -72) (undo-tree-id10412 . -72) (undo-tree-id10413 . -72) (undo-tree-id10414 . -72) (undo-tree-id10415 . -72) (undo-tree-id10416 . -72) (undo-tree-id10417 . -72) (undo-tree-id10418 . -72) (undo-tree-id10419 . -72) (undo-tree-id10420 . -72) (undo-tree-id10421 . -72) (undo-tree-id10422 . -72) (undo-tree-id10423 . -72) (undo-tree-id10424 . -86) (undo-tree-id10425 . -86) (undo-tree-id10426 . -86) (undo-tree-id10427 . -86) (undo-tree-id10428 . -86) (undo-tree-id10429 . -86) (undo-tree-id10430 . -86) (undo-tree-id10431 . -86) (undo-tree-id10432 . -97) (undo-tree-id10433 . -97) (undo-tree-id10434 . -97) (undo-tree-id10435 . -97) (undo-tree-id10436 . -97) (undo-tree-id10437 . -97) (undo-tree-id10438 . -97) (undo-tree-id10439 . -97) (undo-tree-id10440 . -98) (undo-tree-id10441 . -98) (undo-tree-id10442 . -98) (undo-tree-id10443 . -98) (undo-tree-id10444 . -98) (undo-tree-id10445 . -98) (undo-tree-id10446 . -98) (undo-tree-id10447 . -97) (undo-tree-id10448 . -97) (undo-tree-id10449 . -97) (undo-tree-id10450 . -97) (undo-tree-id10451 . -97) (undo-tree-id10452 . -97) (undo-tree-id10453 . -97) (undo-tree-id10454 . -97) (undo-tree-id10455 . -97) (undo-tree-id10456 . -97) (undo-tree-id10457 . -97) (undo-tree-id10458 . -97) (undo-tree-id10459 . -97) (undo-tree-id10460 . -97) (undo-tree-id10461 . -97) (undo-tree-id10462 . -97) (undo-tree-id10463 . -97) (undo-tree-id10464 . -97) (undo-tree-id10465 . -97) (undo-tree-id10466 . -97) (undo-tree-id10467 . -72) (undo-tree-id10468 . -43) (undo-tree-id10469 . -18) (undo-tree-id10470 . -18) (undo-tree-id10471 . -18) (undo-tree-id10472 . -18) (undo-tree-id10473 . -18) (undo-tree-id10474 . -18) (undo-tree-id10475 . -18) (undo-tree-id10476 . -24) (undo-tree-id10477 . -24) (undo-tree-id10478 . -24) (undo-tree-id10479 . -24) (undo-tree-id10480 . -24) (undo-tree-id10481 . -24) (undo-tree-id10482 . -24) (undo-tree-id10483 . -25) (undo-tree-id10484 . -25) (undo-tree-id10485 . -25) (undo-tree-id10486 . -25) (undo-tree-id10487 . -25) (undo-tree-id10488 . -25) (undo-tree-id10489 . -25) (undo-tree-id10490 . -32) (undo-tree-id10491 . -32) (undo-tree-id10492 . -32) (undo-tree-id10493 . -32) (undo-tree-id10494 . -32) (undo-tree-id10495 . -32) (undo-tree-id10496 . -32) (undo-tree-id10497 . -32) (undo-tree-id10498 . -32) (undo-tree-id10499 . -32) (undo-tree-id10500 . -32) (undo-tree-id10501 . -32) (undo-tree-id10502 . -61) (undo-tree-id10503 . -65) (undo-tree-id10504 . -65) (undo-tree-id10505 . -65) (undo-tree-id10506 . -65) (undo-tree-id10507 . -65) (undo-tree-id10508 . -65) (undo-tree-id10509 . -65) (undo-tree-id10510 . -64) (undo-tree-id10511 . -64) (undo-tree-id10512 . -64) (undo-tree-id10513 . -64) (undo-tree-id10514 . -64) (undo-tree-id10515 . -64) (undo-tree-id10516 . -64) (undo-tree-id10517 . -63) (undo-tree-id10518 . -63) (undo-tree-id10519 . -63) (undo-tree-id10520 . -63) (undo-tree-id10521 . -63) (undo-tree-id10522 . -63) (undo-tree-id10523 . -63) (undo-tree-id10524 . -62) (undo-tree-id10525 . -62) (undo-tree-id10526 . -62) (undo-tree-id10527 . -62) (undo-tree-id10528 . -62) (undo-tree-id10529 . -62) (undo-tree-id10530 . -62) (undo-tree-id10531 . -63) (undo-tree-id10532 . -63) (undo-tree-id10533 . -63) (undo-tree-id10534 . -63) (undo-tree-id10535 . -63) (undo-tree-id10536 . -63) (undo-tree-id10537 . -63) (undo-tree-id10538 . -64) (undo-tree-id10539 . -64) (undo-tree-id10540 . -64) (undo-tree-id10541 . -64) (undo-tree-id10542 . -64) (undo-tree-id10543 . -64) (undo-tree-id10544 . -64) (undo-tree-id10545 . -64) (undo-tree-id10546 . -64) (undo-tree-id10547 . -64) (undo-tree-id10548 . -64) (undo-tree-id10549 . -64) (undo-tree-id10550 . -35) (undo-tree-id10551 . -15) (undo-tree-id10552 . -16) (undo-tree-id10553 . -16) (undo-tree-id10554 . -16) (undo-tree-id10555 . -16) (undo-tree-id10556 . -16) (undo-tree-id10557 . -16) (undo-tree-id10558 . -16) (undo-tree-id10559 . -17) (undo-tree-id10560 . -17) (undo-tree-id10561 . -17) (undo-tree-id10562 . -17) (undo-tree-id10563 . -17) (undo-tree-id10564 . -17) (undo-tree-id10565 . -17) (undo-tree-id10566 . -18) (undo-tree-id10567 . -18) (undo-tree-id10568 . -18) (undo-tree-id10569 . -18) (undo-tree-id10570 . -18) (undo-tree-id10571 . -18) (undo-tree-id10572 . -18) (undo-tree-id10573 . -24) (undo-tree-id10574 . -24) (undo-tree-id10575 . -24) (undo-tree-id10576 . -24) (undo-tree-id10577 . -24) (undo-tree-id10578 . -24) (undo-tree-id10579 . -24) (undo-tree-id10580 . -25) (undo-tree-id10581 . -25) (undo-tree-id10582 . -25) (undo-tree-id10583 . -25) (undo-tree-id10584 . -25) (undo-tree-id10585 . -25) (undo-tree-id10586 . -25) (undo-tree-id10587 . -32) (undo-tree-id10588 . -32) (undo-tree-id10589 . -32) (undo-tree-id10590 . -32) (undo-tree-id10591 . -32) (undo-tree-id10592 . -32) (undo-tree-id10593 . -32) (undo-tree-id10594 . -36) (undo-tree-id10595 . -36) (undo-tree-id10596 . -36) (undo-tree-id10597 . -36) (undo-tree-id10598 . -36) (undo-tree-id10599 . -36) (undo-tree-id10600 . -36) (undo-tree-id10601 . -38) (undo-tree-id10602 . -38) (undo-tree-id10603 . -38) (undo-tree-id10604 . -38) (undo-tree-id10605 . -38) (undo-tree-id10606 . -38) (undo-tree-id10607 . -38) (undo-tree-id10608 . -39) (undo-tree-id10609 . -39) (undo-tree-id10610 . -39) (undo-tree-id10611 . -39) (undo-tree-id10612 . -39) (undo-tree-id10613 . -39) (undo-tree-id10614 . -39) (undo-tree-id10615 . -41) (undo-tree-id10616 . -41) (undo-tree-id10617 . -41) (undo-tree-id10618 . -41) (undo-tree-id10619 . -41) (undo-tree-id10620 . -41) (undo-tree-id10621 . -41) (undo-tree-id10622 . -44) (undo-tree-id10623 . -44) (undo-tree-id10624 . -44) (undo-tree-id10625 . -44) (undo-tree-id10626 . -44) (undo-tree-id10627 . -44) (undo-tree-id10628 . -44) (undo-tree-id10629 . -44) (undo-tree-id10630 . -44) (undo-tree-id10631 . -44) (undo-tree-id10632 . -44) (undo-tree-id10633 . -44) (undo-tree-id10634 . -18) (undo-tree-id10635 . -18) (undo-tree-id10636 . -18) (undo-tree-id10637 . -18) (undo-tree-id10638 . -18) (undo-tree-id10639 . -18) (undo-tree-id10640 . -18) (undo-tree-id10641 . -18) (undo-tree-id10642 . -18) (undo-tree-id10643 . -18) (undo-tree-id10644 . -18) (undo-tree-id10645 . -18) (undo-tree-id10646 . -18) (undo-tree-id10647 . -18) (undo-tree-id10648 . -18) (undo-tree-id10649 . -18) (undo-tree-id10650 . -18) (undo-tree-id10651 . -18) (undo-tree-id10652 . -18) (undo-tree-id10653 . -18) (undo-tree-id10654 . -18) (undo-tree-id10655 . -18) (undo-tree-id10656 . -18) (undo-tree-id10657 . -18) (undo-tree-id10658 . -18) (undo-tree-id10659 . -18) (undo-tree-id10660 . -18) (undo-tree-id10661 . -38) (undo-tree-id10662 . -67) (undo-tree-id10663 . -92) (undo-tree-id10664 . -113) (undo-tree-id10665 . -113) (undo-tree-id10666 . -113) (undo-tree-id10667 . -113) (undo-tree-id10668 . -113) (undo-tree-id10669 . -113) (undo-tree-id10670 . -113) (undo-tree-id10671 . -18) (undo-tree-id10672 . -18) (undo-tree-id10673 . -18) (undo-tree-id10674 . -18) (undo-tree-id10675 . -18) (undo-tree-id10676 . -18) (undo-tree-id10677 . -18) (undo-tree-id10678 . -18) (undo-tree-id10679 . -18) (undo-tree-id10680 . -18) (undo-tree-id10681 . -18) (undo-tree-id10682 . -18) (undo-tree-id10683 . -18) (undo-tree-id10684 . -18) (undo-tree-id10685 . -18) (undo-tree-id10686 . -18) (undo-tree-id10687 . -113) (undo-tree-id10688 . -113) (undo-tree-id10689 . -113) (undo-tree-id10690 . -113) (undo-tree-id10691 . -113) (undo-tree-id10692 . -113) (undo-tree-id10693 . -113) (undo-tree-id10694 . -113) (undo-tree-id10695 . -113) (undo-tree-id10696 . -113) (undo-tree-id10697 . -113) (undo-tree-id10698 . -113) (undo-tree-id10699 . -113) (undo-tree-id10700 . -113) (undo-tree-id10701 . -113) (undo-tree-id10702 . -112) (undo-tree-id10703 . -112) (undo-tree-id10704 . -112) (undo-tree-id10705 . -112) (undo-tree-id10706 . -112) (undo-tree-id10707 . -112) (undo-tree-id10708 . -112) (undo-tree-id10709 . -112) (undo-tree-id10710 . -112) (undo-tree-id10711 . -112) (undo-tree-id10712 . -112) (undo-tree-id10713 . -112) (undo-tree-id10714 . -112) (undo-tree-id10715 . -87) (undo-tree-id10716 . -62) (undo-tree-id10717 . -33) (undo-tree-id10718 . -13) (undo-tree-id10719 . -114) (undo-tree-id10720 . -13) (undo-tree-id10721 . -112) (undo-tree-id10722 . -13) (undo-tree-id10723 . -13) (undo-tree-id10724 . -13) (undo-tree-id10725 . -13) (undo-tree-id10726 . -13) (undo-tree-id10727 . -13) (undo-tree-id10728 . -13) (undo-tree-id10729 . -13) (undo-tree-id10730 . -13) (undo-tree-id10731 . -13) (undo-tree-id10732 . -13) (undo-tree-id10733 . -13) (undo-tree-id10734 . -13) (undo-tree-id10735 . 2) (undo-tree-id10736 . -113) (undo-tree-id10737 . -33) (undo-tree-id10738 . -62) (undo-tree-id10739 . -87) (undo-tree-id10740 . -114) (undo-tree-id10741 . -114) 5526) nil (25732 365 124604 851000) 0 nil])
([nil nil ((5412 . 5414) (5430 . 5432) (5462 . 5464) (5474 . 5476) 5412 (5495 . 5496) (t 25732 365 142731 324000)) nil (25732 5674 210669 134000) 0 nil])
([nil nil ((14 . 15) (1 . 14) (1 . 2) 2) nil (25732 5674 210667 388000) 0 nil])
([nil nil ((nil rear-nonsticky nil 72 . 73) (nil fontified nil 50 . 73) (nil fontified nil 28 . 50) (nil fontified nil 15 . 28) (15 . 73) 14) nil (25732 5674 210666 152000) 0 nil])
([nil nil ((73 . 74)) nil (25732 5674 210664 232000) 0 nil])
([nil nil ((74 . 75)) nil (25732 5674 210663 568000) 0 nil])
([nil nil ((49 . 50) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t face (bold) font-lock-multiline t org-emphasis t)) . -49) (undo-tree-id10863 . -1) (27 . 28) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -27) 25) nil (25732 5674 210662 542000) 0 nil])
([nil nil ((1 . 2) 6) nil (25732 5674 210660 164000) 0 nil])
([nil nil ((77 . 80) (76 . 77) 2) nil (25732 5674 210659 119000) 0 nil])
([nil nil ((79 . 83) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix "")) . -79) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) 80) nil (25732 5674 210656 79000) 0 nil])
([nil nil ((nil rear-nonsticky nil 126 . 127) (nil fontified nil 101 . 127) (nil fontified nil 82 . 101) (82 . 127) 81) nil (25732 5674 209775 765000) 0 nil])
([nil nil ((100 . 101) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t face (bold) font-lock-multiline t org-emphasis t)) . -100) (undo-tree-id10830 . -1) 99) nil (25732 5674 209773 411000) 0 nil])
([nil nil ((128 . 129) 100) nil (25732 5674 209760 577000) 0 nil])
([nil nil ((13 . 14) (#("R" 0 1 (fontified t line-prefix "" wrap-prefix "")) . 13) (t 25732 5674 279309 118000)) nil (25732 5686 149340 372000) 0 nil])
([nil nil ((5741 . 5745) (5740 . 5741) (5739 . 5740) (t 25732 5686 163741 652000) 5730) nil (25732 6077 359129 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5771 . 5772) (nil fontified nil 5745 . 5772) (5745 . 5772) 5744) nil (25732 6077 359128 685000) 0 nil])
([nil nil ((5772 . 5774)) nil (25732 6077 359127 684000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5996 . 5997) (nil fontified nil 5965 . 5997) (nil fontified nil 5930 . 5965) (nil fontified nil 5894 . 5930) (nil fontified nil 5857 . 5894) (nil fontified nil 5821 . 5857) (nil fontified nil 5820 . 5821) (nil fontified nil 5799 . 5820) (nil fontified nil 5768 . 5799) (nil fontified nil 5736 . 5768) (nil fontified nil 5703 . 5736) (nil fontified nil 5671 . 5703) (nil fontified nil 5645 . 5671) (5645 . 5997)) nil (25732 6077 359126 644000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5644 . 5645) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -5681) (5644 . 5682)) nil (25732 6077 359124 164000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6035 . 6036) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -6072) (6035 . 6073)) nil (25732 6077 359122 908000) 0 nil])
([nil nil ((6038 . 6041) (#("BEGIN" 0 5 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t face (org-block) help-echo nil src-block t)) . 6038) (undo-tree-id10864 . -4) (undo-tree-id10865 . -4) (undo-tree-id10866 . -4) (undo-tree-id10867 . -5) (undo-tree-id10868 . -4) (undo-tree-id10869 . -4) (undo-tree-id10870 . -4) (undo-tree-id10871 . -4) (undo-tree-id10872 . -4) (undo-tree-id10873 . -4) (undo-tree-id10874 . -4) (undo-tree-id10875 . -4) (undo-tree-id10876 . -4) 6042) nil (25732 6077 359120 700000) 0 nil])
([nil nil ((#("lisp :results output " 0 5 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil src-block t font-lock-multiline t face org-block-end-line) 5 13 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil src-block t font-lock-multiline t face org-block-end-line) 13 21 (font-lock-fontified t fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) help-echo nil src-block t font-lock-multiline t face org-block-end-line)) . 6049)) nil (25732 6077 359096 921000) 0 nil])
([nil nil ((5682 . 5684) (5708 . 5709) (5710 . 5711) (5740 . 5742) (5781 . 5783) (5805 . 5806) (5813 . 5814) (5836 . 5837) (5844 . 5845) (5858 . 5860) (5894 . 5896) (5931 . 5933) (5967 . 5969) (6002 . 6004) 5682 (t 25732 6077 376670 614000)) nil (25732 6087 475335 711000) 0 nil])
([nil nil ((6057 . 6059)) nil (25732 6087 475328 626000) 0 nil])
([nil nil ((6201 . 6205) (6200 . 6201) (t 25732 6087 540980 625000) 6200) nil (25732 6357 704513 131000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6225 . 6226) (nil fontified nil 6205 . 6226) (6205 . 6226) 6204) nil (25732 6357 704511 734000) 0 nil])
([nil nil ((6226 . 6227)) nil (25732 6357 704510 79000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 6200) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1)) nil (25732 6357 704505 425000) 0 nil])
([nil nil ((6225 . 6226) (t 25732 6357 724913 633000) 6200) nil (25732 6395 199956 265000) 0 nil])
([nil nil ((6226 . 6270) (#("src" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 6226) (undo-tree-id10992 . -1) (undo-tree-id10993 . -3) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -2) (undo-tree-id11017 . -2) (undo-tree-id11018 . -2) (undo-tree-id11019 . -2) (undo-tree-id11020 . -2) (undo-tree-id11021 . -2) (undo-tree-id11022 . -2) (undo-tree-id11023 . -2) (undo-tree-id11024 . -3) (undo-tree-id11025 . -3) (undo-tree-id11026 . -3) (undo-tree-id11027 . -3) (undo-tree-id11028 . -3) (undo-tree-id11029 . -3) (undo-tree-id11030 . -3) (undo-tree-id11031 . -3) 6229 (6226 . 6229)) nil (25732 6395 199953 558000) 0 nil])
([nil nil ((6237 . 6242)) nil (25732 6395 199925 237000) 0 nil])
([nil nil ((6265 . 6267) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6264) (undo-tree-id10969 . -2) (undo-tree-id10970 . -2) (undo-tree-id10971 . -2) (undo-tree-id10972 . -2) (undo-tree-id10973 . -2) (undo-tree-id10974 . -2) (undo-tree-id10975 . -2) (undo-tree-id10976 . -2) (undo-tree-id10977 . -2) (undo-tree-id10978 . -2) (undo-tree-id10979 . -2) (6264 . 6267) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 6263) (undo-tree-id10980 . -2) (undo-tree-id10981 . -2) (undo-tree-id10982 . -2) (undo-tree-id10983 . -2) (undo-tree-id10984 . -2) (undo-tree-id10985 . -2) (undo-tree-id10986 . -2) (undo-tree-id10987 . -2) (undo-tree-id10988 . -2) (undo-tree-id10989 . -2) (undo-tree-id10990 . -2) (6265 . 6266) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6266) (undo-tree-id10991 . -2) 6263 (6262 . 6265) 6246) nil (25732 6395 199923 173000) 0 nil])
([nil nil ((6226 . 6228) (6225 . 6226) 6205) nil (25732 6395 199906 786000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6266) (undo-tree-id10952 . 1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1)) nil (25732 6395 199904 727000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6329 . 6330) (nil fontified nil 6320 . 6330) (nil fontified nil 6312 . 6320) (nil fontified nil 6297 . 6312) (nil fontified nil 6266 . 6297) (6266 . 6330)) nil (25732 6395 199892 715000) 0 nil])
([nil nil ((6266 . 6268) (6297 . 6301) (6312 . 6314) (6320 . 6322) 6266) nil (25732 6395 199891 17000) 0 nil])
([nil nil ((6320 . 6327) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6341) (undo-tree-id10899 . -2) (undo-tree-id10900 . -2) (undo-tree-id10901 . -2) (undo-tree-id10902 . -2) (undo-tree-id10903 . -2) (undo-tree-id10904 . -2) (undo-tree-id10905 . -2) (undo-tree-id10906 . -2) (undo-tree-id10907 . -2) (undo-tree-id10908 . -2) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -2) (undo-tree-id10930 . -2) (undo-tree-id10931 . -2) (undo-tree-id10932 . -2) (undo-tree-id10933 . -2) (undo-tree-id10934 . -2) (undo-tree-id10935 . -2) (undo-tree-id10936 . -2) (undo-tree-id10937 . -2) (undo-tree-id10938 . -2) (undo-tree-id10939 . -2) (undo-tree-id10940 . -2) (undo-tree-id10941 . -2) (undo-tree-id10942 . -2) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) 6266) nil (25732 6395 199886 338000) 0 nil])
([nil nil ((6337 . 6344) 6266) nil (25732 6395 199569 166000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6406 . 6407) (nil fontified nil 6396 . 6407) (nil fontified nil 6386 . 6396) (nil fontified nil 6374 . 6386) (nil fontified nil 6355 . 6374) (6355 . 6407) (t 25732 6395 265977 709000)) nil (25732 6480 638534 908000) 0 nil])
([nil nil ((6268 . 6270) (6299 . 6301) (6327 . 6329) (6335 . 6337) (6355 . 6357) (6374 . 6376) (6386 . 6388) (6396 . 6398) 6266) nil (25732 6480 638533 316000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 6268) 6266) nil (25732 6480 638531 635000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6303) (undo-tree-id11049 . -2) (undo-tree-id11050 . -2) (undo-tree-id11051 . -2) (undo-tree-id11052 . -2) (undo-tree-id11053 . -2) (undo-tree-id11054 . -2) (undo-tree-id11055 . -2) 6266) nil (25732 6480 638530 618000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                 " 0 6 (face org-indent) 6 17 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6327) 6266) nil (25732 6480 638525 906000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                 " 0 6 (face org-indent) 6 17 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6344) 6266) nil (25732 6480 638524 892000) 0 nil])
([nil nil ((6378 . 6380) 6266) nil (25732 6480 638524 43000) 0 nil])
([nil nil ((6394 . 6400) 6266) nil (25732 6480 638523 219000) 0 nil])
([nil nil ((6412 . 6418) 6266) nil (25732 6480 638522 211000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . -6355) (undo-tree-id11038 . -2) (undo-tree-id11039 . -2) (undo-tree-id11040 . -2) (undo-tree-id11041 . -2) (undo-tree-id11042 . -2) (undo-tree-id11043 . -2) (undo-tree-id11044 . -2) (undo-tree-id11045 . -2) (undo-tree-id11046 . -2) (undo-tree-id11047 . -2) (undo-tree-id11048 . -2) 6357 (6354 . 6357) 6353) nil (25732 6480 638520 331000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . -6266) (undo-tree-id11035 . -2) (undo-tree-id11036 . -2) (undo-tree-id11037 . -2) 6268 (6265 . 6268) 6229) nil (25732 6480 638838 833000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . -6357) (undo-tree-id11064 . -2) (undo-tree-id11065 . -2) (undo-tree-id11066 . -2) 6359 (6356 . 6359) 6356) nil (25732 6488 761575 277000) 0 nil] [nil nil ((#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . -6267) (undo-tree-id11032 . -2) (undo-tree-id11033 . -2) (undo-tree-id11034 . -2) 6269 (6266 . 6269) 6266) ((#("
  " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 1 3 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . 6266) (undo-tree-id11056 . -1) (undo-tree-id11057 . -3) (undo-tree-id11058 . -3) (undo-tree-id11059 . -1) (undo-tree-id11060 . -1) (6267 . 6269)) (25732 6480 638504 74000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . -6434) (undo-tree-id11061 . -2) (undo-tree-id11062 . -2) (undo-tree-id11063 . -2) 6436 (6433 . 6436) 6433) nil (25732 6488 761568 28000) 0 nil])
nil
([nil nil ((6445 . 6448) (6444 . 6445) (t 25732 6488 780597 384000) 6437) nil (25732 6495 256397 667000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-block-end-line)) . 6448) (undo-tree-id11067 . 1)) nil (25732 6495 256392 572000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-block-end-line) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 2 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 6444) (undo-tree-id11142 . -3) (undo-tree-id11143 . -3) (undo-tree-id11144 . -3) (undo-tree-id11145 . -3) (undo-tree-id11146 . -3) (undo-tree-id11147 . -3) (undo-tree-id11148 . -3) (undo-tree-id11149 . -3) (undo-tree-id11150 . -3) (undo-tree-id11151 . -3) (undo-tree-id11152 . -3) (undo-tree-id11153 . -3) (undo-tree-id11154 . -3) (undo-tree-id11155 . -3) (undo-tree-id11156 . -3) (undo-tree-id11157 . -3) (undo-tree-id11158 . -3) (undo-tree-id11159 . -3) (undo-tree-id11160 . -3) (undo-tree-id11161 . -3) (undo-tree-id11162 . -3) (undo-tree-id11163 . -3) (undo-tree-id11164 . -3) (undo-tree-id11165 . -3) (undo-tree-id11166 . -3) (undo-tree-id11167 . -3) (undo-tree-id11168 . -3) (undo-tree-id11169 . -3) (undo-tree-id11170 . -3) (undo-tree-id11171 . -3) (undo-tree-id11172 . -3) (undo-tree-id11173 . -3) (undo-tree-id11174 . -3) (undo-tree-id11175 . -3) (undo-tree-id11176 . -3) (undo-tree-id11177 . -3) (undo-tree-id11178 . -3) (undo-tree-id11179 . -3) (undo-tree-id11180 . -3) (undo-tree-id11181 . -3) (undo-tree-id11182 . -3) (undo-tree-id11183 . -3) (undo-tree-id11184 . -3) (undo-tree-id11185 . -3) (undo-tree-id11186 . -3) (undo-tree-id11187 . -3) (undo-tree-id11188 . -3) (undo-tree-id11189 . -3) (undo-tree-id11190 . -3) (undo-tree-id11191 . -3) (undo-tree-id11192 . -3) (undo-tree-id11193 . -3) (undo-tree-id11194 . -3) (undo-tree-id11195 . -3) (undo-tree-id11196 . -3) (undo-tree-id11197 . -3) (undo-tree-id11198 . -3) (undo-tree-id11199 . -3) (undo-tree-id11200 . -3) (undo-tree-id11201 . -3) (undo-tree-id11202 . -3) (undo-tree-id11203 . -3) (undo-tree-id11204 . -3) (undo-tree-id11205 . -3) (undo-tree-id11206 . -3) (undo-tree-id11207 . -3) (undo-tree-id11208 . -3) (undo-tree-id11209 . -3) (undo-tree-id11210 . -3) (undo-tree-id11211 . -3) (undo-tree-id11212 . -3) (undo-tree-id11213 . -3) (undo-tree-id11214 . -3) (undo-tree-id11215 . -3) (undo-tree-id11216 . -3) (undo-tree-id11217 . -3) (undo-tree-id11218 . -3) (undo-tree-id11219 . -3) (undo-tree-id11220 . -3) (undo-tree-id11221 . -3) (undo-tree-id11222 . -3) (undo-tree-id11223 . -3) (undo-tree-id11224 . -3) (undo-tree-id11225 . -3) (undo-tree-id11226 . -3) (undo-tree-id11227 . -3) (undo-tree-id11228 . -3) (undo-tree-id11229 . -3) (undo-tree-id11230 . -3) (undo-tree-id11231 . -3) (undo-tree-id11232 . -3) (undo-tree-id11233 . -3) (undo-tree-id11234 . -3) (undo-tree-id11235 . -3) (undo-tree-id11236 . -3) (undo-tree-id11237 . -3) (undo-tree-id11238 . -3) (undo-tree-id11239 . -3) (undo-tree-id11240 . -3) (undo-tree-id11241 . -3) (undo-tree-id11242 . -3) (undo-tree-id11243 . -3) (undo-tree-id11244 . -3) (undo-tree-id11245 . -3) (undo-tree-id11246 . -3) (undo-tree-id11247 . -3) (undo-tree-id11248 . -3) (undo-tree-id11249 . -3) (undo-tree-id11250 . -3) (undo-tree-id11251 . -3) (undo-tree-id11252 . -3) (undo-tree-id11253 . -3) (undo-tree-id11254 . -3) (undo-tree-id11255 . -3) (undo-tree-id11256 . -3) (undo-tree-id11257 . -3) (undo-tree-id11258 . -3) (undo-tree-id11259 . -3) (undo-tree-id11260 . -3) (undo-tree-id11261 . -3) (undo-tree-id11262 . -3) (undo-tree-id11263 . -3) (undo-tree-id11264 . -3) (undo-tree-id11265 . -3) (undo-tree-id11266 . -3) (undo-tree-id11267 . -3) (undo-tree-id11268 . -3) (undo-tree-id11269 . -3) (undo-tree-id11270 . -3) (undo-tree-id11271 . -3) (undo-tree-id11272 . -3) (undo-tree-id11273 . -3) (undo-tree-id11274 . -3) (undo-tree-id11275 . -3) (undo-tree-id11276 . -3) (undo-tree-id11277 . -3) (undo-tree-id11278 . -3) (undo-tree-id11279 . -3) (undo-tree-id11280 . -3) (undo-tree-id11281 . -3) (undo-tree-id11282 . -3) (undo-tree-id11283 . -3) (undo-tree-id11284 . -3) (undo-tree-id11285 . -3) (undo-tree-id11286 . -3) (undo-tree-id11287 . -3) (undo-tree-id11288 . -3) (undo-tree-id11289 . -3) (undo-tree-id11290 . -3) (undo-tree-id11291 . -3) (undo-tree-id11292 . -3) (undo-tree-id11293 . -3) (undo-tree-id11294 . -3) (undo-tree-id11295 . -3) (undo-tree-id11296 . -3) (undo-tree-id11297 . -3) (undo-tree-id11298 . -3) (undo-tree-id11299 . -3) (undo-tree-id11300 . -3) (undo-tree-id11301 . -3) (undo-tree-id11302 . -3) (undo-tree-id11303 . -3) (undo-tree-id11304 . -3) (undo-tree-id11305 . -3) (undo-tree-id11306 . -3) (undo-tree-id11307 . -3) (undo-tree-id11308 . -3) (undo-tree-id11309 . -3) (undo-tree-id11310 . -3) (undo-tree-id11311 . -3) (undo-tree-id11312 . -3) (undo-tree-id11313 . -3) (undo-tree-id11314 . -3) (undo-tree-id11315 . -3) (undo-tree-id11316 . -3) (undo-tree-id11317 . -3) (undo-tree-id11318 . -3) (undo-tree-id11319 . -3) (undo-tree-id11320 . -3) (undo-tree-id11321 . -3) (undo-tree-id11322 . -3) (undo-tree-id11323 . -3) (undo-tree-id11324 . -3) (undo-tree-id11325 . -3) (undo-tree-id11326 . -3) (undo-tree-id11327 . -3) (undo-tree-id11328 . -3) (undo-tree-id11329 . -3) (undo-tree-id11330 . -3) (undo-tree-id11331 . -3) (undo-tree-id11332 . -3) (undo-tree-id11333 . -3) (undo-tree-id11334 . -3) (undo-tree-id11335 . -3) (undo-tree-id11336 . -3) (undo-tree-id11337 . -3) (undo-tree-id11338 . -3) (undo-tree-id11339 . -3) (undo-tree-id11340 . -3) (undo-tree-id11341 . -3) (undo-tree-id11342 . -3) (undo-tree-id11343 . -3) (undo-tree-id11344 . -3) (undo-tree-id11345 . -3) (undo-tree-id11346 . -3) (undo-tree-id11347 . -3) (undo-tree-id11348 . -3) (undo-tree-id11349 . -3) (undo-tree-id11350 . -3) (undo-tree-id11351 . -3) (undo-tree-id11352 . -3) (undo-tree-id11353 . -3) (undo-tree-id11354 . -3) (undo-tree-id11355 . -3) (undo-tree-id11356 . -3) (undo-tree-id11357 . -3) (undo-tree-id11358 . -3) (undo-tree-id11359 . -3) (undo-tree-id11360 . -3) (undo-tree-id11361 . -3) (undo-tree-id11362 . -3) (undo-tree-id11363 . -3) (undo-tree-id11364 . -3) (undo-tree-id11365 . -3) (undo-tree-id11366 . -3) (undo-tree-id11367 . -3) (undo-tree-id11368 . -3) (undo-tree-id11369 . -3) (undo-tree-id11370 . -3) (undo-tree-id11371 . -3) (undo-tree-id11372 . -3) (undo-tree-id11373 . -3) (undo-tree-id11374 . -3) (undo-tree-id11375 . -3) (undo-tree-id11376 . -3) (undo-tree-id11377 . -3) (undo-tree-id11378 . -3) (undo-tree-id11379 . -3) (undo-tree-id11380 . -3) (undo-tree-id11381 . -3) (undo-tree-id11382 . -3) (undo-tree-id11383 . -3) (undo-tree-id11384 . -3) (undo-tree-id11385 . -3) (undo-tree-id11386 . -3) (undo-tree-id11387 . -3) (undo-tree-id11388 . -3) (undo-tree-id11389 . -3) (undo-tree-id11390 . -3) (undo-tree-id11391 . -3) (undo-tree-id11392 . -3) (undo-tree-id11393 . -3) (undo-tree-id11394 . -3) (undo-tree-id11395 . -3) (undo-tree-id11396 . -3) (undo-tree-id11397 . -3) (undo-tree-id11398 . -3) (undo-tree-id11399 . -3) (undo-tree-id11400 . -3) (undo-tree-id11401 . -3) (undo-tree-id11402 . -3) (undo-tree-id11403 . -3) (undo-tree-id11404 . -3) (undo-tree-id11405 . -3) (undo-tree-id11406 . -3) (undo-tree-id11407 . -3) (undo-tree-id11408 . -3) (undo-tree-id11409 . -3) (undo-tree-id11410 . -3) (undo-tree-id11411 . -3) (undo-tree-id11412 . -3) (undo-tree-id11413 . -3) (undo-tree-id11414 . -3) (undo-tree-id11415 . -3) (undo-tree-id11416 . -3) (undo-tree-id11417 . -3) (undo-tree-id11418 . -3) (undo-tree-id11419 . -3) (undo-tree-id11420 . -3) (undo-tree-id11421 . -3) (undo-tree-id11422 . -3) (undo-tree-id11423 . -3) (undo-tree-id11424 . -3) (undo-tree-id11425 . -3) (undo-tree-id11426 . -3) (undo-tree-id11427 . -3) (undo-tree-id11428 . -3) (undo-tree-id11429 . -3) (undo-tree-id11430 . -3) (undo-tree-id11431 . -3) (undo-tree-id11432 . -3) (undo-tree-id11433 . -3) (undo-tree-id11434 . -3) (undo-tree-id11435 . -3) (undo-tree-id11436 . -3) (undo-tree-id11437 . -3) (undo-tree-id11438 . -3) (undo-tree-id11439 . -3) (undo-tree-id11440 . -3) (undo-tree-id11441 . -3) (undo-tree-id11442 . -3) (undo-tree-id11443 . -3) (undo-tree-id11444 . -3) (undo-tree-id11445 . -3) (undo-tree-id11446 . -3) (undo-tree-id11447 . -3) (undo-tree-id11448 . -3) (undo-tree-id11449 . -3) (undo-tree-id11450 . -3) (undo-tree-id11451 . -3) (undo-tree-id11452 . -3) (undo-tree-id11453 . -3) (undo-tree-id11454 . -3) (undo-tree-id11455 . -3) (undo-tree-id11456 . -3) (undo-tree-id11457 . -3) (undo-tree-id11458 . -3) (undo-tree-id11459 . -3) (undo-tree-id11460 . -3) (undo-tree-id11461 . -3) (undo-tree-id11462 . -3) (undo-tree-id11463 . -3) (undo-tree-id11464 . -3) (undo-tree-id11465 . -3) (undo-tree-id11466 . -3) (undo-tree-id11467 . -3) (undo-tree-id11468 . -3) (undo-tree-id11469 . -3) (undo-tree-id11470 . -3) (undo-tree-id11471 . -3) (undo-tree-id11472 . -3) (undo-tree-id11473 . -3) (undo-tree-id11474 . -3) (undo-tree-id11475 . -3) (undo-tree-id11476 . -3) (undo-tree-id11477 . -3) (undo-tree-id11478 . -3) (undo-tree-id11479 . -3) (undo-tree-id11480 . -3) (undo-tree-id11481 . -3) (undo-tree-id11482 . -3) (undo-tree-id11483 . -3) (undo-tree-id11484 . -3) (undo-tree-id11485 . -3) (undo-tree-id11486 . -3) (undo-tree-id11487 . -3) (undo-tree-id11488 . -3) (undo-tree-id11489 . -3) (undo-tree-id11490 . -3) (undo-tree-id11491 . -3) (undo-tree-id11492 . -3) (undo-tree-id11493 . -3) (undo-tree-id11494 . -3) (undo-tree-id11495 . -3) (undo-tree-id11496 . -3) (undo-tree-id11497 . -3) (undo-tree-id11498 . -3) (undo-tree-id11499 . -3) (undo-tree-id11500 . -3) (undo-tree-id11501 . -3) (undo-tree-id11502 . -3) (undo-tree-id11503 . -3) (undo-tree-id11504 . -3) (undo-tree-id11505 . -3) (undo-tree-id11506 . -3) (undo-tree-id11507 . -3) (undo-tree-id11508 . -3) (undo-tree-id11509 . -3) (undo-tree-id11510 . -3) (undo-tree-id11511 . -3) (undo-tree-id11512 . -3) (undo-tree-id11513 . -3) (undo-tree-id11514 . -3) (undo-tree-id11515 . -3) (undo-tree-id11516 . -3) (undo-tree-id11517 . -3) (undo-tree-id11518 . -3) (undo-tree-id11519 . -3) (undo-tree-id11520 . -3) (undo-tree-id11521 . -3) (undo-tree-id11522 . -3) (undo-tree-id11523 . -3) (undo-tree-id11524 . -3) (undo-tree-id11525 . -3) (undo-tree-id11526 . -3) (undo-tree-id11527 . -3) (undo-tree-id11528 . -3) (undo-tree-id11529 . -3) (undo-tree-id11530 . -3) (undo-tree-id11531 . -3) (undo-tree-id11532 . -3) (undo-tree-id11533 . -3) (undo-tree-id11534 . -3) (undo-tree-id11535 . -3) (undo-tree-id11536 . -3) (undo-tree-id11537 . -3) (undo-tree-id11538 . -3) (undo-tree-id11539 . -3) (undo-tree-id11540 . -3) (undo-tree-id11541 . -3) (undo-tree-id11542 . -3) (undo-tree-id11543 . -3) (undo-tree-id11544 . -3) (undo-tree-id11545 . -3) (undo-tree-id11546 . -3) (undo-tree-id11547 . -3) (undo-tree-id11548 . -3) (undo-tree-id11549 . -3) (undo-tree-id11550 . -3) (undo-tree-id11551 . -3) (undo-tree-id11552 . -3) (undo-tree-id11553 . -3) (undo-tree-id11554 . -3) (undo-tree-id11555 . -3) (undo-tree-id11556 . -3) (undo-tree-id11557 . -3) (undo-tree-id11558 . -3) (undo-tree-id11559 . -3) (undo-tree-id11560 . -3) (undo-tree-id11561 . -3) (undo-tree-id11562 . -3) (undo-tree-id11563 . -3) (undo-tree-id11564 . -3) (undo-tree-id11565 . -3) (undo-tree-id11566 . -3) (undo-tree-id11567 . -3) (undo-tree-id11568 . -3) (undo-tree-id11569 . -3) (undo-tree-id11570 . -3) (undo-tree-id11571 . -3) (undo-tree-id11572 . -3) (undo-tree-id11573 . -3) (undo-tree-id11574 . -3) (undo-tree-id11575 . -3) (undo-tree-id11576 . -3) (undo-tree-id11577 . -3) (undo-tree-id11578 . -3) (undo-tree-id11579 . -3) (undo-tree-id11580 . -3) (undo-tree-id11581 . -3) (undo-tree-id11582 . -3) (undo-tree-id11583 . -3) (undo-tree-id11584 . -3) (undo-tree-id11585 . -3) (undo-tree-id11586 . -3) (undo-tree-id11587 . -3) (undo-tree-id11588 . -3) (undo-tree-id11589 . -3) (undo-tree-id11590 . -3) (undo-tree-id11591 . -3) (undo-tree-id11592 . -3) (undo-tree-id11593 . -3) (undo-tree-id11594 . -3) (undo-tree-id11595 . -3) (undo-tree-id11596 . -3) (undo-tree-id11597 . -3) (undo-tree-id11598 . -3) (undo-tree-id11599 . -3) (undo-tree-id11600 . -3) (undo-tree-id11601 . -3) (undo-tree-id11602 . -3) (undo-tree-id11603 . -3) (undo-tree-id11604 . -3) (undo-tree-id11605 . -3) (undo-tree-id11606 . -3) (undo-tree-id11607 . -3) (undo-tree-id11608 . -3) (undo-tree-id11609 . -3) (undo-tree-id11610 . -3) (undo-tree-id11611 . -3) (undo-tree-id11612 . -3) (undo-tree-id11613 . -3) (undo-tree-id11614 . -3) (undo-tree-id11615 . -3) (undo-tree-id11616 . -3) (undo-tree-id11617 . -3) (undo-tree-id11618 . -3) (undo-tree-id11619 . -3) (undo-tree-id11620 . -3) (undo-tree-id11621 . -3) (undo-tree-id11622 . -3) (undo-tree-id11623 . -3) (undo-tree-id11624 . -3) (undo-tree-id11625 . -3) (undo-tree-id11626 . -3) (undo-tree-id11627 . -3) (undo-tree-id11628 . -3) (undo-tree-id11629 . -3) (undo-tree-id11630 . -3) (undo-tree-id11631 . -3) (undo-tree-id11632 . -3) (undo-tree-id11633 . -3) (undo-tree-id11634 . -3) (undo-tree-id11635 . -3) (undo-tree-id11636 . -3) (undo-tree-id11637 . -3) (undo-tree-id11638 . -3) (undo-tree-id11639 . -3) (undo-tree-id11640 . -3) (undo-tree-id11641 . -3) (undo-tree-id11642 . -3) (undo-tree-id11643 . -3) (undo-tree-id11644 . -3) (undo-tree-id11645 . -3) (undo-tree-id11646 . -3) (undo-tree-id11647 . -3) (undo-tree-id11648 . -3) (undo-tree-id11649 . -3) (undo-tree-id11650 . -3) (undo-tree-id11651 . -3) (undo-tree-id11652 . -3) (undo-tree-id11653 . -3) (undo-tree-id11654 . -3) (undo-tree-id11655 . -3) (undo-tree-id11656 . -3) (undo-tree-id11657 . -3) (undo-tree-id11658 . -3) (undo-tree-id11659 . -3) (undo-tree-id11660 . -3) (undo-tree-id11661 . -3) (undo-tree-id11662 . -3) (undo-tree-id11663 . -3) (undo-tree-id11664 . -3) (undo-tree-id11665 . -3) (undo-tree-id11666 . -3) (undo-tree-id11667 . -3) (undo-tree-id11668 . -3) (undo-tree-id11669 . -3) (undo-tree-id11670 . -3) (undo-tree-id11671 . -3) (undo-tree-id11672 . -3) (undo-tree-id11673 . -3) (undo-tree-id11674 . -3) (undo-tree-id11675 . -3) (undo-tree-id11676 . -3) (undo-tree-id11677 . -3) (undo-tree-id11678 . -3) (undo-tree-id11679 . -3) (undo-tree-id11680 . -3) (undo-tree-id11681 . -3) (undo-tree-id11682 . -3) (undo-tree-id11683 . -3) (undo-tree-id11684 . -3) (undo-tree-id11685 . -3) (undo-tree-id11686 . -3) (undo-tree-id11687 . -3) (undo-tree-id11688 . -3) (undo-tree-id11689 . -3) (undo-tree-id11690 . -3) (undo-tree-id11691 . -3) (undo-tree-id11692 . -3) (undo-tree-id11693 . -3) (undo-tree-id11694 . -3) (undo-tree-id11695 . -3) (undo-tree-id11696 . -3) (undo-tree-id11697 . -3) (undo-tree-id11698 . -3) (undo-tree-id11699 . -3) (undo-tree-id11700 . -3) (undo-tree-id11701 . -3) (undo-tree-id11702 . -3) (undo-tree-id11703 . -3) (undo-tree-id11704 . -3) (undo-tree-id11705 . -3) (undo-tree-id11706 . -3) (undo-tree-id11707 . -3) (undo-tree-id11708 . -3) (undo-tree-id11709 . -3) (undo-tree-id11710 . -3) (undo-tree-id11711 . -3) (undo-tree-id11712 . -3) (undo-tree-id11713 . -3) (undo-tree-id11714 . -3) (undo-tree-id11715 . -3) (undo-tree-id11716 . -3) (undo-tree-id11717 . -3) (undo-tree-id11718 . -3) (undo-tree-id11719 . -3) (undo-tree-id11720 . -3) (undo-tree-id11721 . -3) (undo-tree-id11722 . -3) (undo-tree-id11723 . -3) (undo-tree-id11724 . -3) (undo-tree-id11725 . -3) (undo-tree-id11726 . -3) (undo-tree-id11727 . -3) (undo-tree-id11728 . -3) (undo-tree-id11729 . -3) (undo-tree-id11730 . -3) (undo-tree-id11731 . -3) (undo-tree-id11732 . -3) (undo-tree-id11733 . -3) (undo-tree-id11734 . -3) (undo-tree-id11735 . -3) (undo-tree-id11736 . -3) (undo-tree-id11737 . -3) (undo-tree-id11738 . -3) (undo-tree-id11739 . -3) (undo-tree-id11740 . -3) (undo-tree-id11741 . -3) (undo-tree-id11742 . -3) (undo-tree-id11743 . -3) (undo-tree-id11744 . -3) (undo-tree-id11745 . -3) (undo-tree-id11746 . -3) (undo-tree-id11747 . -3) (undo-tree-id11748 . -3) (undo-tree-id11749 . -3) (undo-tree-id11750 . -3) (undo-tree-id11751 . -3) (undo-tree-id11752 . -3) (undo-tree-id11753 . -3) (undo-tree-id11754 . -3) (undo-tree-id11755 . -3) (undo-tree-id11756 . -3) (undo-tree-id11757 . -3) (undo-tree-id11758 . -3) (undo-tree-id11759 . -3) (undo-tree-id11760 . -3) (undo-tree-id11761 . -3) (undo-tree-id11762 . -3) (undo-tree-id11763 . -3) (undo-tree-id11764 . -3) (undo-tree-id11765 . -3) (undo-tree-id11766 . -3) (undo-tree-id11767 . -3) (undo-tree-id11768 . -3) (undo-tree-id11769 . -3) (undo-tree-id11770 . -3) (undo-tree-id11771 . -3) (undo-tree-id11772 . -3) (undo-tree-id11773 . -3) (undo-tree-id11774 . -3) (undo-tree-id11775 . -3) (undo-tree-id11776 . -3) (undo-tree-id11777 . -3) (undo-tree-id11778 . -3) (undo-tree-id11779 . -3) (undo-tree-id11780 . -3) (undo-tree-id11781 . -3) (undo-tree-id11782 . -3) (undo-tree-id11783 . -3) (undo-tree-id11784 . -3) (undo-tree-id11785 . -3) (undo-tree-id11786 . -3) (undo-tree-id11787 . -3) (undo-tree-id11788 . -3) (undo-tree-id11789 . -3) (undo-tree-id11790 . -3) (undo-tree-id11791 . -3) (undo-tree-id11792 . -3) (undo-tree-id11793 . -3) (undo-tree-id11794 . -3) (undo-tree-id11795 . -3) (undo-tree-id11796 . -3) (undo-tree-id11797 . -3) (undo-tree-id11798 . -3) (undo-tree-id11799 . -3) (undo-tree-id11800 . -3) (undo-tree-id11801 . -3) (undo-tree-id11802 . -3) (undo-tree-id11803 . -3) (undo-tree-id11804 . -3) (undo-tree-id11805 . -3) (undo-tree-id11806 . -3) (undo-tree-id11807 . -3) (undo-tree-id11808 . -3) (undo-tree-id11809 . -3) (undo-tree-id11810 . -3) (undo-tree-id11811 . -3) (undo-tree-id11812 . -3) (undo-tree-id11813 . -3) (undo-tree-id11814 . -3) (undo-tree-id11815 . -3) (undo-tree-id11816 . -3) (undo-tree-id11817 . -3) (undo-tree-id11818 . -3) (undo-tree-id11819 . -3) (undo-tree-id11820 . -3) (undo-tree-id11821 . -3) (undo-tree-id11822 . -3) (undo-tree-id11823 . -3) (undo-tree-id11824 . -3) (undo-tree-id11825 . -3) (undo-tree-id11826 . -3) (undo-tree-id11827 . -3) (undo-tree-id11828 . -3) (undo-tree-id11829 . -3) (undo-tree-id11830 . -3) (undo-tree-id11831 . -3) (undo-tree-id11832 . -3) (undo-tree-id11833 . -3) (undo-tree-id11834 . -3) (undo-tree-id11835 . -3) (undo-tree-id11836 . -3) (undo-tree-id11837 . -3) (undo-tree-id11838 . -3) (undo-tree-id11839 . -3) (undo-tree-id11840 . -3) (undo-tree-id11841 . -3) (undo-tree-id11842 . -3) (undo-tree-id11843 . -3) (undo-tree-id11844 . -3) (undo-tree-id11845 . -3) (undo-tree-id11846 . -3) (undo-tree-id11847 . -3) (undo-tree-id11848 . -3) (undo-tree-id11849 . -3) (undo-tree-id11850 . -3) (undo-tree-id11851 . -3) (undo-tree-id11852 . -3) (undo-tree-id11853 . -3) (undo-tree-id11854 . -3) (undo-tree-id11855 . -3) (undo-tree-id11856 . -3) (undo-tree-id11857 . -3) (undo-tree-id11858 . -3) (6448 . 6452) (t 25732 6495 272777 754000)) nil (25732 6696 906253 375000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6475 . 6476) (nil fontified nil 6449 . 6476) (6449 . 6476) 6448) nil (25732 6696 905118 419000) 0 nil])
([nil nil ((6444 . 6445) 6443) nil (25732 6696 905117 368000) 0 nil])
([nil nil ((6446 . 6447) (6445 . 6446) 6445) nil (25732 6696 905116 437000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-block-end-line)) . 6447) (undo-tree-id11094 . 1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -1) (undo-tree-id11100 . -1) (undo-tree-id11101 . -1) (undo-tree-id11102 . -1) (undo-tree-id11103 . -1) (undo-tree-id11104 . -1) (undo-tree-id11105 . -1) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) (undo-tree-id11137 . -1) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1)) nil (25732 6696 905114 44000) 0 nil])
([nil nil ((6446 . 6447) 6446) nil (25732 6696 905085 705000) 0 nil])
([nil nil ((6481 . 6482) (6480 . 6481) 6480) nil (25732 6696 905084 804000) 0 nil])
([nil nil ((6481 . 6525) (#("src" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 6481) (undo-tree-id11075 . -1) (undo-tree-id11076 . -3) (undo-tree-id11077 . -1) (undo-tree-id11078 . -2) (undo-tree-id11079 . -2) (undo-tree-id11080 . -2) (undo-tree-id11081 . -2) (undo-tree-id11082 . -2) (undo-tree-id11083 . -2) (undo-tree-id11084 . -2) (undo-tree-id11085 . -2) (undo-tree-id11086 . -3) (undo-tree-id11087 . -3) (undo-tree-id11088 . -3) (undo-tree-id11089 . -3) (undo-tree-id11090 . -3) (undo-tree-id11091 . -3) (undo-tree-id11092 . -3) (undo-tree-id11093 . -3) 6484 (6481 . 6484)) nil (25732 6696 905083 36000) 0 nil])
([nil nil ((6492 . 6497)) nil (25732 6696 905069 293000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6712 . 6713) (nil fontified nil 6697 . 6713) (nil fontified nil 6658 . 6697) (nil fontified nil 6646 . 6658) (nil fontified nil 6609 . 6646) (nil fontified nil 6573 . 6609) (nil fontified nil 6543 . 6573) (nil fontified nil 6520 . 6543) (6520 . 6713) 6519) nil (25732 6696 905068 322000) 0 nil])
([nil nil ((6543 . 6545) (6573 . 6575) (6609 . 6611) (6646 . 6648) (6658 . 6660) (6697 . 6699) 6518) nil (25732 6696 905066 348000) 0 nil])
([nil nil ((6545 . 6547) 6518) nil (25732 6696 905064 893000) 0 nil])
([nil nil ((6579 . 6587) 6518) nil (25732 6696 905064 114000) 0 nil])
([nil nil ((6625 . 6633) 6518) nil (25732 6696 905063 275000) 0 nil])
([nil nil ((6672 . 6681) 6518) nil (25732 6696 905062 427000) 0 nil])
([nil nil ((6695 . 6703) 6518) nil (25732 6696 905061 697000) 0 nil])
([nil nil ((6744 . 6752) 6518) nil (25732 6696 905060 848000) 0 nil])
([nil nil ((6566 . 6567) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6566)) nil (25732 6696 905059 919000) 0 nil])
([nil nil ((6681 . 6682) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                 " 0 6 (face org-indent) 6 17 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6681) (undo-tree-id11068 . -1) (undo-tree-id11069 . -1) (undo-tree-id11070 . -1) (undo-tree-id11071 . -1) (undo-tree-id11072 . -1) (undo-tree-id11073 . -1) (undo-tree-id11074 . -1) (6612 . 6613) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6612)) nil (25732 6696 905058 99000) 0 nil])
([nil nil ((6726 . 6727) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6726)) nil (25732 6696 905042 797000) 0 nil])
([nil nil ((6755 . 6756) (#("’" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                " 0 6 (face org-indent) 6 16 (face org-indent)) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6755)) nil (25732 6696 905037 558000) 0 nil])
([nil nil ((6772 . 6774) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6771) (undo-tree-id11900 . -2) (undo-tree-id11901 . -2) (undo-tree-id11902 . -2) (undo-tree-id11903 . -2) (undo-tree-id11904 . -2) (undo-tree-id11905 . -2) (undo-tree-id11906 . -2) (undo-tree-id11907 . -2) (undo-tree-id11908 . -2) (undo-tree-id11909 . -2) (undo-tree-id11910 . -2) (6771 . 6774) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6770) (undo-tree-id11911 . -2) (undo-tree-id11912 . -2) (undo-tree-id11913 . -2) (undo-tree-id11914 . -2) (undo-tree-id11915 . -2) (undo-tree-id11916 . -2) (undo-tree-id11917 . -2) (undo-tree-id11918 . -2) (undo-tree-id11919 . -2) (undo-tree-id11920 . -2) (undo-tree-id11921 . -2) (6770 . 6773) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 6769) (undo-tree-id11922 . -2) (undo-tree-id11923 . -2) (undo-tree-id11924 . -2) (undo-tree-id11925 . -2) (undo-tree-id11926 . -2) (undo-tree-id11927 . -2) (undo-tree-id11928 . -2) (undo-tree-id11929 . -2) (undo-tree-id11930 . -2) (undo-tree-id11931 . -2) (undo-tree-id11932 . -2) (undo-tree-id11933 . -2) (undo-tree-id11934 . -2) (undo-tree-id11935 . -2) (undo-tree-id11936 . -2) (undo-tree-id11937 . -2) (undo-tree-id11938 . -2) (undo-tree-id11939 . -2) (undo-tree-id11940 . -2) (undo-tree-id11941 . -2) (undo-tree-id11942 . -2) (undo-tree-id11943 . -2) (undo-tree-id11944 . -2) (undo-tree-id11945 . -2) (6771 . 6772) (6768 . 6771) (t 25732 6696 974301 683000) 6767) nil (25732 6790 450957 457000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6867 . 6868) (nil fontified nil 6845 . 6868) (nil fontified nil 6823 . 6845) (nil fontified nil 6793 . 6823) (nil fontified nil 6770 . 6793) (6770 . 6868)) nil (25732 6790 450924 857000) 0 nil])
([nil nil ((6520 . 6522) (6543 . 6544) (6547 . 6548) (6577 . 6579) (6633 . 6635) (6670 . 6671) (6681 . 6682) (6693 . 6694) (6703 . 6704) (6742 . 6744) (6770 . 6772) (6793 . 6795) (6823 . 6825) (6845 . 6847) 6518) nil (25732 6790 450922 912000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) . 6520) (#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6892) (undo-tree-id11871 . -2) (undo-tree-id11872 . -2) (undo-tree-id11873 . -2) (undo-tree-id11874 . -2) (undo-tree-id11875 . -2) (undo-tree-id11876 . -2) (undo-tree-id11877 . -2) (undo-tree-id11878 . -2) (undo-tree-id11879 . -2) (undo-tree-id11880 . -1) (undo-tree-id11881 . -1) (undo-tree-id11882 . -1) (undo-tree-id11883 . -1) (undo-tree-id11884 . -1) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1) (undo-tree-id11888 . -1) (undo-tree-id11889 . -1) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) 6518) nil (25732 6790 450918 914000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("            " 0 6 (face org-indent) 6 12 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6547) 6518) nil (25732 6790 450898 677000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6587) 6518) nil (25732 6790 450897 629000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6633) 6518) nil (25732 6790 450896 591000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                   " 0 6 (face org-indent) 6 19 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                   " 0 6 (face org-indent) 6 19 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6681) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) 6518) nil (25732 6790 450895 71000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6703) 6518) nil (25732 6790 450889 369000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("                  " 0 6 (face org-indent) 6 18 (face org-indent)) font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 6752) (undo-tree-id11859 . -2) (undo-tree-id11860 . -2) (undo-tree-id11861 . -2) (undo-tree-id11862 . -2) (undo-tree-id11863 . -2) 6518) nil (25732 6790 450887 554000) 0 nil])
([nil nil ((6797 . 6799) 6518) nil (25732 6790 450874 885000) 0 nil])
([nil nil ((6831 . 6837) 6518) nil (25732 6790 450872 751000) 0 nil])
([nil nil ((6861 . 6867) 6518) nil (25732 6790 450867 567000) 0 nil])
([nil nil ((6904 . 6906) (6903 . 6904) (t 25732 6790 516820 220000) 6903) nil (25732 6866 195693 870000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7012 . 7013) (nil fontified nil 6979 . 7013) (nil fontified nil 6904 . 6979) (6904 . 7013)) nil (25732 6866 195692 612000) 0 nil])
([nil nil ((7015 . 7059) (#("src" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 7015) (undo-tree-id11958 . -1) (undo-tree-id11959 . -3) (undo-tree-id11960 . -1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (undo-tree-id11965 . -1) (undo-tree-id11966 . -1) (undo-tree-id11967 . -1) (undo-tree-id11968 . -1) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1) (undo-tree-id11981 . -1) (undo-tree-id11982 . -2) (undo-tree-id11983 . -2) (undo-tree-id11984 . -2) (undo-tree-id11985 . -2) (undo-tree-id11986 . -2) (undo-tree-id11987 . -2) (undo-tree-id11988 . -2) (undo-tree-id11989 . -2) (undo-tree-id11990 . -3) (undo-tree-id11991 . -3) (undo-tree-id11992 . -3) (undo-tree-id11993 . -3) (undo-tree-id11994 . -3) (undo-tree-id11995 . -3) (undo-tree-id11996 . -3) (undo-tree-id11997 . -3) 7018 (7015 . 7018) (7014 . 7015) (7013 . 7014) 7012) nil (25732 6866 195689 454000) 0 nil])
([nil nil ((7026 . 7031)) nil (25732 6866 195661 356000) 0 nil])
([nil nil ((7053 . 7055) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 7052) (undo-tree-id11946 . -2) (undo-tree-id11947 . -2) (undo-tree-id11948 . -2) (undo-tree-id11949 . -2) (undo-tree-id11950 . -2) (undo-tree-id11951 . -2) (undo-tree-id11952 . -2) (undo-tree-id11953 . -2) (undo-tree-id11954 . -2) (undo-tree-id11955 . -2) (undo-tree-id11956 . -2) (7054 . 7055) (#("  " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 7055) (undo-tree-id11957 . -2) 7052 (7051 . 7054) 7030) nil (25732 6866 196511 24000) 0 nil])
([nil nil ((7114 . 7116) (7113 . 7114) (7104 . 7113) 7052 (7101 . 7104) (7091 . 7101) (#("i" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -7091) (undo-tree-id12351 . -1) (undo-tree-id12352 . -1) (undo-tree-id12353 . -1) (undo-tree-id12354 . -1) (undo-tree-id12355 . -1) (undo-tree-id12356 . -1) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -1) (undo-tree-id12363 . -1) (undo-tree-id12364 . -1) (undo-tree-id12365 . -1) (undo-tree-id12366 . -1) (undo-tree-id12367 . -1) (undo-tree-id12368 . -1) (undo-tree-id12369 . -1) (undo-tree-id12370 . -1) (undo-tree-id12371 . -1) (undo-tree-id12372 . -1) (undo-tree-id12373 . -1) (undo-tree-id12374 . -1) (undo-tree-id12375 . -1) 7092 (7091 . 7092) (7090 . 7091) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -7090) (undo-tree-id12376 . -1) (undo-tree-id12377 . -1) (undo-tree-id12378 . -1) (undo-tree-id12379 . -1) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) 7091 (7089 . 7091) (#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block))) . -7089) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (undo-tree-id12397 . -1) (undo-tree-id12398 . -1) (undo-tree-id12399 . -1) (undo-tree-id12400 . 1) (undo-tree-id12401 . -1) (undo-tree-id12402 . -1) (undo-tree-id12403 . -1) 7090 (7084 . 7090) (7076 . 7084) (7074 . 7076) 7052 (7053 . 7055) (7070 . 7072) 7052 (#("  " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7070) (undo-tree-id12404 . -2) (undo-tree-id12405 . -2) (undo-tree-id12406 . -2) (undo-tree-id12407 . -1) (undo-tree-id12408 . -1) (undo-tree-id12409 . -1) (undo-tree-id12410 . -1) (undo-tree-id12411 . -1) (undo-tree-id12412 . -1) (undo-tree-id12413 . -1) (7069 . 7070) (7065 . 7069) (7053 . 7065)) nil (25732 7050 965589 627000) 0 nil] [nil nil ((nil rear-nonsticky nil 7163 . 7164) (nil fontified nil 7130 . 7164) (nil fontified nil 7055 . 7130) (7055 . 7164) 7054) ((#(" Write a predicate called GEQ that returns T if its first input is greater
than or equal to its second input." 0 75 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 75 108 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 108 109 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 7055) (undo-tree-id11998 . -108) (undo-tree-id11999 . -108) (undo-tree-id12000 . -108) (undo-tree-id12001 . -108) (nil rear-nonsticky t 7163 . 7164)) (25732 6866 195636 507000) 0 nil])
([nil nil ((7077 . 7079) (#("cond" 0 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block))) . 7077) (undo-tree-id12269 . -3) (undo-tree-id12270 . -3) (undo-tree-id12271 . -3) (undo-tree-id12272 . -3) (undo-tree-id12273 . -1) (undo-tree-id12274 . -1) (undo-tree-id12275 . -1) (undo-tree-id12276 . -1) (undo-tree-id12277 . -1) (undo-tree-id12278 . -1) (undo-tree-id12279 . -1) (undo-tree-id12280 . -1) (undo-tree-id12281 . -1) (undo-tree-id12282 . -1) (undo-tree-id12283 . -1) (undo-tree-id12284 . -1) (undo-tree-id12285 . -1) (undo-tree-id12286 . -1) (undo-tree-id12287 . -1) (undo-tree-id12288 . -1) (undo-tree-id12289 . -1) (undo-tree-id12290 . -1) (undo-tree-id12291 . -1) (undo-tree-id12292 . -1) (undo-tree-id12293 . -1) (undo-tree-id12294 . -1) (undo-tree-id12295 . -1) (undo-tree-id12296 . -1) (undo-tree-id12297 . -1) (undo-tree-id12298 . -1) (undo-tree-id12299 . -1) (undo-tree-id12300 . -1) (undo-tree-id12301 . -1) (undo-tree-id12302 . -2) (undo-tree-id12303 . -2) (undo-tree-id12304 . -2) (undo-tree-id12305 . -2) (undo-tree-id12306 . -2) (undo-tree-id12307 . -2) (undo-tree-id12308 . -2) (undo-tree-id12309 . -2) (undo-tree-id12310 . -2) (undo-tree-id12311 . -2) (undo-tree-id12312 . -2) (undo-tree-id12313 . -2) (undo-tree-id12314 . -2) (undo-tree-id12315 . -3) (undo-tree-id12316 . -3) (undo-tree-id12317 . -3) (undo-tree-id12318 . -3) (undo-tree-id12319 . -3) (undo-tree-id12320 . -3) (undo-tree-id12321 . -3) (undo-tree-id12322 . -3) (undo-tree-id12323 . -3) (undo-tree-id12324 . -3) (undo-tree-id12325 . -3) (undo-tree-id12326 . -3) (undo-tree-id12327 . -3) (undo-tree-id12328 . -4) (undo-tree-id12329 . -4) (undo-tree-id12330 . -4) (undo-tree-id12331 . -4) (undo-tree-id12332 . -4) (undo-tree-id12333 . -4) (undo-tree-id12334 . -4) (undo-tree-id12335 . -4) (undo-tree-id12336 . -4) (undo-tree-id12337 . -4) (undo-tree-id12338 . -4) (undo-tree-id12339 . -4) (undo-tree-id12340 . -4) (undo-tree-id12341 . -4) (undo-tree-id12342 . -3) (undo-tree-id12343 . -3) (undo-tree-id12344 . -3) (undo-tree-id12345 . -3) (undo-tree-id12346 . -3) (undo-tree-id12347 . -3) (undo-tree-id12348 . -3) (undo-tree-id12349 . -3) (undo-tree-id12350 . -3) 7080) nil (25732 7050 965540 407000) 0 nil])
nil
([nil nil ((7081 . 7086) (#("(" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block))) . 7081) (undo-tree-id12260 . -1) (undo-tree-id12261 . -1) (undo-tree-id12262 . -1) (undo-tree-id12263 . -1) (undo-tree-id12264 . -1) (undo-tree-id12265 . -1) (undo-tree-id12266 . -1) (undo-tree-id12267 . 1) (undo-tree-id12268 . -1)) nil (25732 7050 964954 424000) 0 nil])
([nil nil ((#("or" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 7093) (undo-tree-id12212 . -1) (undo-tree-id12213 . -1) (undo-tree-id12214 . -1) (undo-tree-id12215 . -1) (undo-tree-id12216 . -1) (undo-tree-id12217 . -1) (undo-tree-id12218 . -1) (undo-tree-id12219 . -1) (undo-tree-id12220 . -1) (undo-tree-id12221 . -1) (undo-tree-id12222 . -1) (undo-tree-id12223 . -1) (undo-tree-id12224 . -1) (undo-tree-id12225 . -1) (undo-tree-id12226 . -1) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1) (undo-tree-id12229 . -1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) (undo-tree-id12234 . -1) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -2) (undo-tree-id12238 . -2) (undo-tree-id12239 . -2) (undo-tree-id12240 . -2) (undo-tree-id12241 . -2) (undo-tree-id12242 . -2) (undo-tree-id12243 . -2) (undo-tree-id12244 . -2) (undo-tree-id12245 . -2) (undo-tree-id12246 . -2) (undo-tree-id12247 . -2) (undo-tree-id12248 . -2) (undo-tree-id12249 . -2) (undo-tree-id12250 . -2) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (undo-tree-id12256 . -1) (undo-tree-id12257 . -1) (undo-tree-id12258 . -1) (undo-tree-id12259 . -1) 7094) nil (25732 7050 964945 695000) 0 nil])
([nil nil ((#("           " 0 2 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block)) 2 11 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 7101) (undo-tree-id12201 . 11) (undo-tree-id12202 . -2) (undo-tree-id12203 . -11) (undo-tree-id12204 . -11) (undo-tree-id12205 . -11) (undo-tree-id12206 . -11) (undo-tree-id12207 . -11) (undo-tree-id12208 . -11) (undo-tree-id12209 . -11) (undo-tree-id12210 . -11) (#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . -7101) (undo-tree-id12211 . 1) 7100) nil (25732 7050 964914 399000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block))) . -7105) (undo-tree-id12185 . -1) (undo-tree-id12186 . 1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -1) (undo-tree-id12194 . -1) (undo-tree-id12195 . -1) (undo-tree-id12196 . -1) (undo-tree-id12197 . -1) (undo-tree-id12198 . -1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) 7106 (7104 . 7106)) nil (25732 7050 964906 166000) 0 nil])
([nil nil ((7081 . 7083) (#("and" 0 3 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 7081) (undo-tree-id12106 . -2) (undo-tree-id12107 . -2) (undo-tree-id12108 . -1) (undo-tree-id12109 . -2) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -2) (undo-tree-id12140 . -2) (undo-tree-id12141 . -2) (undo-tree-id12142 . -2) (undo-tree-id12143 . -2) (undo-tree-id12144 . -2) (undo-tree-id12145 . -2) (undo-tree-id12146 . -2) (undo-tree-id12147 . -3) (undo-tree-id12148 . -3) (undo-tree-id12149 . -3) (undo-tree-id12150 . -3) (undo-tree-id12151 . -3) (undo-tree-id12152 . -3) (undo-tree-id12153 . -3) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -2) (undo-tree-id12162 . -2) (undo-tree-id12163 . -2) (undo-tree-id12164 . -2) (undo-tree-id12165 . -2) (undo-tree-id12166 . -2) (undo-tree-id12167 . -2) (undo-tree-id12168 . -3) (undo-tree-id12169 . -3) (undo-tree-id12170 . -3) (undo-tree-id12171 . -3) (undo-tree-id12172 . -3) (undo-tree-id12173 . -3) (undo-tree-id12174 . -3) (undo-tree-id12175 . -3) (undo-tree-id12176 . -2) (undo-tree-id12177 . -2) (undo-tree-id12178 . -2) (undo-tree-id12179 . -2) (undo-tree-id12180 . -2) (undo-tree-id12181 . -2) (undo-tree-id12182 . -2) (undo-tree-id12183 . -2) (undo-tree-id12184 . -2) 7083) nil (25732 7050 964892 72000) 0 nil])
([nil nil ((7077 . 7080) (#("or" 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 7077) (undo-tree-id12036 . -1) (undo-tree-id12037 . -1) (undo-tree-id12038 . -1) (undo-tree-id12039 . -1) (undo-tree-id12040 . -1) (undo-tree-id12041 . -1) (undo-tree-id12042 . -1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -2) (undo-tree-id12062 . -2) (undo-tree-id12063 . -2) (undo-tree-id12064 . -2) (undo-tree-id12065 . -2) (undo-tree-id12066 . -2) (undo-tree-id12067 . -2) (undo-tree-id12068 . -2) (undo-tree-id12069 . -2) (undo-tree-id12070 . -2) (undo-tree-id12071 . -2) (undo-tree-id12072 . -2) (undo-tree-id12073 . -2) (undo-tree-id12074 . -1) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -2) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) 7078) nil (25732 7050 964677 421000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("          " 0 6 (face org-indent) 6 10 (face org-indent)) font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (rainbow-delimiters-unmatched-face org-block))) . 7104) (undo-tree-id12002 . -1) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (undo-tree-id12007 . -1) (undo-tree-id12008 . -1) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . 1) (undo-tree-id12035 . -1)) nil (25732 7050 964585 596000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t)) . -7116) (undo-tree-id12661 . -1) (undo-tree-id12662 . 1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) 7117 (7115 . 7117) (#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face org-block-end-line)) . -7115) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1) (undo-tree-id12678 . -1) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) (undo-tree-id12692 . -1) (undo-tree-id12693 . -1) (undo-tree-id12694 . -1) (undo-tree-id12695 . -1) (undo-tree-id12696 . -1) (undo-tree-id12697 . -1) (undo-tree-id12698 . -1) (undo-tree-id12699 . -1) (undo-tree-id12700 . -1) (undo-tree-id12701 . -1) (undo-tree-id12702 . -1) (undo-tree-id12703 . -1) (undo-tree-id12704 . -1) (undo-tree-id12705 . -1) (undo-tree-id12706 . -1) (undo-tree-id12707 . -1) (undo-tree-id12708 . -1) (undo-tree-id12709 . -1) (undo-tree-id12710 . -1) (undo-tree-id12711 . -1) (undo-tree-id12712 . -1) (undo-tree-id12713 . -1) (undo-tree-id12714 . -1) (undo-tree-id12715 . -1) (undo-tree-id12716 . -1) (undo-tree-id12717 . -1) (undo-tree-id12718 . -1) (undo-tree-id12719 . -1) (undo-tree-id12720 . -1) (undo-tree-id12721 . -1) (undo-tree-id12722 . -1) (undo-tree-id12723 . -1) (undo-tree-id12724 . -1) (undo-tree-id12725 . -1) (undo-tree-id12726 . -1) (undo-tree-id12727 . -1) (undo-tree-id12728 . -1) (undo-tree-id12729 . -1) (undo-tree-id12730 . -1) (undo-tree-id12731 . -1) (undo-tree-id12732 . -1) (undo-tree-id12733 . -1) (undo-tree-id12734 . -1) (undo-tree-id12735 . -1) (undo-tree-id12736 . -1) (undo-tree-id12737 . -1) (undo-tree-id12738 . -1) (undo-tree-id12739 . -1) (undo-tree-id12740 . -1) (#("
" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -7116) (undo-tree-id12741 . -1) (undo-tree-id12742 . -1) (undo-tree-id12743 . -1) (undo-tree-id12744 . -1) (undo-tree-id12745 . -1) (undo-tree-id12746 . -1) (undo-tree-id12747 . -1) (undo-tree-id12748 . -1) (undo-tree-id12749 . -1) (undo-tree-id12750 . -1) (undo-tree-id12751 . -1) (undo-tree-id12752 . -1) (undo-tree-id12753 . -1) (undo-tree-id12754 . -1) (undo-tree-id12755 . -1) (undo-tree-id12756 . -1) (undo-tree-id12757 . -1) 7117 (t 25732 7050 987732 209000)) nil (25732 7242 248876 127000) 0 nil])
([nil nil ((7117 . 7121) (7116 . 7117) 7116) nil (25732 7242 248817 655000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) keymap (keymap) face org-level-3)) . 7120) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1)) nil (25732 7242 248815 939000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . -7122) (undo-tree-id12645 . -1) (undo-tree-id12646 . -1) (undo-tree-id12647 . -1) (undo-tree-id12648 . -1) (undo-tree-id12649 . -1) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) 7123 (7120 . 7123)) nil (25732 7242 248810 379000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-level-3)) . 7121) (undo-tree-id12624 . -1) (undo-tree-id12625 . -1) (undo-tree-id12626 . -1) (undo-tree-id12627 . -1) (undo-tree-id12628 . -1) (undo-tree-id12629 . -1) (undo-tree-id12630 . -1) (undo-tree-id12631 . -1) (undo-tree-id12632 . -1) (undo-tree-id12633 . -1) (undo-tree-id12634 . -1) (undo-tree-id12635 . -1) (undo-tree-id12636 . -1) (undo-tree-id12637 . -1) (undo-tree-id12638 . -1) (undo-tree-id12639 . -1) (undo-tree-id12640 . -1) (undo-tree-id12641 . -1) (undo-tree-id12642 . -1) (undo-tree-id12643 . -1) (undo-tree-id12644 . -1)) nil (25732 7242 248802 919000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) keymap (keymap) face org-level-3)) . 7120) (undo-tree-id12580 . -1) (undo-tree-id12581 . -1) (undo-tree-id12582 . -1) (undo-tree-id12583 . -1) (undo-tree-id12584 . -1) (undo-tree-id12585 . -1) (undo-tree-id12586 . -1) (undo-tree-id12587 . -1) (undo-tree-id12588 . -1) (undo-tree-id12589 . -1) (undo-tree-id12590 . -1) (undo-tree-id12591 . -1) (undo-tree-id12592 . -1) (undo-tree-id12593 . -1) (undo-tree-id12594 . -1) (undo-tree-id12595 . -1) (undo-tree-id12596 . -1) (undo-tree-id12597 . -1) (undo-tree-id12598 . -1) (undo-tree-id12599 . -1) (undo-tree-id12600 . -1) (undo-tree-id12601 . -1) (undo-tree-id12602 . -1) (undo-tree-id12603 . -1) (undo-tree-id12604 . -1) (undo-tree-id12605 . -1) (undo-tree-id12606 . -1) (undo-tree-id12607 . -1) (undo-tree-id12608 . -1) (undo-tree-id12609 . -1) (undo-tree-id12610 . -1) (undo-tree-id12611 . -1) (undo-tree-id12612 . -1) (undo-tree-id12613 . -1) (undo-tree-id12614 . -1) (undo-tree-id12615 . -1) (undo-tree-id12616 . -1) (undo-tree-id12617 . -1) (undo-tree-id12618 . -1) (undo-tree-id12619 . -1) (undo-tree-id12620 . -1) (undo-tree-id12621 . -1) (undo-tree-id12622 . -1) (undo-tree-id12623 . -1)) nil (25732 7242 248784 694000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-multiline t org-emphasis t)) . 7119) (undo-tree-id12497 . -1) (undo-tree-id12498 . -1) (undo-tree-id12499 . -1) (undo-tree-id12500 . -1) (undo-tree-id12501 . -1) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -1) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1) (undo-tree-id12549 . -1) (undo-tree-id12550 . -1) (undo-tree-id12551 . -1) (undo-tree-id12552 . -1) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) (undo-tree-id12558 . -1) (undo-tree-id12559 . -1) (undo-tree-id12560 . -1) (undo-tree-id12561 . -1) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) (undo-tree-id12569 . -1) (undo-tree-id12570 . -1) (undo-tree-id12571 . -1) (undo-tree-id12572 . -1) (undo-tree-id12573 . -1) (undo-tree-id12574 . -1) (undo-tree-id12575 . -1) (undo-tree-id12576 . -1) (undo-tree-id12577 . -1) (undo-tree-id12578 . -1) (undo-tree-id12579 . -1)) nil (25732 7242 248545 995000) 0 nil])
([nil nil ((7119 . 7120)) nil (25732 7242 248201 502000) 0 nil])
([nil nil ((7139 . 7146) (#("F" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -7139) (undo-tree-id12414 . -1) (undo-tree-id12415 . -1) (undo-tree-id12416 . -1) (undo-tree-id12417 . -1) (undo-tree-id12418 . -1) (undo-tree-id12419 . -1) (undo-tree-id12420 . -1) (undo-tree-id12421 . -1) (undo-tree-id12422 . -1) (undo-tree-id12423 . -1) (undo-tree-id12424 . -1) (undo-tree-id12425 . -1) (undo-tree-id12426 . -1) (undo-tree-id12427 . -1) (undo-tree-id12428 . -1) (undo-tree-id12429 . -1) (undo-tree-id12430 . -1) (undo-tree-id12431 . -1) (undo-tree-id12432 . -1) (undo-tree-id12433 . -1) (undo-tree-id12434 . -1) (undo-tree-id12435 . -1) (undo-tree-id12436 . -1) (undo-tree-id12437 . -1) (undo-tree-id12438 . -1) (undo-tree-id12439 . -1) (undo-tree-id12440 . -1) (undo-tree-id12441 . -1) (undo-tree-id12442 . -1) (undo-tree-id12443 . -1) (undo-tree-id12444 . -1) (undo-tree-id12445 . -1) (undo-tree-id12446 . -1) (undo-tree-id12447 . -1) (undo-tree-id12448 . -1) (undo-tree-id12449 . -1) (undo-tree-id12450 . -1) (undo-tree-id12451 . -1) (undo-tree-id12452 . -1) (undo-tree-id12453 . -1) (undo-tree-id12454 . -1) (undo-tree-id12455 . -1) (undo-tree-id12456 . -1) (undo-tree-id12457 . -1) (undo-tree-id12458 . -1) (undo-tree-id12459 . -1) (undo-tree-id12460 . -1) (undo-tree-id12461 . -1) (undo-tree-id12462 . -1) (undo-tree-id12463 . -1) (undo-tree-id12464 . -1) (undo-tree-id12465 . -1) (undo-tree-id12466 . -1) (undo-tree-id12467 . -1) (undo-tree-id12468 . -1) (undo-tree-id12469 . -1) (undo-tree-id12470 . -1) (undo-tree-id12471 . -1) (undo-tree-id12472 . -1) (undo-tree-id12473 . -1) (undo-tree-id12474 . -1) (undo-tree-id12475 . -1) (undo-tree-id12476 . -1) (undo-tree-id12477 . -1) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) 7140 (#("E" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -7140) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) 7141 (7124 . 7141) (7120 . 7124)) nil (25732 7242 248196 676000) 0 nil])
([nil current ((7146 . 7147) 7144) nil (25732 7242 248130 456000) 0 nil])
nil
